{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"is",
				"issit	(cronus.YAML-tmLanguage)"
			],
			[
				"getchar",
				"getcharip	(cronus.YAML-tmLanguage)"
			],
			[
				"getpart",
				"getpartyleader	(cronus.YAML-tmLanguage)"
			],
			[
				"getpar",
				"getpartyname	(cronus.YAML-tmLanguage)"
			],
			[
				"get",
				"getchildid"
			],
			[
				"getch",
				"getchildid	(cronus.YAML-tmLanguage)"
			],
			[
				"getnpc",
				"getnpcid	(cronus.YAML-tmLanguage)"
			],
			[
				"char",
				"charid2rid"
			],
			[
				"str",
				"strcharinfo"
			],
			[
				"clar",
				"cleararray"
			],
			[
				"clear",
				"cleararray	(cronus.YAML-tmLanguage)"
			],
			[
				"valor",
				"valores	(eventozeny.txt)"
			],
			[
				"for",
				"for	for (…) {…} (Improved Native For-Loop)"
			],
			[
				"beg",
				"beginCaptures	beginCaptures:"
			],
			[
				"a-z",
				"a-zA-Z0-9"
			],
			[
				"close",
				"close2	(script_commands.txt)"
			],
			[
				"o",
				"other"
			],
			[
				"testedec",
				"testedecontents"
			],
			[
				"var",
				"variable"
			],
			[
				"tem",
				"temporary	(script_commands.txt)"
			],
			[
				"co",
				"comment	comment:"
			],
			[
				"mes",
				"message	Mensagem no diálogo"
			],
			[
				"mess",
				"message"
			],
			[
				"me",
				"mes	(cronus.sublime-completions)"
			],
			[
				"com",
				"comment"
			],
			[
				"inclu",
				"include	include:"
			],
			[
				"css",
				"css/style.css"
			],
			[
				"i",
				"img"
			],
			[
				"bac",
				"background-image"
			],
			[
				"hr",
				"href	Attr"
			]
		]
	},
	"buffers":
	[
		{
			"file": "cronus.sublime-completions",
			"settings":
			{
				"buffer_size": 15407,
				"line_ending": "Windows"
			}
		},
		{
			"file": "for.sublime-snippet",
			"settings":
			{
				"buffer_size": 253,
				"line_ending": "Windows"
			}
		},
		{
			"file": "cronus.YAML-tmLanguage",
			"settings":
			{
				"buffer_size": 9442,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "<?php\n$hostname = \"adm.bttransportes.eco.br\";\n$database = \"bttransp_adm\";\n$username = \"bttransp_admin\";\n$password = \"_mot234_\";\n$extrato = mysql_pconnect($hostname, $username, $password) or trigger_error(mysql_error(),E_USER_ERROR);\nmysql_select_db($database, $extrato);\n?>\n\n<html>\n<head>\n    <title>ChartJS</title>\n    <meta charset=\"utf-8\">\n    <link rel=\"stylesheet\" href=\"css/style.css\">\n    <script src=\"js/Chart.js\"></script>\n</head>\n<body>\n<div id=\"quadros\">\n\n    <div class=\"janela\">\n        <div class=\"titulo\">\n            <h1>Previsto / Realizado</h1>\n        </div>\n        <div class=\"grafico\">\n            <canvas id=\"previsto\" width=\"200\" height=\"250\" style=\"margin: 0 10px;\"></canvas>\n            <canvas id=\"realizado\" width=\"200\" height=\"250\" style=\"margin: 0 10px;\"></canvas>\n            <div id=\"legendDiv1\" style=\"width: 220px; height: 55px; float: left;\"></div>\n            <div id=\"legendDiv2\" style=\"width: 220px; height: 55px; float: left; margin-left: 5px;\"></div>\n        </div>\n    </div>\n\n    <script>\n\n        for (var i = Things.length - 1; i >= 0; i--) {\n            Things[i]\n        };\n\n        function pont(nStr)\n        {\n            nStr += '';\n            var dpos = nStr.indexOf('.');\n            var nStrEnd = '';\n            if (dpos != -1) {\n                nStrEnd = ',' + nStr.substring(dpos + 1, nStr.length);\n                nStr = nStr.substring(0, dpos);\n            }\n            var rgx = /(\\d+)(\\d{3})/;\n            while (rgx.test(nStr)) {\n                nStr = nStr.replace(rgx, '$1' + '.' + '$2');\n            }\n            if(nStrEnd.length<3 && nStrEnd != ''){nStrEnd+='0';}\n            if(nStrEnd == ''){nStrEnd = ',00';}\n            nStrEnd = nStrEnd.slice(0,3);\n            return nStr + nStrEnd;\n        }\n\n        var dadosp = [\n            {\n                value: 30.5,\n                color:\"#119922\",\n                highlight: \"#25b336\",\n                label: \"Realizado\"\n            },\n            {\n                value: 100.55555555555,\n                color: \"#DDD\",\n                highlight: \"#DDD\",\n                label: \"Pendente\"\n            }\n        ];\n        var dadosr = [\n            {\n                value: 300,\n                color:\"#cc2200\",\n                highlight: \"#e53917\",\n                label: \"Realizado\"\n            },\n            {\n                value: 100,\n                color: \"#DDD\",\n                highlight: \"#DDD\",\n                label: \"Pendente\"\n            }\n        ];\n\n        window.onload = function(){\n            var ctx = document.getElementById(\"previsto\").getContext(\"2d\");\n            window.myLine = new Chart(ctx).Doughnut(dadosp, {\n                segmentShowStroke : false,\n                percentageInnerCutout : 60,\n                animationSteps : 60,\n                animateScale : true,\n                animationEasing: \"easeOutQuart\",\n                tooltipTemplate: \"<%if (label){%><%=label%>: <%}%><%= 'R$ '+pont(value) %>\",\n                legendTemplate :\"<div class=\\\"<%=name.toLowerCase()%>-legend\\\" style=\\\"color: #777\\\">\" +\n                                    \"<% for (var i=0; i<segments.length; i++){%>\" +\n                                    \"<div style=\\\"\\\">\" +\n                                        \"<%if(segments[i].label){%>\" +\n                                        \"<div style=\\\"width: 100px; float: left; text-align: right;\\\">\" +\n                                            \"<%=segments[i].label+':'%>\" +\n                                        \"</div>\" +\n                                        \"<div style=\\\"font-weight: bold; color:\"+\n                                        \"<%if(i==0){%><%=segments[i].fillColor%><%}%>\\\"><%=' R$ '+pont(segments[i].value)%><%}%></div>\" +\n                                    \"</div>\" +\n                                    \"<%}%>\" +\n                                    \"<div style=\\\"width: 100px; float: left; text-align: right;\\\">Previsto:</div>\" +\n                                    \"<div style=\\\"font-weight: bold; color: #777;\\\"><%=' R$ '+pont(segments[0].value+segments[1].value)%></div>\" +\n                                \"</div>\"\n            });\n            var ctx2 = document.getElementById(\"realizado\").getContext(\"2d\");\n            window.myLine2 = new Chart(ctx2).Doughnut(dadosr, {\n                segmentShowStroke : false,\n                percentageInnerCutout : 60,\n                animationSteps : 60,\n                animateScale : true,\n                animationEasing: \"easeOutQuart\",\n                tooltipTemplate: \"<%if (label){%><%=label%>: <%}%><%= 'R$ '+pont(value) %>\",\n                legendTemplate :\"<div class=\\\"<%=name.toLowerCase()%>-legend\\\" style=\\\"color: #777\\\">\" +\n                                    \"<% for (var i=0; i<segments.length; i++){%>\" +\n                                    \"<div style=\\\"\\\">\" +\n                                        \"<%if(segments[i].label){%>\" +\n                                        \"<div style=\\\"width: 100px; float: left; text-align: right;\\\">\" +\n                                            \"<%=segments[i].label+':'%>\" +\n                                        \"</div>\" +\n                                        \"<div style=\\\"font-weight: bold; color:\"+\n                                        \"<%if(i==0){%><%=segments[i].fillColor%><%}%>\\\"><%=' R$ '+pont(segments[i].value)%><%}%></div>\" +\n                                    \"</div>\" +\n                                    \"<%}%>\" +\n                                    \"<div style=\\\"width: 100px; float: left; text-align: right;\\\">Previsto:</div>\" +\n                                    \"<div style=\\\"font-weight: bold; color: #777;\\\"><%=' R$ '+pont(segments[0].value+segments[1].value)%></div>\" +\n                                \"</div>\"\n            });\n            document.getElementById(\"legendDiv1\").innerHTML = window.myLine.generateLegend();\n            document.getElementById(\"legendDiv2\").innerHTML = window.myLine2.generateLegend();\n        }\n    </script>\n\n</div>\n</body>",
			"file": "/C/Program Files (x86)/VertrigoServ/www/graph/index.php",
			"file_size": 6143,
			"file_write_time": 130826521711788701,
			"settings":
			{
				"buffer_size": 6005,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/MC 100/Desktop/warper.crn",
			"settings":
			{
				"buffer_size": 22090,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "//|==========================================================================================|\n//|   __________     __________       __________   _____          _____   _____        _____ |\n//|  |::::::::::|   |::::::::: |     |::::::::::|  \\::::\\        /::::/	  \\::::\\      /::::/ |\n//|  |:: ____ ::|   |:: ____ ::|     |:: ____ ::|   \\::::\\      /::::/	   \\::::\\    /::::/  |\n//|  |::|    |::|   |::|    |::|     |::|    |::|    \\::::\\    /::::/       \\::::\\  /::::/   |\n//|  |::|    |::|   |::|    |::|     |::|    |::|     \\::::\\  /::::/         \\::::\\/::::/    |\n//|  |::|____|::|   |::|____|::|     |::|    |::|      \\::::\\/::::/           \\::::::::/     |\n//|  |::::::::::|   |::::::::::\\     |::|    |::|	 	\\::::::::/             \\::::::/	     |\n//|  |::________|   |:: ____ :::\\    |::|    |::|		 \\::::::/		       	\\::::/	     |\n//|  |::|	    	|::|     \\:::|   |::|____|::|		 /::::::\\               |::::|	     |\n//|  |::|           |::|      |::|   |::      ::|       /::::::::\\              |::::|       |\n//|  |::|           |::|      |::|   |::::::::::|      /::::/\\::::\\             |::::|       |\n//|  |__|	    	|__|      |__|   |__________|     /____/  \\____\\	        |____|	     |\n//|        									   	    										 |\n//|==========================================================================================|\n//|   Script Criando por ragnaproxy | Cronus | Por Favor, Não Retire Os Créditos.            |\n//|==========================================================================================|\n//|         *************************Evento de Zeny***********************                   |\n//|==========================================================================================|\n\nprontera,150,150,5	script	Evento de ZENY	825,{\n\nset .nn2$,\"[^1E90FFEvento de Zenny^000000]\";\nif(getgmlevel() > 80) goto ADM;\n\n	mes .nn2$;\n	mes \"O que deseja fazer?\";\n	switch(Select( \"Entra no Evento\",\"Informações\",\"Nada\")){\ncase 1:\n	next;\n	if($open == 1){ mes .nn2$;; mes \"^ff6600bom evento.^000000\"; warp \"pvp_y_1-2\",0,0;  end; }\n	if($open == 0){ mes .nn2$;; mes \"^ff6600O evento de ZENY não está aberto. Ele abre a cada meia hora.^000000\"; close; }\ncase 2:\n	next;\n	mes .nn2$;\n	mes \"O Evento de Zeny funciona da seguinte forma Após o inicio do evento e envocado varios montros,\";\n	mes \"Mais apenas 6 monstro contem o premio em ZENY.\";\n	mes \"1° - ^FFA500\"+$premio+\"^000000\";\n	mes \"2° - ^FFA500\"+$premio2+\"^000000\";\n	mes \"3° - ^FFA500\"+$premio3+\"^000000\";\n	mes \"4° - ^FFA500\"+$premio4+\"^000000\";\n	mes \"5° - ^FFA500\"+$premio5+\"^000000\";\n	mes \"6° - ^FFA500\"+$premio6+\"^000000\";\n	mes \"Premio para o resto dos monstros  ^FFA500\"+$premio7+\"^000000\";\n	close;\ncase 3:\nclose;\n\nADM:\n	mes .nn2$;\n	mes \"Olá ^FF0000\"+strcharinfo(0)+\"^000000 oque deseja fazer ?\";\n	menu \"Entra no evento\",ENT,\"Muda zeny\",PRE,\"Ver zeny\",VER;\nENT:\nwarp \"pvp_y_1-2\",0,0;  end;\n\nPRE:\n	next;\n	mes .nn2$;\n	mes \"Ensira os valores dos premios na ordem\";\n	next;\n	mes .nn2$;\n	mes \"Quantidade de Zeny para quem mata o 1° monstro\";\n	input $premio;\n	next;\n	mes .nn2$;\n	mes $premio;\n	mes \"Está Certo?\";\n	next;\n	if(Select(\"Sim\",\"Não\")==2) goto ADM;\n	mes .nn2$;\n	mes \"Quantidade de Zeny para quem mata o 2° monstro\";\n	input $premio2;\n	next;\n	mes .nn2$;\n	mes $premio2;\n	mes \"Está Certo?\";\n	next;\n	if(Select(\"Sim\",\"Não\")==2) goto ADM;\n	mes .nn2$;\n	mes \"Quantidade de Zeny para quem mata o 3° monstro\";\n	input $premio3;\n	next;\n	mes .nn2$;\n	mes $premio3;\n	mes \"Está Certo?\";\n	next;\n	if(Select(\"Sim\",\"Não\")==2) goto ADM;\n	mes .nn2$;\n	mes \"Quantidade de Zeny para quem mata o 4° monstro\";\n	input $premio4;\n	next;\n	mes .nn2$;\n	mes $premio4;\n	mes \"Está Certo?\";\n	next;\n	if(Select(\"Sim\",\"Não\")==2) goto ADM;\n	mes .nn2$;\n	mes \"Quantidade de Zeny para quem mata o 5° monstro\";\n	input $premio5;\n	next;\n	mes .nn2$;\n	mes $premio5;\n	mes \"Está Certo?\";\n	next;\n	if(Select(\"Sim\",\"Não\")==2) goto ADM;\n	mes .nn2$;\n	mes \"Quantidade de Zeny para quem mata o 6° monstro\";\n	input $premio6;\n	next;\n	mes .nn2$;\n	mes $premio6;\n	mes \"Está Certo?\";\n	next;\n	if(Select(\"Sim\",\"Não\")==2) goto ADM;\n	mes .nn2$;\n	mes \"Quantidade de Zeny para quem mata os resto dos montros\";\n	mes \"Aconselho colocar Pouco zeny nessa parte ..\";\n	input $premio7;\n	next;\n	mes .nn2$;\n	mes $premio7;\n	mes \"Está Certo?\";\n	next;\n	if(Select(\"Sim\",\"Não\")==2) goto ADM;\n	mes \"Ok você termino de edita os premios\";\n	close;\nVER:\n	next;\n	mes .nn2$;\n	mes \"1° - ^FFA500\"+$premio+\"^000000\";\n	mes \"2° - ^FFA500\"+$premio2+\"^000000\";\n	mes \"3° - ^FFA500\"+$premio3+\"^000000\";\n	mes \"4° - ^FFA500\"+$premio4+\"^000000\";\n	mes \"5° - ^FFA500\"+$premio5+\"^000000\";\n	mes \"6° - ^FFA500\"+$premio6+\"^000000\";\n	mes \"Premio para o resto dos monstros  ^FFA500\"+$premio7+\"^000000\";\n	close;\n}\n}\n-	script	zeny#on	-1,{\n\nOnMinute53:\nOnMinute25:\nAnnounce \"O Evento de ZENY está aberto, e em 5 minutos ele começará!\",8;\ninitnpctimer; set $open,1;\n	OnTimer60000:	Announce \"O Evento de ZENY está aberto, e em 4 minutos ele começará!\",8;	end;\n	OnTimer90000:	Announce \"O Evento de ZENY está aberto, e em 3 minutos ele começará!\",8;	end;\n	OnTimer120000:	Announce \"O Evento de ZENY está aberto, e em 2 minutos ele começará!\",8;	end;\n	OnTimer150000:	Announce \"O Evento de ZENY está aberto, e em 1 minuto ele começará!\",8;	end;\n	OnTimer180000:	Announce \"O Evento de ZENY começou!! Todos os montros forão solto --BOA SORTE--\",8;\n\n			set $open,0; set  $monster,100;\n			monster \"pvp_y_1-2\",0,0,\"Evento de ZENY\",1613,1,\"zeny#on::On1Zeny\";\n			monster \"pvp_y_1-2\",0,0,\"Evento de ZENY\",1613,1,\"zeny#on::On2Zeny\";\n			monster \"pvp_y_1-2\",0,0,\"Evento de ZENY\",1613,1,\"zeny#on::On3Zeny\";\n			monster \"pvp_y_1-2\",0,0,\"Evento de ZENY\",1613,1,\"zeny#on::On4Zeny\";\n			monster \"pvp_y_1-2\",0,0,\"Evento de ZENY\",1613,1,\"zeny#on::On5Zeny\";\n			monster \"pvp_y_1-2\",0,0,\"Evento de ZENY\",1613,1,\"zeny#on::On6Zeny\";\n			monster \"pvp_y_1-2\",0,0,\"Evento de ZENY\",1613,94,\"zeny#on::OnZeny\";\n			end;\n			OnTimer200000:	Announce \"Vocês tem 5 minutos para acha os monstro premiado\",8; end;\n		On1Zeny:\n			announce \"EVENTO DE ZENY: [\"+strcharinfo(0)+\"] encontrou  1 monstro Premiado, Parabens .\",8;\n			set Zeny, Zeny + $premio; end;\n		On2Zeny:\n			announce \"EVENTO DE ZENY: [\"+strcharinfo(0)+\"] encontrou  1 monstro Premiado, Parabens .\",8;\n			set Zeny, Zeny + $premio2; end;\n		On3Zeny:\n			announce \"EVENTO DE ZENY: [\"+strcharinfo(0)+\"] encontrou  1 monstro Premiado, Parabens .\",8;\n			set Zeny, Zeny + $premio3; end;\n		On4Zeny:\n			announce \"EVENTO DE ZENY: [\"+strcharinfo(0)+\"] encontrou  1 monstro Premiado, Parabens .\",8;\n			set Zeny, Zeny + $premio4; end;\n		On5Zeny:\n			announce \"EVENTO DE ZENY: [\"+strcharinfo(0)+\"] encontrou  1 monstro Premiado, Parabens .\",8;\n			set Zeny, Zeny + $premio5; end;\n		On6Zeny:\n			announce \"EVENTO DE ZENY: [\"+strcharinfo(0)+\"] encontrou  1 monstro Premiado, Parabens .\",8;\n			set Zeny, Zeny + $premio6; end;\n		OnZeny:\n			set $monster,$monster-1;\n			dispbottom \"Você não acerto um monstro premiado tente outro!!\";\n			set Zeny, Zeny + $premio7; end;\n\n		OnTimer500000:	Announce \"EVENTO DE ZENY: O Evento de Zeny Termino Parabens a todos os vencedores..\",8;\n		killmonsterall \"pvp_y_1-2\"; end;\n\n}\n// Map-Flags\npvp_y_1-2	mapflag	nowarp\npvp_y_1-2	mapflag	nowarpto\npvp_y_1-2	mapflag	noteleport\npvp_y_1-2	mapflag	nosave	SavePoint\npvp_y_1-2	mapflag	nomemo\npvp_y_1-2	mapflag	nobranch\npvp_y_1-2	mapflag	nopenalty\n",
			"file": "/C/Users/MC 100/Downloads/eventozeny.txt",
			"file_size": 7461,
			"file_write_time": 130826526676429630,
			"settings":
			{
				"buffer_size": 7265,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "//===== Hercules Documentation ===============================\n//= Hercules Script Commands\n//===== By: ==================================================\n//= Hercules Dev Team\n//===== Description: =========================================\n//= A reference manual for the Hercules scripting language.\n//= Commands are sorted depending on their functionality.\n//============================================================\n\nThis document is a reference manual for all the scripting commands and \nfunctions available in current Hercules GIT. It is not a simple tutorial. \nWhen people tell you to \"Read The F***ing Manual\", they mean this.\n\nThe information was mostly acquired through looking up how things actually \nwork in the source code of the server, which was written by many people \nover time, and lots of them don't speak English and never left any notes - \nor are otherwise not available for comments. As such, anything written in \nhere might not be correct, it is only correct to the best of our \nknowledge, which is limited.\n\nThis is not a place to teach you basic programming. This document will not \nteach you basic programming by itself. It's more of a reference for those \nwho have at least a vague idea of what they want to do and want to know \nwhat tools they have available to do it. We've tried to keep it as simple \nas feasible, but if you don't understand it, getting a clear book on \nprogramming in general will help better than yelling around the forum for \nhelp.\n\nA little learning never caused anyone's head to explode.\n\nStructure\n---------\n\nThe commands and functions are listed in no particular order:\n\n*Name of the command and how to call it.\n\nDescriptive text\n\n	Small example if possible. Will usually be incomplete, it's there just \n	to give you an idea of how it works in practice.\n\nTo find a specific command, use Ctrl+F, (or whatever keys call up a search \nfunction in whatever you're reading this with) put an * followed by the \ncommand name, and it should find the command description for you.\n\nIf you find anything omitted, please tell us. :)\n\nSyntax\n------\n\nThroughout this document, wherever a command wants an argument, it is \ngiven in <angle brackets>. This doesn't mean you should type the angle \nbrackets. :) If an argument of a command is optional, it is given in \n{curly brackets}. You've doubtlessly seen this convention somewhere, if \nyou didn't, get used to it, that's how big boys do it. If a command can \noptionally take an unspecified number of arguments, you'll see a list like \nthis:\n\ncommand <argument>{,<argument>...<argument>}\n\nThis still means they will want to be separated by commas.\n\nWhere a command wants a string, it will be given in \"quotes\", if it's a \nnumber, it will be given without them. Normally, you can put an \nexpression, like a bunch of functions or operators returning a value, in \n(round brackets) instead of most numbers. Round brackets will not always \nbe required, but they're often a good idea.\n\nWherever you refer to a map, use 'mapname' instead of 'mapname.gat'.\n\n\nScript loading structure\n------------------------\n\nScripts are loaded by the map server as referenced in the \n'conf/map-server.conf' configuration file, but in the default \nconfiguration, it doesn't load any script files itself. Instead, it loads \nthe file 'npc/scripts_main.conf' which itself contains references to other \nfiles. The actual scripts are loaded from txt files, which are linked up \nlike this:\n\nnpc: <path to a filename>\n\nAny line like this, invoked, ultimately, by 'map-server.conf' will load up \nthe script contained in this file, which will make the script available. \nNo file will get loaded twice, to prevent possible errors.\n\nAnother configuration file option of relevance is:\n\ndelnpc: <path to a filename>\n\nThis will unload a specified script filename from memory, which, while \nseemingly useless, may sometimes be required.\n\nWhenever '//' is encountered in a line upon reading, everything beyond \nthis on that line is considered to be a comment and is ignored. This works \nwherever you place it.\n\n// This line will be ignored when processing the script.\n\nBlock comments can also be used, where you can place /* and */ between any \ntext you wish Hercules to ignore.\n\nExample:\n/* This text,\n * no matter which new line you start\n * is ignored, until the following \n * symbol is encountered: */\n \nThe asterisks (*) in front of each line is a personal preference, and is \nnot required.\n\nUpon loading all the files, the server will execute all the top-level \ncommands in them. No variables exist yet at this point, no commands can be \ncalled other than those given in this section. These commands set up the \nbasic server script structure - create NPC objects, spawn monster objects, \nset map flags, etc. No code is actually executed at this point except \nthem. The top-level commands the scripting are pretty confusing, since \nthey aren't structured like you would expect commands, command name first, \nbut rather, normally start with a map name.\n\nWhat's more confusing about the top-level commands is that most of them \nuse a tab symbol to divide their arguments.\n\nTo prevent problems and confusion, the tab symbols are written as '%TAB%' \nor '<TAB>' throughout this document, even though this makes the text a bit \nless readable. Using an invisible symbol to denote arguments is one of the \nbad things about this language, but we're stuck with it for now. :)\n\nHere is a list of valid top-level commands:\n\n** Set a map flag:\n\n<map name>%TAB%mapflag%TAB%<flag>\n\nThis will, upon loading, set a specified map flag on a map you like. These \nare normally in files inside 'npc/mapflag' and are loaded first, so by the \ntime the server's up, all the maps have the flags they should have. Map \nflags determine the behavior of the map regarding various common problems, \nfor a better explanation, see 'setmapflag'.\n\n** Create a permanent monster spawn:\n\n<map name>,<x>,<y>,<xs>,<ys>%TAB%monster%TAB%<monster name>%TAB%<mob id>,<amount>,<delay1>,<delay2>,<event>{,<mob size>,<mob ai>}\n\nMap name is the name of the map the monsters will spawn on. X,Y are the \ncoordinates where the mob should spawn. If X's and Y's are non-zero, they \nspecify the 'radius' of a spawn-rectangle area centered at x,y. Putting \nzeros instead of these coordinates will spawn the monsters randomly. Note \nthis is only the initial spawn zone, as mobs random-walk, they are free to \nmove away from their specified spawn region.\n\nMonster name is the name the monsters will have on screen, and has no \nrelation whatsoever to their names anywhere else. It's the mob id that \ncounts, which identifies monster record in 'mob_db.txt' database of \nmonsters. If the mob name is given as \"--ja--\", the 'japanese name' field \nfrom the monster database is used, (which, in Hercules, actually contains \nan English name) if it's \"--en--\", it's the 'english name' from the \nmonster database (which contains an uppercase name used to summon the \nmonster with a GM command).\n\nAmount is the amount of monsters that will be spawned when this command is \nexecuted, it is affected by spawn rates in 'battle.conf'.\n\nDelay1 and delay2 control monster respawn delays - the first one is the \nfixed base respawn time, and the second is random variance on top of the \nbase time. Both values are given in milliseconds (1000 = 1 second). Note \nthat the server also enforces a minimum respawn delay of 5 seconds.\n\nYou can specify a custom level to use for the mob different from the one \nof the database by adjoining the level after the name with a comma. eg: \n\"Poring,50\" for a name will spawn a monster with name Poring and level 50.\n\nEvent is a script event to be executed when the mob is killed. The event \nmust be in the form \"NPCName::OnEventName\" to execute, and the event name \nlabel should start with \"On\". As with all events, if the NPC is an \non-touch NPC, the player who triggers the script must be within 'trigger' \nrange for the event to work.\n\nThere are two optional fields for monster size and AI. Size can be 0 \n(medium), 1 (small), or 2 (big). AI can be 0 (default), 1 \n(attack/friendly), 2 (sphere), 3 (flora), or 4 (zanzou).\n\nAlternately, a monster spawned using 'boss_monster' instead of 'monster' is able to be \ndetected on the map with the SC_CASH_BOSS_ALARM status (used by Convex Mirror, item ID# 12214).\n\n** NPC names\n\n/!\\ WARNING: this applies to warps, NPCs, duplicates and shops /!\\\n\nNPC names are kinda special and are formatted this way:\n\n<Display name>{::<Unique name>}\n\nAll NPCs need to have a unique name that is used for identification \npurposes. When you have to identify a NPC by it's name, you should use \n<Unique name>. If <Unique name> is not provided, use <Display name> \ninstead.\n\nThe client has a special feature when displaying names: if the display \nname contains a '#' character, it hides that part of the name.\nEx: if your NPC is named 'Hunter#hunter1', it will be displayed as 'Hunter'\n\n<Display name> must be at most 24 characters in length.\n<Unique name> must be at most 24 characters in length.\n\n** Define a warp point\n\n<from map name>,<fromX>,<fromY>{,<facing>}%TAB%warp%TAB%<warp name>%TAB%<spanx>,<spany>,<to map name>,<toX>,<toY>\n\nThis will define a warp NPC that will warp a player between maps, and \nwhile most arguments of that are obvious, some deserve special mention.\n\nSpanX and SpanY will make the warp sensitive to a character who didn't \nstep directly on it, but walked into a zone which is centered on the warp \nfrom coordinates and is SpanX in each direction across the X axis and \nSpanY in each direction across the Y axis.\n\nWarp NPC objects also have a name, because you can use it to refer to them \nlater with 'enablenpc'/'disablenpc'.\n\nFacing of a warp object is irrelevant, it is not used in the code and all \ncurrent scripts have a zero in there.\n\n** Define an NPC object.\n\n<map name>,<x>,<y>,<facing>%TAB%script%TAB%<NPC Name>%TAB%<sprite id>,{<code>}\n<map name>,<x>,<y>,<facing>%TAB%script%TAB%<NPC Name>%TAB%<sprite id>,<triggerX>,<triggerY>,{<code>}\n\nThis will place an NPC object on a specified map at the specified \nlocation, and is a top-level command you will use the most in your custom \nscripting. The NPCs are triggered by clicking on them, and/or by walking \nin their trigger area, if defined. See that below.\n\nFacing is a direction the NPC sprite will face in. Not all NPC sprites \nhave different images depending on the direction you look from, so for \nsome facing will be meaningless. Facings are counted counterclockwise in \nincrements of 45 degrees, where 0 means facing towards the top of the map. \n(So to turn the sprite towards the bottom of the map, you use facing 4, \nand to make it look southeast it's facing 5.)\n\nSprite id is the sprite number used to display this particular NPC. For a \nfull list of sprite id numbers see http://kalen.s79.xrea.com/npc/npce.shtml\nYou may also use a monster's ID number instead to display a monster sprite \nfor this NPC, in npcs that have view ids of mobs it's encouraged to use\nOnTouch events with a 2,2 range and with an 'end' after the header to avoid\nbugs (for more info on why see npc_click@map/npc.c). It is possible to use a job\nsprite as well, but you must first define it as a monster sprite in 'mob_avail.txt',\na full description on how to do this is not in the scope of this manual.\nA '-1' sprite id will make the NPC invisible (and unclickable). \nA '111' sprite id will make an NPC which does not have a sprite, but is \nstill clickable, which is useful if you want to make a clickable object of \nthe 3D terrain.\n\nTriggerX and triggerY, if given, will define an area, centered on NPC and \nspanning triggerX cells in every direction across X and triggerY in every \ndirection across Y. Walking into that area will trigger the NPC. If no \n'OnTouch:' special label is present in the NPC code, the execution will \nstart from the beginning of the script, otherwise, it will start from the \n'OnTouch:' label. Monsters can also trigger the NPC, though the label \n'OnTouchNPC:' is used in this case. If player left area npc will called\nif present label 'OnUnTouch'.\n\nThe code part is the script code that will execute whenever the NPC is \ntriggered. It may contain commands and function calls, descriptions of \nwhich compose most of this document. It has to be in curly brackets, \nunlike elsewhere where we use curly brackets, these do NOT signify an \noptional parameter.\n\n** Define a 'floating' NPC object.\n\n-%TAB%script%TAB%<NPC Name>%TAB%-1,{<code>}\n\nThis will define an NPC object not triggerable by normal means. This would \nnormally mean it's pointless since it can't do anything, but there are \nexceptions, mostly related to running scripts at specified time, which is \nwhat these floating NPC objects are for. More on that below.\n\n** Define a shop/cashshop NPC.\n\n-%TAB%shop%TAB%<NPC Name>%TAB%<sprite id>,<itemid>:<price>{,<itemid>:<price>...}\n<map name>,<x>,<y>,<facing>%TAB%shop%TAB%<NPC Name>%TAB%<sprite id>,<itemid>:<price>{,<itemid>:<price>...}\n\nThis will define a shop NPC, which, when triggered (which can only be done \nby clicking) will cause a shop window to come up. No code whatsoever runs \nin shop NPCs and you can't change the prices otherwise than by editing the \nscript itself (no variables even exist at this point of scripting, so \ndon't even bother trying to use them).\n\nThe item id is the number of item in the 'item_db.txt' database. If Price \nis set to -1, the 'buy price' given in the item database will be used. \nOtherwise, the price you gave will be used for this item, which is how you \ncreate differing prices for items in different shops.\n\nYou can alternatively use \"cashshop\" in place of \"shop\" to use the Cash \nShop interface, allowing you to buy items with special points (Currently \nstored as account vars in #CASHPOINTS and #KAFRAPOINTS). This \ntype of shop will not allow you to sell items at it, you may only purchase \nitems here. The layout used to define sale items still count, and \n\"<price>\" refers to how many points will be spent purchasing the them.\n\n** Define a trader NPC\n<map name>,<x>,<y>,<facing>%TAB%trader%TAB%<NPC Name>%TAB%<sprite id>,{<code>}\n-%TAB%trader%TAB%<NPC Name>%TAB%-1,{<code>}\n\nAll the standards that are valid to script objects are also valid for trader objects\n(see ** Define an NPC object for more information).\nThis will define a trader NPC, which can cause a shop, cashshop or market window\nto come up when clicked or called by other means. Unlike shop/cashshop NPCs this\ntype will run a code and can change the items that are being sold over time without\nother NPC objects.\nThe types that a trader object can have are the following:\n- NST_ZENY	(0) Normal Zeny Shop (shop)\n- NST_CASH	(1) Normal Cash Shop (cashshop)\n- NST_MARKET	(2) Normal NPC Market Shop (where items have limited availability\n			and need to be refurbished)\n- NST_CUSTOM	(3) Custom Shop (any currency, item/var/etca, check sample)\nUnless otherwise specified via *tradertype an trader object will be defined as\nNST_ZENY.\n\nNote: NST_MARKET is only available with PACKETVER 20131223 or newer.\nSee '12 - NPC Trader-Related Commands' and /doc/sample/npc_trader_sample.txt for\nmore information regarding how to use this NPC type.\n\n** Define an warp/shop/cashshop/NPC duplicate.\n\nwarp: <map name>,<x>,<y>{,<facing>}%TAB%duplicate(<label>)%TAB%<NPC Name>%TAB%<spanx>,<spany>\nshop/cashshop/npc: -%TAB%duplicate(<label>)%TAB%<NPC Name>%TAB%<sprite id>\nshop/cashshop/npc: <map name>,<x>,<y>,<facing>%TAB%duplicate(<label>)%TAB%<NPC Name>%TAB%<sprite id>\nnpc: -%TAB%duplicate(<label>)%TAB%<NPC Name>%TAB%<sprite id>,<triggerX>,<triggerY>\nnpc: <map name>,<x>,<y>,<facing>%TAB%duplicate(<label>)%TAB%<NPC Name>%TAB%<sprite id>,<triggerX>,<triggerY>\n\nThis will duplicate an warp/shop/cashshop/NPC referred to by 'label'.\nWarp duplicates inherit the target location.\nShop/cashshop duplicates inherit the item list.\nNPC duplicates inherit the script code.\nThe rest (name, location, facing, sprite ID, span/trigger area) is \nobtained from the definition of the duplicate (not inherited).\n\n** Define a function object\n\nfunction%TAB%script%TAB%<function name>%TAB%{<code>}\n\nThis will define a function object, callable with the 'callfunc' command \n(see below). This object will load on every map server separately, so you \ncan get at it from anywhere. It's not possible to call the code in this \nobject by anything other than the 'callfunc' script command.\n\nThe code part is the script code that will execute whenever the function \nis called with 'callfunc'. It has to be in curly brackets, unlike \nelsewhere where we use curly brackets, these do NOT signify an optional \nparameter.\n\nOnce an object is defined which has a 'code' field to it's definition, it \ncontains script commands which can actually be triggered and executed.\n\n~ RID? GID? ~\n\nWhat a RID is and why do you need to know\n-----------------------------------------\n\nMost scripting commands and functions will want to request data about a \ncharacter, store variables referenced to that character, send stuff to the \nclient connected to that specific character. Whenever a script is invoked \nby a character, it is passed a so-called RID - this is the account ID \nnumber of a character that caused the code to execute by clicking on it, \nwalking into it's OnTouch zone, or otherwise.\n\nIf you are only writing common NPCs, you don't need to bother with it. \nHowever, if you use functions, if you use timers, if you use clock-based \nscript activation, you need to be aware of all cases when a script \nexecution can be triggered without a RID attached. This will make a lot of \ncommands and functions unusable, since they want data from a specific \ncharacter, want to send stuff to a specific client, want to store \nvariables specific to that character, and they would not know what \ncharacter to work on if there's no RID.\n\nUnless you use 'attachrid' to explicitly attach a character to the script \nfirst (see player-related commands).\n\nWhenever we say 'invoking character', we mean 'the character who's RID is \nattached to the running script. The script function \"playerattached\" can \nbe used to check which is the currently attached player to the script (it \nwill return 0 if the there is no player attached or the attached player no \nlonger is logged on to the map-server).\n\nBut what about GID?\n--- ---- ----- ----\n\nGID stands for the Game ID of something, this can either be the GID of a \nmob obtained through the monster script command (if only summoned one), \nthe GID of a NPC obtained through the getnpcid script command or the \naccount ID of a character (same as its RID). Another way would be to right \nclick on a mob, NPC or char as GM sprited char to view its GID.\n\nItem and pet scripts\n--------------------\n\nEach item in the item database has three special fields - Script, \nOnEquip_Script and OnUnequip_Script. The first is script code run every \ntime a character equips the item, with the RID of the equipping character. \nEvery time they unequip an item, all temporary bonuses given by the script \ncommands are cleared, and all the scripts are executed once again to \nrebuild them. This also happens in several other situations (like upon \nlogin) but the full list is currently unknown.\n\nOnEquip_Script is a piece of script code run whenever the item is used by \na character by double-clicking on it. OnUnequip_Script runs whenever the \nequipment is unequipped by a character.\n\nNot all script commands work properly in the item scripts. Where commands \nand functions are known to be meant specifically for use in item scripts, \nthey are described as such.\n\nEvery pet in the pet database has a PetScript field, which determines pet \nbehavior. It is invoked wherever a pet of the specified type is spawned \n(hatched from an egg, or loaded from the char server when a character who \nhad that pet following them connects). This may occur in some other \nsituations as well. Don't expect anything other than commands definitely \nmarked as usable in pet scripts to work in there reliably.\n\nNumbers\n-------\n\nBeside the common decimal numbers, which are nothing special whatsoever \n(though do not expect to use fractions, since ALL numbers are integer in \nthis language), the script engine also handles hexadecimal numbers, which \nare otherwise identical. Writing a number like '0x<hex digits>' will make \nit recognized as a hexadecimal value. Notice that 0x10 is equal to 16. \nAlso notice that if you try to 'mes 0x10' it will print '16'.\n\nNumber values can't exceed the limits of an integer variable: Any number\ngreater than INT_MAX (2147483647) or smaller than INT_MIN (-2147483648) will\nbe capped to those values and will cause a warning to be reported.\n\nVariables\n---------\n\nThe meat of every programming language is variables - places where you \nstore data.\n\nIn Hercules scripting language, variable names are case sensitive. Even though\nat the current time the script engine accepts them even with the incorrect\ncase, it is not advised to rely on this behavior, as it may change at any\ntime.\n\nVariables are divided into and uniquely identified by the combination of:\nprefix  - determines the scope and extent (or lifetime) of the variable\nname    - an identifier consisting of '_' and alphanumeric characters\npostfix - determines the type of the variable: integer or string\n\nScope can be:\nglobal    - global to all servers\nlocal     - local to the server\naccount   - attached to the account of the character identified by RID\ncharacter - attached to the character identified by RID\nnpc       - attached to the NPC\nscope     - attached to the scope of the instance\n\nExtent can be:\npermanent - They still exist when the server resets.\ntemporary - They cease to exist when the server resets.\n\nPrefix: scope and extent\nnothing  - A permanent variable attached to the character, the default \n		   variable type.\n\"@\"      - A temporary variable attached to the character. \n		   They disappear when the character logs out.\n\"$\"      - A global permanent variable. \n		   They are stored in database table `mapreg`.\n\"$@\"     - A global temporary variable.\n		   They are important for scripts which are called with no RID\n		   attached, that is, not triggered by a specific character object.\n\".\"      - A NPC variable.\n		   They exist in the NPC and disappear when the server restarts or \n		   the NPC is reloaded. Can be accessed from inside the NPC or by \n		   calling 'getvariableofnpc'. Function objects can also have \n		   .variables which are accessible from inside the function, \n		   however 'getvariableofnpc' does NOT work on function objects.\n\".@\"     - A scope variable.\n		   They are unique to the character, script and scope. Each script\n		   execution has its own scope that ends when the script ends.\n		   Calling a function with callsub/callfunc starts a new scope,\n		   returning from the function ends it. When a scope ends, its\n		   variables are converted to values ('return .@var;' returns a\n		   value, not a reference).\n\"'\"      - An instance variable.\n		   These are used with the instancing system, and are unique to \n		   each instance.\n\"#\"      - A permanent local account variable.\n\"##\"     - A permanent global account variable stored by the login server. \n		   The only difference you will note from normal # variables is \n		   when you have multiple char-servers connected to the same \n		   login-server. The # variables are unique to each char-server, \n		   while the ## variables are shared by all these char-servers.\n\nPostfix: integer or string\nnothing - integer variable, can store positive and negative numbers, but \n		  only whole numbers (so don't expect to do any fractional math).\n'$'     - string variable, can store text.\n\nExamples:\n  name  - permanent character integer variable\n  name$ - permanent character string variable\n @name  - temporary character integer variable\n @name$ - temporary character string variable\n $name  - permanent global integer variable\n $name$ - permanent global string variable\n$@name  - temporary global integer variable\n$@name$ - temporary global string variable\n .name  - NPC integer variable\n .name$ - NPC string variable\n.@name  - scope integer variable\n.@name$ - scope string variable\n 'name  - instance integer variable\n 'name$ - instance string variable\n #name  - permanent local account integer variable\n #name$ - permanent local account string variable\n##name  - permanent global account integer variable\n##name$ - permanent global account string variable\n\nIf a variable was never set, it is considered to equal zero for integer \nvariables or an empty string (\"\", nothing between the quotes) for string \nvariables. Once you set it to that, the variable is as good as forgotten \nforever, and no trace remains of it even if it was stored with character \nor account data.\n\nSome variables are special, that is, they are already defined for you by \nthe scripting engine. You can see the full list somewhere in \n'db/const.txt', which is a file you should read, since it also allows you \nto replace lots of numbered arguments for many commands with easier to \nread text. The special variables most commonly used are all permanent \ncharacter-based variables:\n\nZeny        - Amount of Zeny.\nHp          - Current amount of hit points.\nMaxHp       - Maximum amount of hit points.\nSp          - Current spell points.\nMaxSp       - Maximum amount of spell points.\nStatusPoint - Amount of status points remaining.\nSkillPoint  - Amount of skill points remaining.\nBaseLevel   - Character's base level.\nJobLevel    - Character's job level.\nBaseExp     - Amount of base experience points.\nJobExp      - Amount of job experience points.\nNextBaseExp - Amount of base experience points needed to reach next level.\nNextJobExp  - Amount of job experience points needed to reach next level.\nWeight      - Amount of weight the character currently carries.\n			  Display as in Weight/10.\nMaxWeight   - Maximum weight the character can carry.\n			  Display as in MaxWeight/10.\nSex         - 0 if female, 1 if male.\nClass       - Character's job.\nUpper       - 0 if the character is normal class, 1 if advanced, 2 if baby.\nBaseClass   - The character's 1-1 'normal' job, regardless of Upper value.\n			  For example, this will return Job_Acolyte for Acolyte, \n			  Priest/Monk, High Priest/Champion, and Arch Bishop/Sura. \n			  If the character has not reached a 1-1 class, it will return \n			  Job_Novice.\nBaseJob     - The character's 'normal' job, regardless of Upper value.\n			  For example, this will return Job_Acolyte for Acolyte,\n			  Baby Acolyte, and High Acolyte.\nKarma       - The character's karma. Karma system is not fully functional, \n			  but this doesn't mean this doesn't work at all. Not tested.\nManner      - The character's manner rating. Becomes negative if the \n			  player utters words forbidden through the use of \n			  'manner.txt' client-side file.\n\nWhile these behave as variables, do not always expect to just set them - \nit is not certain whether this will work for all of them. Whenever there \nis a command or a function to set something, it's usually preferable to \nuse that instead. The notable exception is Zeny, which you can and often \nwill address directly - setting it will make the character own this number \nof Zeny. If you try to set Zeny to a negative number, the script will be \nterminated with an error.\n\nAssigning variables\n--------- ---------\n\nVariables can be accessed and assigned values directly without the use of \nthe built-in 'set' function. This means that variables can be accessed and \nmodified much like other programming languages.\n\n	.@x = 100;\n	.@x = .@y = 100;\n\nSupport for modifying variable values using 'set' is still supported (and \nrequired to exist for this method to work) so previous scripts will \ncontinue working. Its usage, though, is deprecated, and it should never be\nused in new scripts unless there are special reasons to do so.\n\nWhen assigning values, all operator methods are supported which exist in \nthe below 'Operators' section. For instance:\n\n	.@x += 100;\n	.@x -= 100;\n	.@x *= 2;\n	.@x /= 2;\n	.@x %= 5;\n	.@x >>= 2;\n	.@x <<= 2;\n\nWill all work. For more information on available operators, see the \nOperators section described below. All operators listed there may be \nplaced in-front of the '=' sign when modifying variables to perform the \naction as required.\n\nIncrement and decrement operators are also provided, for your convenience.\nPre-increment and pre-decrement operators:\n\n	++.@x; // same as .@x = .@x + 1\n	--.@x; // same as .@x = .@x - 1\n\nPost-increment and post-decrement operators:\n\n	.@x++; // similar to .@x = .@x + 1\n	.@x--; // similar to .@x = .@x - 1\n\nThe difference between pre- and post- increment/decrement operators is that,\nwhen used in an expression, the pre- ones will be executed before evaluating\nthe expression, while the post- ones will be executed after. For example:\n\n	.@x = 1;\n	.@y = ++.@x; // After this line is executed, both .@y and .@x will be 2\n	.@x = 1;\n	.@y = .@x++; // After this line is executed, .@y will be 1, .@x will be 2\n\nNote: The pre-increment/pre-decrement operators are, by design, faster (or at\nleast not slower) than their respective post- equivalent.\n\nNote:\n\n !! Currently the scripting engine does not support directly copying array \n !! variables. In order to copy arrays between variables the use of \n !! 'copyarray' function is still required.\n\nStrings\n-------\n\nStrings are enclosed in \"double quotes\". To include the literal double\nquote symbol (\") in a string you need to escape it with a blackslash:\n\n	.@string$ = \"This string contains some \\\"double quote\\\" symbols\";\n\nArrays\n------\n\nArrays (in Hercules at least) are essentially a set of variables going \nunder the same name. You can tell between the specific variables of an \narray with an 'array index', a number of a variable in that array:\n\n<variable name>[<array index>]\n\nAll variable types can be used as arrays.\n\nVariables stored in this way, inside an array, are also called 'array \nelements'. Arrays are specifically useful for storing a set of similar \ndata (like several item IDs for example) and then looping through it. You\ncan address any array variable as if it was a normal variable:\n\n	.@arrayofnumbers[0] = 1;\n\nYou can use a variable (or an expression, or even a value from an another\narray) as array index:\n\n	.@x = 100;\n	.@arrayofnumbers[.@x] = 10;\n	\nThis will make .@arrayofnumbers[100] equal to 10.\n\nIndex numbering always starts with 0 and arrays can hold over 2 billion\nvariables. As such, the (guaranteed) allowed values for indices are in the\nrange 0 ~ 2147483647.\n\nIf the array index is omitted, it defaults to zero. Writing\n.@arrayofnumbers is perfectly equivalent to writing .@arrayofnumbers[0].\n\nArrays can naturally store strings:\n\n.@menulines$[0] is the 0th element of the .@menulines$ array of strings.\nNotice the '$', normally denoting a string variable, before the square \nbrackets that denotes an array index.\n\nVariable References\n-------------------\n\n//##TODO\n\nHard-coded constants\n--------------------\nMost of the constants defined by the scripting engine can be found in\n'db/const.txt' and have the same value independently of settings that\nare core related, but there are constants that can be used to retrieve\ncore information that's set when the server is compiled.\n\nPACKETVER			- Server packet version\nMAX_LEVEL			- Maximum level\nMAX_STORAGE			- Maximum storage items\nMAX_GUILD_STORAGE	- Maximum guild storage items\nMAX_CART			- Maximum cart items\nMAX_INVENTORY		- Maximum inventory items\nMAX_ZENY			- Maximum Zeny\nMAX_BG_MEMBERS		- Maximum BattleGround members \nMAX_CHAT_USERS		- Maximum Chat users\nMAX_REFINE			- Maximum Refine level\n\nSend targets and status options are also hard-coded and can be found\nin src/map/script.c::script_hardcoded_constants or in functions that\ncurrently use them.\n\nOperators\n---------\n\nOperators are things you can do to variables and numbers. They are either \nthe common mathematical operations or conditional operators:\n\n+ - will add two numbers. If you try to add two strings, the result will \n	be a string glued together at the +. You can add a number to a string, \n	and the result will be a string. No other math operators work with \n	strings.\n- - will subtract two numbers. \n* - will multiply two numbers.\n/ - will divide two numbers. Note that this is an integer division, i.e.\n	7/2 is not equal 3.5, it's equal 3.\n% - will give you the remainder of the division. 7%2 is equal to 1.\n\nThere are also conditional operators. This has to do with the conditional \ncommand 'if' and they are meant to return either 1 if the condition is \nsatisfied and 0 if it isn't. That's what they call 'boolean' variables. 0 \nmeans 'False'. Anything except the zero is 'True'. Odd as it is, -1 and -5 \nand anything below zero will also be True.)\n\nYou can compare numbers to each other and you compare strings to each \nother, but you can not compare numbers to strings.\n\n ==  - Is true if both sides are equal. For strings, it means they contain \n	   the same value.\n >=  - True if the first value is equal to, or greater than, the second \n	   value.\n <=  - True if the first value is equal to, or less than, the second value.\n >   - True if the first value greater than the second value.\n <   - True if the first value is less than the second value.\n !=  - True if the first value IS NOT equal to the second one.\n ~=  - True if the second value (as regular expression) matches the first\n	   value. Both values must be strings. See the script function pcre_match\n	   for more details and advanced features.\n ~!  - True if the second value (as regular expression) DOES NOT match the\n	   first value. Both values must be strings. See script function pcre_match\n	   for more details and advanced features.\n\nExamples:\n\n 1==1 is True.\n 1<2 is True while 1>2 is False.\n .@x>2 is True if .@x is equal to 3. But it isn't true if .@x is 2.\n\nOnly '==', '!=', '~=' and '~!' have been tested for comparing strings. Since\nthere's no way to code a seriously complex data structure in this language,\ntrying to sort strings by alphabet would be pointless anyway.\n\nComparisons can be stacked in the same condition:\n\n && - Is True if and only if BOTH sides are true.\n	  ('1==1 && 2==2' is true. '2==1 && 1==1' is false.)\n || - Is True if either side of this expression is True.\n\n 1==1 && 2==2 is True.\n 1==1 && 2==1 is False.\n 1==1 || 2==1 is True.\n\nLogical bitwise operators work only on numbers, and they are the following:\n\n << - Left shift.\n >> - Right shift.\n	Left shift moves the binary 1(s) of a number n positions to the left, \n	which is the same as multiplying by 2, n times.\n	In the other hand, Right shift moves the binary 1(s) of a number n \n	positions to the right, which is the same as dividing by 2, n times.\n		Example:\n		b = 2;\n		a =  b << 3;\n		mes a;\n		a = a >> 2;\n		mes a;\n	The first mes command would display 16, which is the same as: \n	2 x (2 x 2 x 2) = 16.\n	The second mes command would display 4, which is the same as: \n	16 / 2 = 8; 8 / 2 = 4.\n &  - And.\n |  - Or.\n	The bitwise operator AND (&) is used to test two values against each \n	other, and results in setting bits which are active in both arguments. \n	This can be used for a few things, but in Hercules this operator is \n	usually used to create bit-masks in scripts.\n	\n	The bitwise operator OR (|) sets to 1 a binary position if the binary \n	position of one of the numbers is 1. This way a variable can hold \n	several values we can check, known as bit-mask. A variable currently \n	can hold up to 32 bit-masks (from position 0 to position 1). This is a \n	cheap(skate) and easy way to avoid using arrays to store several \n	checks that a player can have.\n	\n	A bit-mask basically is (ab)using the variables bits to set various \n	options in one variable. With the current limit in variables it is \n	possible to store 32 different options in one variable (by using the \n	bits on position 0 to 31).\n\n	Example(s):\n	- Basic example of the & operator, bit example:\n		10 & 2 = 2\n	Why? :\n		10 = 2^1 + 2^3 (2 + 8), so in bits, it would be 1010\n		2 = 2^1 (2), so in bits (same size) it would be 0010\n		The & (AND) operator sets bits which are active (1) in both \n		arguments, so in the example 1010 & 0010, only the 2^1 bit is \n		active (1) in both. Resulting in the bit 0010, which is 2.\n	- Basic example of creating and using a bit-mask:\n		.@options = 2|4|16; // (note: this is the same as 2+4+16, or 22)\n		if (.@options & 1) mes \"Option 1 is activated\";\n		if (.@options & 2) mes \"Option 2 is activated\";\n		if (.@options & 4) mes \"Option 3 is activated\";\n		if (.@options & 8) mes \"Option 4 is activated\";\n		if (.@options & 16) mes \"Option 5 is activated\";\n	This would return the messages about option 2, 3 and 5 being shown \n	(since we've set the 2,4 and 16 bit to 1).\n ^  - Xor.\n	The bitwise operator XOR (eXclusive OR) sets a binary position to 0 if \n	both numbers have the same value in the said position. On the other \n	hand, it sets to 1 if they have different values in the said binary \n	position. This is another way of setting and unsetting bits in \n	bit-masks.\n\n	Example:\n	- First let's set the quests that are currently in progress:\n		inProgress = 1|8|16; // quest 1,8 and 16 are in progress\n	- After playing for a bit, the player starts another quest:\n		if( inProgress&2 == 0 ){\n			// this will set the bit for quest 2 (inProgress has that bit set to 0)\n			inProgress = inProgress^2;\n			mes \"Quest 2: find a newbie and be helpful to him for an hour.\";\n			close;\n		}\n	- After spending some time reading info on Xor's, the player finally \n	  completes quest 1:\n		if( inProgress&1 && isComplete ) {\n			// this will unset the bit for quest 1 (inProgress has that bit set to 1)\n			inProgress = inProgress^1;\n			mes \"Quest 1 complete!! You unlocked the secrets of the Xor dynasty, use them wisely.\";\n			close;\n		}\n\nUnary operators with only with a single number, which follows the \noperator, and are the following:\n\n -  - Negation.\n	The sign of the number will be reversed. If the number was positive, \n	it will become negative and vice versa.\n\n	Example:\n		.@myvar = 10;\n		mes \"Negative 10 is \"+(-.@myvar);\n\n !  - Logical Not.\n	Reverses the boolean result of an expression. True will become false \n	and	false will become true.\n\n	Example:\n		if(!callfunc(\"F_dosomething\")) {\n			mes \"Doing something failed.\";\n			close;\n		}\n\n ~  - Bitwise Not.\n	Reverses each bit in a number, also known as one's complement. Cleared \n	bits are set, and set bits are cleared.\n\n	Example:\n	- Ensure, that quest 2 is disabled, while keeping all other active, if \n	  they are.\n		inProgress = inProgress&(~2);\n		// same as set inProgress,inProgress&0xfffffffd\n\nTernary operators take three expressions (numbers, strings or boolean), \nand are the following:\n\n ?: - Conditional operator\n	Very useful e.g. to replace\n\n		if(Sex) mes \"...\"; else mes \"...\";\n\n	clauses with simple\n\n		mes \"Welcome, \" + (Sex?\"Mr.\":\"Mrs.\") + \" \" + strcharinfo(0);\n\n	or to replace any other simple if-else clauses. It might be worth\n	mentioning that ?: has low priority and has to be enclosed with\n	parenthesis in most (if not all) cases.\n\nOperator Precedence and Associativity\n\nOperator precedence and associativity work more or less like they do in\nmathematics. The rules can be summarized with the following table:\n\nPrecedence  |  Description                                  | Associativity\n---------------------------------------------------------------------------\n1 (highest) | []  Array subscripting                        | None\n---------------------------------------------------------------------------\n2           | ++  Increment                                 | None\n			| --  Decrement                                 |\n---------------------------------------------------------------------------\n2           |  -  Unary minus                               | Right to left\n			|  !  Logical NOT                               |\n			|  ~  Bitwise NOT (One's Complement)            |\n---------------------------------------------------------------------------\n3           |  *  Multiplication                            | Left to right\n			|  /  Division                                  |\n			|  %  Modulo (remainder)                        |\n---------------------------------------------------------------------------\n4           |  +  Addition                                  | Left to right\n			|  -  Subtraction                               |\n---------------------------------------------------------------------------\n5           | <<  Bitwise left shift                        | Left to right\n			| >>  Bitwise right shift                       |\n---------------------------------------------------------------------------\n6           |  <  Less than                                 | Left to right\n			| <=  Less than or equal to                     |\n			|  >  Greater than                              |\n			| >=  Greater than or equal to                  |\n---------------------------------------------------------------------------\n7           | ==  Equal to                                  | Left to right\n			| !=  Not equal to                              |\n			| ~=  Regexp match                              |\n			| ~!  Regexp non-match                          |\n---------------------------------------------------------------------------\n8           |  &  Bitwise AND                               | Left to right\n---------------------------------------------------------------------------\n9           |  ^  Bitwise XOR (exclusive or)                | Left to right\n---------------------------------------------------------------------------\n10          |  |  Bitwise OR (inclusive or)                 | Left to right\n---------------------------------------------------------------------------\n11          | &&  Logical AND                               | Left to right\n---------------------------------------------------------------------------\n12          | ||  Logical OR                                | Left to right\n---------------------------------------------------------------------------\n13          | ?:  Ternary conditional                       | Right to left\n---------------------------------------------------------------------------\n14          |  =  Direct assignment                         | Right to left\n(lowest)    | +=  Assignment by sum                         |\n			| -=  Assignment by difference                  |\n			| *=  Assignment by product                     |\n			| /=  Assignment by quotient                    |\n			| %=  Assignment by remainder                   |\n			| <<= Assignment by bitwise left shift          |\n			| >>= Assignment by bitwise right shift         |\n			| &=  Assignment by bitwise AND                 |\n			| ^=  Assignment by bitwise XOR                 |\n			| |=  Assignment by bitwise OR                  |\n\nOperator precedence means some operators are evaluated before others. For\nexample, in 2 + 4 * 5 , the multiplication has higher precedence so 4 * 5 is\nevaluated first yielding 2 + 20 == 22 and not 6 * 5 == 30 .\n\nOperator associativity defines what happens if a sequence of the same\noperators is used one after another: whether the evaluator will evaluate the\nleft operations first or the right. For example, in 8 - 4 - 2 , subtraction is\nleft associative so the expression is evaluated left to right. 8 - 4 is\nevaluated first making the expression 4 - 2 == 2 and not 8 - 2 == 6 .\n\nLabels\n------\n\nWithin executable script code, some lines can be labels:\n\n<label name>:\n\nLabels are points of reference in your script, which can be used to route \nexecution with 'goto' and 'menu' commands, invoked with 'doevent', 'donpcevent'\nand 'callsub' commands and are otherwise essential. A label's name may not be\nlonger than 22 characters. (23rd is the ':'.) There is some confusion in the\nsource about whether it's 22, 23 or 24 all over the place, so keeping labels\nunder 22 characters could be wise. It may only contain alphanumeric characters\nand underscore. In addition to labels you name yourself, there are also some\nspecial labels which the script engine will start execution from if a special\nevent happens:\n\nOnClock<hour><minute>:\nOnMinute<minute>:\nOnHour<hour>:\nOn<weekday><hour><minute>:\nOnDay<month><day>:\n\nThis will execute when the server clock hits the specified date or time. \nHours and minutes are given in military time. ('0105' will mean 01:05 AM). \nWeekdays are Sun,Mon,Tue,Wed,Thu,Fri,Sat. Months are 01 to 12, days are 01 \nto 31. Remember the zero. :)\n\nOnInit:\nOnInterIfInit:\nOnInterIfInitOnce:\n\nOnInit will execute every time the scripts loading is complete, including \nwhen they are reloaded with @reloadscript command. OnInterIfInit will \nexecute when the map server connects to a char server, OnInterIfInitOnce \nwill only execute once and will not execute if the map server reconnects \nto the char server later. Note that all those events will be executed upon\nscripts reloading.\n\nOnAgitStart:\nOnAgitEnd:\nOnAgitInit:\nOnAgitStart2:\nOnAgitEnd2:\nOnAgitInit2:\n\nOnAgitStart will run whenever the server shifts into WoE mode, whether it \nis done with @agitstart GM command or with 'AgitStart' script command. \nOnAgitEnd will do likewise for the end of WoE.\n\nOnAgitInit will run when data for all castles and all guilds that hold a \ncastle is received by map-server from the char-server after initial \nconnect.\n\nNo RID will be attached while any of the above mentioned labels are \ntriggered, so no character or account-based variables will be accessible, \nuntil you attach a RID with 'attachrid' (see below).\n\nThe above also applies to, the last three labels, the only difference is \nthat these labels are used exclusively for WoE SE, and are called \nindependently.\n\nOnTouch:\n\nThis label will be executed if a trigger area is defined for the NPC \nobject it's in. If it isn't present, the execution will start from the \nbeginning of the NPC code. The RID of the triggering character object will \nbe attached.\n\nOnTouch_:\n\nSimilar to OnTouch, but will only run one instance. Another character is\nchosen once the triggering character leaves the area.\n\nOnUnTouch:\n\nThis label will be executed if plater leave trigger area is defined for the NPC \nobject it's in. If it isn't present, nothing will happend.\nThe RID of the triggering character object will be attached.\n\nOnPCLoginEvent:\nOnPCLogoutEvent:\nOnPCBaseLvUpEvent:\nOnPCJobLvUpEvent:\n\nIt's pretty obvious when these four special labels will be invoked.\n\nOnPCDieEvent:\n\nThis special label triggers when a player dies. The variable 'killerrid' \nis set to the ID of the killer.\n\nOnPCKillEvent:\n\nThis special label triggers when a player kills another player. The \nvariable 'killedrid' is set to the ID of the player killed.\n\nOnNPCKillEvent:\n\nThis special label triggers when a player kills a monster. The variable \n'killedrid' is set to the Class of the monster killed.\n\nOnPCLoadMapEvent:\n\nThis special label will trigger once a player steps in a map marked with \nthe 'loadevent' mapflag and attach its RID. The fact that this label \nrequires a mapflag for it to work is because, otherwise, it'd be \nserver-wide and trigger every time a player would change maps. Imagine the \nserver load with 1,000 players (oh the pain...)\n\nOnly the special labels which are not associated with any script command \nare listed here. There are other kinds of labels which may be triggered in \na similar manner, but they are described with their associated commands.\n\nOnCountFunds:\n\nThis special label is triggered when a player opens a trader NPC object that\nis NST_CUSTOM. It is used to define different currency types to the trader via\n*setcurrency. Should be used along with OnPayFunds, see /doc/sample/npc_trader_sample.txt\nfor more information.\n\nOnPayFunds:\n\nThis special label is triggered when a purchase is made on a trader NPC object\nthat is NST_CUSTOM. Receives @price, total cost and @points, secondary input\nfield for cash windows. It is used to remove items that are set as currency.\nShould be used along with OnCountFunds, see /doc/sample/npc_trader_sample.txt\nfor more information.\n\nOn<label name>:\n\nThese special labels are used with Mob scripts mostly, and script commands \nthat requires you to point/link a command to a mob or another NPC, giving \na label name to start from. The label name can be any of your liking, but \nmust be started with \"On\".\n\nExample:\n\nmonster \"prontera\",123,42,\"Poringz0rd\",2341,23,\"Master::OnThisMobDeath\";\n\namatsu,13,152,4	script	Master	767,{\n	mes \"Hi there\";\n	close;\n\nOnThisMobDeath:\n	announce \"Hey, \"+strcharinfo(0)+\" just killed a Poringz0rd!\",bc_blue|bc_all;\n	end;\n}\n\nEach time you kill one, that announce will appear in blue to everyone.\n\n\"Global\" labels\n\nThere's a catch with labels and doevent. If you call a label (using \ndoevent) and called label is in NPC that has trigger area, that label must \nend with \"Global\" to work globally (i.e. if RID is outside of the trigger \narea, which usually happens since otherwise there would be no point \ncalling the label with doevent, because OnTouch would do the job). For \nfurther reference look for npc_event in npc.c.\n\nScripting commands and functions\n--------------------------------\n\nThe commands and functions are listed here in no particular order. There's \na difference between commands and functions - commands leave no 'return \nvalue' which might be used in a conditional statement, as a command \nargument, or stored in a variable. Calling commands as if they were \nfunctions will sometimes work, but is not advised, as this can lead to \nsome hard to track errors. Calling functions as if they were commands will \nmess up the stack, so 'return' command will not return correctly after \nthis happens in a particular script.\n\nAll commands must end with a ';'. Actually, you may expect to have \nmultiple commands on one line if you properly terminate them with a ';', \nbut it's better if you don't, since it is not certain just whether the \nscripting engine will behave nicely if you do.\n\nPlease note that command and function names are case sensitive.\n\n-------------------------\n\n\nFrom here on, we will have the commands sorted as followed:\n\n1 - Basic Commands\n2 - Information-Retrieving Commands\n	-- 2.1 - Item-Related Commands\n	-- 2.2 - Guild-Related Commands\n3 - Checking Commands\n	-- 3.1 - Checking Item-Related Commands\n4 - Player-Related Commands\n	-- 4.1 - Player Item-Related Commands\n	-- 4.2 - Guild-Related Commands\n	-- 4.3 - Marriage-Related Commands\n5 - Mob / NPC Related commands\n	-- 5.1 - Time-Related Commands\n	-- 5.2 - Guild-Related Commands\n6 - Other Commands\n7 - Instance-Related Commands\n8 - Quest Log Commands\n9 - Battleground Commands\n10 - Mercenary Commands\n11 - Queue Commands\n12 - NPC Trader Commands\n\n\n---------------------------------------\n//=====================================\n1 - Basic Commands\n//=====================================\n---------------------------------------\n\n*mes \"<string>\"{,\"<string>\"...\"<string>\"};\n\nThis command will displays a box on the screen for the invoking character, \nif no such box is displayed already, and will print the string specified \ninto that box. There is normally no 'close' or 'next' button on this box, \nunless you create one with 'close' or 'next', and while it's open the \nplayer can't do much else, so it's important to create a button later. If \nthe string is empty, it will show up as an empty line.\n\n	mes \"Text that will appear in the box\";\n\nInside the string you may put color codes, which will alter the color of \nthe text printed after them. The color codes are all '^<R><G><B>' and \ncontain three hexadecimal numbers representing colors as if they were HTML \ncolors - ^FF0000 is bright red, ^00FF00 is bright green, ^0000FF is bright \nblue, ^000000 is black. ^FF00FF is a pure magenta, but it's also a color \nthat is considered transparent whenever the client is drawing windows on \nscreen, so printing text in that color will have kind of a weird effect. \nOnce you've set a text's color to something, you have to set it back to \nblack unless you want all the rest of the text be in that color:\n\n	mes \"This is ^FF0000 red ^000000 and this is ^00FF00 green, ^000000 so.\";\n	\nNotice that the text coloring is handled purely by the client. If you use \nnon-English characters, the color codes might get screwed if they stick to \nletters with no intervening space. Separating them with spaces from the \nletters on either side solves the problem.\n\nTo display multiple lines of message while only using a single mes; \ncommand, use the script command in the following format:\n\n	mes \"Line 1\", \"Line 2\", \"Line 3\";\n\nThis will display 3 different lines while only consuming a single line in\nthe relevant script file.\n\nIf you're using a client from 2011-10-10aRagexe.exe onwards, you can also \nuse automatic navigation and open URLs in browser by using some HTML-like\nlabels. For example:\n\n	mes \"go to <NAVI>[Hat Maker]<INFO>izlude,131,148,</INFO></NAVI> to make hats\";\n\nWill make the [Hat Maker] text clickable in the client and start a navigation \nto that point.\n\n	mes \"You can <URL>Google<INFO>http://www.google.com/</INFO></URL> anything\";\n\nClicking Google will open the browser and point to Google website.\n\n---------------------------------------\n\n*next;\n\nThis command will display a 'next' button in the message window for the \ninvoking character. Clicking on it will cause the window to clear and \ndisplay a new one. Used to segment NPC-talking, next is often used in \ncombination with 'mes' and 'close'.\n\nIf no window is currently on screen, one will be created, but once the \ninvoking character clicks on it, a warning is thrown on the server console \nand the script will terminate.\n\n	mes \"[Woman]\";\n	mes \"This would appear on the page\";\n	next;\n	// This is needed since it is a new page and the top will now be blank\n	mes \"[Woman]\";\n	mes \"This would appear on the 2nd page\";\n\n---------------------------------------\n\n*close;\n\nThis command will create a 'close' button in the message window for the \ninvoking character. If no window is currently on screen, the script \ncommand 'end;' must be used. This is one of the ways to end a speech from \nan NPC. Once the button is clicked, the NPC script execution will end, and \nthe message box will disappear.\n\n	mes \"[Woman]\";\n	mes \"I am finished talking to you, click the close button.\";\n	close;\n	mes \"This command will not run at all, since the script has ended.\";\n\n---------------------------------------\n\n*close2;\n\nThis command will create a 'close' button in the message window for the \ninvoking character. WARNING: If no window is currently on screen, the \nscript execution will halt indefinitely! See 'close'. There is one \nimportant difference, though - even though the message box will have \nclosed, the script execution will not stop, and commands after 'close2' \nwill still run, meaning an 'end' has to be used to stop the script, unless \nyou make it stop in some other manner.\n\n	mes \"[Woman]\";\n	mes \"I will warp you now.\";\n	close2;\n	warp \"place\",50,50;\n	end;\n	\nDon't expect things to run smoothly if you don't make your scripts 'end'.\n\n---------------------------------------\n\n*end;\n\nThis command will stop the execution for this particular script.\nIt is required for any script not using 'mes'.\n\n	if (BaseLevel <= 10) {\n		npctalk \"Look at that you are still a n00b\";\n		end;\n	}\n	if (BaseLevel <= 20) {\n		npctalk \"Look at that you are getting better, but still a n00b\";\n		end;\n	}\n	if (BaseLevel <= 30) {\n		npctalk \"Look at that you are getting there, you are almost 2nd profession now right???\";\n		end;\n	}\n	if (BaseLevel <= 40) {\n		npctalk \"Look at that you are almost 2nd profession\";\n		end;\n	}\n\nWithout the use of 'end' it would travel through the ifs until the end\nof the script. If you were lvl 10 or less, you would see all the speech\nlines, the use of 'end' stops this, and ends the script.\n\n---------------------------------------\n\n*set <variable>,<expression>;\n*set(<variable>,<expression>)\n\nThis command will set a variable to the value that the expression results \nin. This isn't the only way to set a variable directly: you can set them \nmuch like any other programming language as stated before (refer to the \n'Assigning variables' section).\n\nThis command is deprecated and it shouldn't be used in new scripts, except\nsome special cases (mostly, set getvariableofnpc). Use direct value\nassignment instead.\n\n---------------------------------------\n\n*setd \"<variable name>\",<value>;\n\nWorks almost identically as set, except the variable name is identified as \na string and can thus be constructed dynamically.\n\nThis command is equivalent to:\n  set getd(\"variable name\"),<value>;\n\nExamples:\n\n  setd \".@var$\", \"Poporing\";\n  mes .@var$; // Displays \"Poporing\".\n\n  setd \".@\" + .@var$ + \"123$\", \"Poporing is cool\";\n  mes .@Poporing123$; // Displays \"Poporing is cool\".\n\n---------------------------------------\n\n*getd(\"<variable name>\")\n\nReturns a reference to a variable, the name can be constructed dynamically.\nRefer to 'setd' for usage.\n\nThis can also be used to set an array dynamically:\n  setarray getd(\".array[0]\"), 1, 2, 3, 4, 5;\n\nExamples:\n\n  mes \"The value of $varReference is: \" + getd(\"$varRefence\");\n  set .@i, getd(\"$\" + \"pikachu\");\n\n---------------------------------------\n\n*getvariableofnpc(<variable>,\"<npc name>\")\n\nReturns a reference to a NPC variable (. prefix) from the target NPC.\nThis can only be used to get . variables.\n\nExamples:\n\n//This will return the value of .var, note that this can't be used, since \n//the value isn't caught.\n	getvariableofnpc(.var,\"TargetNPC\");\n	\n//This will set the .v variable to the value of the TargetNPC's .var \n//variable.\n	.v = getvariableofnpc(.var,\"TargetNPC\");\n	\n//This will set the .var variable of TargetNPC to 1.\n	set getvariableofnpc(.var,\"TargetNPC\"), 1;\n\nNote: even though function objects can have .variables, getvariableofnpc \nwill not work on them.\n\n---------------------------------------\n\n*goto <label>;\n\nThis command will make the script jump to a label, usually used in \nconjunction with other command, such as \"if\", but often used on it's own.\n\n	...\n	goto Label;\n	mes \"This will not be seen\";\nLabel:\n	mes \"This will be seen\";\n\nGotos are considered to be harmful and should be avoided whenever possible.\n\n---------------------------------------\n\n*menu \"<option_text>\",<target_label>{,\"<option_text>\",<target_label>,...};\n\nThis command will create a selectable menu for the invoking character. \nOnly one menu can be on screen at the same time.\n\nDepending on what the player picks from the menu, the script execution \nwill continue from the corresponding label. It's string-label pairs, not \nlabel-string.\n\nThis command is deprecated and it should not be used in new scripts, as it\nis likely to be removed at a later time. Please consider using select() or\nprompt() instead.\n\nOptions can be grouped together, separated by the character ':'.\n\n	menu \"A:B\",L_Wrong,\"C\",L_Right;\n\nIt also sets a special temporary character variable @menu, which contains \nthe number of option the player picked. Numbering of options starts at 1. \nThis number is consistent with empty options and grouped options.\n\n	   menu \"A::B\",L_Wrong,\"\",L_Impossible,\"C\",L_Right;\n	L_Wrong:\n	   // If they click \"A\" or \"B\" they will end up here\n	   // @menu == 1 if \"A\"\n	   // @menu == 2 will never happen because the option is empty\n	   // @menu == 3 if \"B\"\n	L_Impossible:\n	   // Empty options are not displayed and therefore can't be selected\n	   // this label will never be reached from the menu command\n	L_Right:\n	   // If they click \"C\" they will end up here\n	   // @menu == 5\n\nIf a label is '-', the script execution will continue right after the menu \ncommand if that option is selected, this can be used to save you time, and \noptimize big scripts.\n\n		menu \"A::B:\",-,\"C\",L_Right;\n		// If they click \"A\" or \"B\" they will end up here\n		// @menu == 1 if \"A\"\n		// @menu == 3 if \"B\"\n	L_Right:\n		// If they click \"C\" they will end up here\n		// @menu == 5\n\nBoth these examples will perform the exact same task.\n\nIf you give an empty string as a menu item, the item will not display. \nThis can effectively be used to script dynamic menus by using empty string \nfor entries that should be unavailable at that time.\n\nYou can do it by using arrays, but watch carefully - this trick isn't high \nwizardry, but minor magic at least. You can't expect to easily duplicate \nit until you understand how it works.\n\nCreate a temporary array of strings to contain your menu items, and \npopulate it with the strings that should go into the menu at this \nexecution, making sure not to leave any gaps. Normally, you do it with a \nloop and an extra counter, like this:\n\n	setarray .@possiblemenuitems$[0],<list of potential menu items>;\n	.@j = 0; // That's the menu lines counter.\n	\n	// We loop through the list of possible menu items.\n	// .@i is our loop counter.\n	for (.@i = 0; .@i < getarraysize(.@possiblemenuitems$); ++.@i) {\n		// That 'condition' is whatever condition that determines whether \n		// a menu item number .@i actually goes into the menu or not.\n		\n		if (<condition>)\n		{\n			// We record the option into the list of options actually \n			// available.\n			\n			set .@menulist$[.@j],.@possiblemenuitems$[.@i];\n			\n			// We just copied the string, we do need it's number for later \n			// though, so we record it as well.\n			\n			set .@menureference[.@j],.@i;\n			\n			// Since we've just added a menu item into the list, we \n			// increment the menu lines counter.\n			\n			++.@j;\n		}\n		\n		// We go on to the next possible menu item.\n	}\n\nThis will create you an array .@menulist$ which contains the text of all\nitems that should actually go into the menu based on your condition, and \nan array .@menureference, which contains their numbers in the list of\npossible menu items. Remember, arrays start with 0. There's less of them \nthan the possible menu items you've defined, but the menu command can \nhandle the empty lines - only if they are last in the list, and if it's \nmade this way, they are. Now comes a dirty trick:\n\n	// X is whatever the most menu items you expect to handle.\n	menu .@menulist$[0],-,.@menulist$[1],-,...,.@menulist$[<X>],-;\n\nThis calls up a menu of all your items. Since you didn't copy some of the \npossible menu items into the list, it's end is empty and so no menu items \nwill show up past the end. But this menu call doesn't jump anywhere, it \njust continues execution right after the menu command. (And it's a good \nthing it doesn't, cause you can only explicitly define labels to jump to, \nand how do you know which ones to define if you don't know beforehand \nwhich options will end up where in your menu?)\nBut how do you figure out which option the user picked? Enter the @menu.\n\n@menu contains the number of option that the user selected from the list, \nstarting with 1 for the first option. You know now which option the user \npicked and which number in your real list of possible menu items it \ntranslated to:\n\n	mes \"You selected \"+.@possiblemenuitems$[.@menureference[@menu-1]]+\"!\";\n\n@menu is the number of option the user picked.\n@menu-1 is the array index for the list of actually used menu items that \nwe made.\n.@menureference[@menu-1] is the number of the item in the array of possible\nmenu items that we've saved just for this purpose.\n\nAnd .@possiblemenuitems$[.@menureference[@menu-1]] is the string that we\nused to display the menu line the user picked. (Yes, it's a handful, but \nit works.)\n\nYou can set up a bunch of 'if (.@menureference[@menu-1]==X) goto Y'\nstatements to route your execution based on the line selected and still \ngenerate a different menu every time, which is handy when you want to, for \nexample, make users select items in any specific order before proceeding, \nor make a randomly shuffled menu.\n\nKafra code bundled with the standard distribution uses a similar \narray-based menu technique for teleport lists, but it's much simpler and \ndoesn't use @menu, probably since that wasn't documented anywhere.\n\nSee also 'select', which is probably better in this particular case. \nInstead of menu, you could use 'select' like this:\n\n	.@dummy = select(.@menulist$[0],.@menulist$[1],...,.@menulist$[<X>]);\n	\nFor the purposes of the technique described above these two statements are \nperfectly equivalent.\n\n---------------------------------------\n\n*select(\"<option>\"{,\"<option>\",...})\n*prompt(\"<option>\"{,\"<option>\",...})\n\nThis function is a handy replacement for 'menu' that doesn't use a complex\nlabel structure. It will return the number of menu option picked,\nstarting with 1. Like 'menu', it will also set the variable @menu to\ncontain the option the user picked.\n\n	if (select(\"Yes:No\") == 1)\n		mes \"You said yes, I know.\";\n\nAnd like 'menu', the selected option is consistent with grouped options \nand empty options.\n\n'prompt' works almost the same as select, except that when a character \nclicks the Cancel button, this function will return 255 instead.\n\n---------------------------------------\n\n*input(<variable>{,<min>{,<max>}})\n\nThis command will make an input box pop up on the client connected to the \ninvoking character, to allow entering of a number or a string. This has \nmany uses, one example would be a guessing game, also making use of the \n'rand' function:\n\n	mes \"[Woman]\";\n	mes \"Try and guess the number I am thinking of.\";\n	mes \"The number will be between 1 and 10.\";\n	next;\n	.@number = rand(1,10);\n	input .@guess;\n	if (.@guess == .@number) {\n		mes \"[Woman]\";\n		mes \"Well done that was the number I was thinking of\";\n		close;\n	} else {\n		mes \"[Woman]\";\n		mes \"Sorry, that wasn't the number I was thinking of.\";\n		close;\n	}\n\nIf you give the input command a string variable to put the input in, it \nwill allow the player to enter text. Otherwise, only numbers will be \nallowed.\n\n	mes \"[Woman]\";\n	mes \"Please say HELLO\";\n	next;\n	input .@var$;\n	if (.@var$ == \"HELLO\") {\n		mes \"[Woman]\";\n		mes \"Well done you typed it correctly\";\n		close;\n	} else {\n		mes \"[Woman]\";\n		mes \"Sorry you got it wrong\";\n		close;\n	}\n\nNormally you may not input a negative number with this command.\nThis is done to prevent exploits in badly written scripts, which would let \npeople, for example, put negative amounts of Zeny into a bank script and \nreceive free Zeny as a result.\n\nThe command has two optional arguments and a return value. \nThe default value of 'min' and 'max' can be set with 'input_min_value' and \n'input_max_value' in script.conf.\nFor numeric inputs the value is capped to the range [min,max]. Returns 1 \nif the value was higher than 'max', -1 if lower than 'min' and 0 otherwise.\nFor string inputs it returns 1 if the string was longer than 'max', -1 is \nshorter than 'min' and 0 otherwise.\n\n---------------------------------------\n\n*callfunc \"<function>\"{,<argument>,...<argument>};\n*callfunc(\"<function>\"{,<argument>,...<argument>})\n\nThis command lets you call up a function NPC. A function NPC can be called \nfrom any script on any map server. Using the 'return' command it will come \nback to the place that called it.\n\n	place,50,50,6%TAB%script%TAB%Woman%TAB%115,{\n		mes \"[Woman]\"\n		mes \"Lets see if you win\";\n		callfunc \"funcNPC\";\n		mes \"Well done you have won\";\n		close;\n	}\n	function%TAB%script%TAB%funcNPC%TAB%{\n		.@win = rand(2);\n		if (.@win == 0)\n			return;\n		mes \"Sorry you lost\";\n		end;\n	}\n\nYou can pass arguments to your function - values telling it what exactly \nto do - which will be available there with getarg() (see 'getarg').\nNotice that returning is not mandatory, you can end execution right there.\n\nIf you want to return a real value from inside your function NPC, it is \nbetter to write it in the function form, which will also work and will \nmake the script generally cleaner:\n\n	place,50,50,6%TAB%script%TAB%Man%TAB%115,{\n		mes \"[Man]\"\n		mes \"Gimme a number!\";\n		next;\n		input .@number;\n		if (callfunc(\"OddFunc\",.@number)) mes \"It's Odd!\";\n		close;\n	}\n	function%TAB%script%TAB%OddFunc%TAB%{\n		if (getarg(0)%2==0) return 0;// it's even\n		return 1;// it's odd\n	}\n\nAlternately, user-defined functions may be called directly without the use \nof the 'callfunc' script command.\n\n	function<TAB>script<TAB>SayHello<TAB>{\n		mes \"Hello \" + getarg(0);\n		return 0;\n	}\n\n	place,50,50,6<TAB>script<TAB>Man<TAB>115,{\n		mes \"[Man]\";\n		SayHello strcharinfo(0);\n		close;\n	}\n\nNote:\n\n !! A user-defined function must be declared /before/ a script attempts to\n !! call it. That is to say, any functions should be placed above scripts \n !! or NPCs (or loaded in a separate file first) before attempting to call \n !! them directly.\n\n---------------------------------------\n\n*callsub <label>{,<argument>,...<argument>};\n*callsub(<label>{,<argument>,...<argument>})\n\nThis command will go to a specified label within the current script (do \nNOT use quotes around it) coming in as if it were a 'callfunc' call, and \npass it arguments given, if any, which can be recovered there with \n'getarg'. When done there, you should use the 'return' command to go back \nto the point from where this label was called. This is used when there is \na specific thing the script will do over and over, this lets you use the \nsame bit of code as many times as you like, to save space and time, \nwithout creating extra NPC objects which are needed with 'callfunc'. A \nlabel is not callable in this manner from another script.\n\nExample 1: callsub for checking (if checks pass, return to script)\n	callsub S_CheckFull, \"guild_vs2\",50;\n	switch( rand(4) ) {\n		case 0: warp \"guild_vs2\",9,50;  end;\n		case 1: warp \"guild_vs2\",49,90; end;\n		case 2: warp \"guild_vs2\",90,50; end;\n		case 3: warp \"guild_vs2\",49,9;  end;\n	}\n\n...\n\nS_CheckFull:\n	if (getmapusers(getarg(0)) >= getarg(1)) {\n		mes \"I'm sorry, this arena is full.  Please try again later.\";\n		close;\n	}\n	return;\n\nExample 2: callsub used repeatedly, with different arguments\n// notice how the Zeny check/delete is reused, instead of copy-pasting for \n// every warp.\n	switch(select(\"Abyss Lake:Amatsu Dungeon:Anthell:Ayothaya Dungeon:Beacon Island, Pharos\") {\n		case 1: callsub S_DunWarp,\"hu_fild05\",192,207;\n		case 2: callsub S_DunWarp,\"ama_in02\",119,181;\n		case 3: callsub S_DunWarp,\"moc_fild20\",164,145;\n		case 4: callsub S_DunWarp,\"ayo_fild02\",279,150;\n		case 5: callsub S_DunWarp,\"cmd_fild07\",132,125;\n		// etc\n	}\n\n...\n\nS_DunWarp:\n// getarg(0) = \"mapname\"\n// getarg(1) = x\n// getarg(2) = y\n	if (Zeny >= 100) {\n		Zeny -= 100;\n		warp getarg(0),getarg(1),getarg(2);\n	} else {\n		mes \"Dungeon warp costs 100 Zeny.\";\n	}\n	close;\n\n---------------------------------------\n\n*getarg(<index>{,<default_value>})\n\nThis function is used when you use the 'callsub' or 'callfunc' commands. \nIn the call you can specify variables that will make that call different \nfrom another one. This function will return an argument the function or \nsubroutine was called with, and is the normal way to get them. \nThis is another thing that can let you use the same code more than once. \n\nArgument numbering starts with 0, i.e. the first argument you gave is \nnumber 0. If no such argument was given, a zero is returned.\n\n	place,50,50,6%TAB%script%TAB%Woman1%TAB%115,{\n		mes \"[Woman]\";\n		mes \"Lets see if you win\";\n		callfunc \"funcNPC\",2;\n		mes \"Well done you have won\";\n\n	...\n\n	place,52,50,6%TAB%script%TAB%Woman2%TAB%115,{\n		mes \"[Woman]\";\n		mes \"Lets see if you win\";\n		callfunc \"funcNPC\",5;\n		mes \"Well done you have won\";\n\n	...\n\n	function%TAB%script%TAB%funcNPC%TAB%{\n		.@win = rand(getarg(0));\n		if(.@win==0) return;\n		mes \"Sorry you lost\";\n\n\"woman1\" NPC object calls the funcNPC. The argument it gives in this call \nis stated as 2, so when the random number is generated by the 'rand' \nfunction, it can only be 0 or 1. Whereas \"woman2\" gives 5 as the argument \nnumber 0 when calling the function, so the random number could be 0, 1, 2, \n3 or 4, this makes \"woman2\" less likely to say the player won. \n\nYou can pass multiple arguments in a function call:\n\n	callfunc \"funcNPC\",5,4,3;\n\ngetarg(0) would be 5, getarg(1) would be 4 and getarg(2) would be 3.\n\nGetarg also has an optional argument:\nIf the target argument exists, it is returned.\nOtherwise, if <default_value> is present it is returned instead, if not \nthe script terminates immediately.\n\nIn previous example getarg(2,-1) would be 3 and getarg(3,-1) would be -1.\n\n---------------------------------------\n\n*getargcount()\n\nThis function is used when you use the 'callsub' or 'callfunc' commands. \nIn the call you can specify arguments. This function will return the \nnumber of arguments provided.\n\nExample:\n	callfunc \"funcNPC\",5,4,3;\n	...\n	function%TAB%script%TAB%funcNPC%TAB%{\n		.@count = getargcount(); // 3\n		...\n	}\n\n---------------------------------------\n\n*return {<value>};\n\nThis command causes the script execution to leave previously called \nfunction with callfunc or script with callsub and return to the location, \nwhere the call originated from. Optionally a return value can be supplied, \nwhen the call was done using the function form. \n\nUsing this command outside of functions or scripts referenced by callsub \nwill result in error and termination of the script.\n\n	callfunc \"<your function>\";// when nothing is returned\n	<variable> = callfunc(\"<your function>\");\n	// when a value is being returned\n\n---------------------------------------\n\n*function <function name>;\n*<function name>{(<argument>,...<argument>)};\n*function <function name> {\n<code>\n}\n\nThis works like callfunc, and is used for cleaner and faster scripting. \nThe function must be defined and used within a script, and works like a \nlabel with arguments.\nNote that the name may only contain alphanumeric characters and underscore.\n\nUsage:\n\n	1. Declare the function.\n	function <function name>;\n	2. Call the function anywhere within the script.\n	   It can also return a value when used with parentheses.\n	<function name>;\n	3. Define the function within the script.\n	<function name> {<code>}\n\nExample:\n\nprontera,154,189,4	script	Item Seller	767,{\n	/* Function declaration */\n	function SF_Selling;\n\n	if (Zeny > 50) {\n		mes \"Welcome!\";\n		/* Function call */\n		SF_Selling;\n	}\n	else mes \"You need 50z, sorry!\";\n	close;\n\n	/* Function definition */\n	function SF_Selling {\n		mes \"Would you like to buy a phracon for 50z?\";\n		next;\n		if(select(\"Yes\",\"No, thanks\") == 1) {\n			Zeny -= 50;\n			getitem 1010,1;\n			mes \"Thank you!\";\n		}\n		return;\n	}\n}\n\nExample with parameters and return value:\n\nprontera,150,150,0	script	TestNPC	123,{\n	/* Function declaration */\n	function MyAdd;\n\n	mes \"Enter two numbers.\";\n	next;\n	input .@a;\n	input .@b;\n	/* Function call */\n	mes .@a+\" + \"+.@b+\" = \"+MyAdd(.@a,.@b);\n	close;\n\n	/* Function definition */\n	function MyAdd {\n		return getarg(0)+getarg(1);\n	}\n}\n\n\n---------------------------------------\n\n*is_function(\"<function name>\")\n\nThis command checks whether a function exists.\nIt returns 1 if function is found, or 0 if it isn't.\n\nExample:\n\n	function	script	try	{\n		dothat;\n	}\n\n	-	script	test	-1,{\n		.@try = is_function(\"try\"); // 1\n		.@not = is_function(\"not\"); // 0\n	}\n\n---------------------------------------\n\n*if (<condition>) <statement>;\n\nThis is the basic conditional statement command, and just about the only \none available in this scripting language. \n\nThe condition can be any expression. All expressions resulting in a \nnon-zero value will be considered True, including negative values. All \nexpressions resulting in a zero are false.\n\nIf the expression results in True, the statement will be executed. If it \nisn't true, nothing happens and we move on to the next line of the script.\n\n	if (1)  mes \"This will always print.\";\n	if (0)  mes \"And this will never print.\";\n	if (5)  mes \"This will also always print.\";\n	if (-1) mes \"Funny as it is, this will also print just fine.\";\n\nFor more information on conditional operators see the operators section \nabove.\nAnything that is returned by a function can be used in a condition check \nwithout bothering to store it in a specific variable:\n\n	if (strcharinfo(0)==\"Daniel Jackson\") mes \"It is true, you are Daniel!\";\n\nMore examples of using the 'if' command in the real world:\n\nExample 1:\n\n	.@var1 = 1;\n	input .@var2;\n	if (.@var1 == .@var2)\n		close;\n	mes \"Sorry that is wrong\";\n	close;\n\nExample 2:\n\n	.@var1 = 1;\n	input .@var2;\n	if (.@var1 != .@var2)\n	mes \"Sorry that is wrong\";\n	close;\n\n(Notice examples 1 and 2 have the same effect.)\n\nExample 3:\n\n	++.@var1;\n	mes \"[Forgetfull Man]\";\n	if (.@var == 1) mes \"This is the first time you have talked to me\";\n	if (.@var == 2) mes \"This is the second time you have talked to me\";\n	if (.@var == 3) mes \"This is the third time you have talked to me\";\n	if (.@var == 4) mes \"This is the forth time you have talked to me, but I think I am getting amnesia, I have forgotten about you\";\n	if (.@var == 4) .@var = 0;\n	close;\n\nExample 4:\n\n	mes \"[Quest Person]\";\n	// The (AegisName) constant Apple comes from item_db, it is the item number 512.\n	if (countitem(Apple) >= 1) {\n		mes \"Oh an apple, I didn't want it, I just wanted to see one\";\n		close;\n	}\n	mes \"Can you please bring me an apple?\";\n	close;\n\nExample 5: Using complex conditions.\n\n	mes \"[Multi Checker]\";\n	if ((queststarted == 1) && (countitem(Apple) >= 5)) {\n		// Executed only if the quest has been started AND You have 5 apples\n		mes \"[Multi Checker]\";\n		mes \"Well done you have started the quest of got me 5 apples\";\n		mes \"Thank you\";\n		queststarted = 0;\n		delitem Apple, 5;\n		close;\n	}\n	mes \"Please get me 5 apples\";\n	queststarted = 1;\n	close;\n\nIf the condition doesn't meet, it'll do the action following the else.\nWe can also group several actions depending on a condition, this way:\n\nif (<condition) {\n	dothis1;\n	dothis2;\n	dothis3;\n} else {\n	dothat1;\n	dothat2;\n	dothat3;\n	dothat4;\n}\n\nExample 6:\n\n	mes \"[Person Checker]\";\n	if ($name$ == \"\") {\n		mes \"Please tell me someone's name\";\n		next;\n		input $name$;\n		$name2$ = strcharinfo(0);\n		mes \"[Person Checker]\";\n		mes \"Thank you\";\n		close;\n	}\n	if ($name$ == strcharinfo(0)) {\n		mes \"You are the person that \" +$name2$+ \" just mentioned\";\n		mes \"nice to meet you\";\n	} else {\n		mes \"You are not the person that \" +$name2$+ \" mentioned\";\n	}\n	$name$ = \"\";\n	$name2$ = \"\";\n	close;\n\nSee 'strcharinfo' for explanation of what this function does.\n\nRemember that if you plan to do several actions upon the condition being \nfalse, and you forget to use the curly braces (the { } ), the second \naction will be executed regardless the output of the condition, unless of \ncourse, you stop the execution of the script if the condition is true \n(that is, in the first grouping using a return; , and end; or a close; ).\n\nAlso, you can have multiple conditions nested or chained, and don't worry \nabout limits as to how many nested if you can have, there is no spoon ;).\n\n...\nif (<condition 1>)\n	dothis;\nelse if (<condition 2>) {\n	dotheother;\n	do that;\n	end;\n} else\n	do this;\n...\n\n---------------------------------------\n\n*while (<condition>) <statement>;\n\nThis is probably the simplest and most frequently used loop structure. The \n'while' statement can be interpreted as \"while <condition> is true, \nperform <statement>\". It is a pretest loop, meaning the conditional \nexpression is tested before any of the statements in the body of the loop \nare performed. If the condition evaluates to false, the statement(s) in \nthe body of the loop is/are never executed. If the condition evaluates to \ntrue, the statement(s) are executed, then control transfers back to the \nconditional expression, which is reevaluated and the cycle continues.\n\nMultiple statements can be grouped with { }, curly braces, just like with \nthe 'if' statement.\n\nExample 1:\n	while (switch(select(\"Yes:No\") == 2 ))\n		mes \"You picked no.\";\n\nExample 2: multiple statements\n	while (switch(select(\"Yes:No\") == 2 )) {\n		mes \"Why did you pick no?\";\n		mes \"You should pick yes instead!\";\n	}\n\nExample 3: counter-controlled loop\n	.@i = 1;\n	while (.@i <= 5) {\n		mes \"This line will print 5 times.\";\n		++.@i;\n	}\n\nExample 4: sentinel-controlled loop\n	mes \"Input 0 to stop\";\n	input .@num;\n	while (.@num != 0) {\n		mes \"You entered \" + .@num;\n		input .@num;\n	}\n	close;\n\n---------------------------------------\n\n*for (<variable initialization>; <condition>; <variable update>) <statement>;\n\nAnother pretest looping structure is the 'for' statement. It is considered \na specialized form of the 'while' statement, and is usually associated \nwith counter-controlled loops. Here are the steps of the 'for' statement: \nthe initialize statement is executed first and only once. The condition \ntest is performed. When the condition evaluates to false, the rest of the \nfor statement is skipped. When the condition evaluates to true, the body \nof the loop is executed, then the update statement is executed (this \nusually involves incrementing a variable). Then the condition is \nreevaluated and the cycle continues. \n\nExample 1:\n	for (.@i = 0; .@i < 5; ++.@i)\n		mes \"This line will print 5 times.\";\n\nExample 2:\n	mes \"This will print the numbers 1 - 5.\";\n	for (.@i = 1; .@i <= 5; ++.@i)\n		mes .@i;\n\n---------------------------------------\n\n*do { <statement>; } while (<condition>);\n\nThe 'do...while' is the only post-test loop structure available in this \nscript language. With a post-test, the statements are executed once before \nthe condition is tested. When the condition is true, the statement(s) are \nrepeated. When the condition is false, control is transferred to the \nstatement following the 'do...while' loop expression.\n\nExample 1: sentinel-controlled loop\n	mes \"This menu will keep appearing until you pick Cancel\";\n	do {\n		.@choice = select(\"One:Two:Three:Cancel\");\n	} while (.@choice != 4);\n\nExample 2: counter-controlled loop\n	mes \"This will countdown from 10 to 1.\";\n	.@i = 10;\n	do {\n		mes .@i--;\n	} while (.@i > 0);\n\n---------------------------------------\n\n*freeloop(<toggle>)\n\nToggling this to enabled (1) allows the script instance to bypass the \ninfinite loop protection, allowing your script to loop as much as it may \nneed. Disabling (0) may warn you if an infinite loop is detected if your\nscript is looping too many times.\n\nPlease note, once again, that this isn't a solution to all problems, and by\ndisabling this protection your Hercules server may become laggy or\nunresponsive if the script it is used in is performing lenghty loop\noperations.\n\nExample:\n	freeloop(1); // enable script to loop freely\n\n	//Be aware with what you do here.\n	for (.@i = 0; .@i < .@bigloop; ++.@i) {\n		dothis;\n		// will sleep the script for 1ms when detect an infinity loop to \n		// let Hercules do what it need to do (socket, timer, process, \n		// etc.)\n	}\n\n	freeloop(0); // disable\n\n	for (.@i = 0; .@i < .@bigloop; ++.@i) {\n		dothis;\n		// throw an infinity loop error\n	}\n\n---------------------------------------\n\n*setarray <array name>[<first value>],<value>{,<value>...<value>};\n\nThis command will allow you to quickly fill up an array in one go. Check \nthe Kafra scripts in the distribution to see this used a lot.\n\n	setarray .@array[0], 100, 200, 300, 400, 500, 600;\n\nThe index of the first element of the array to alter can be omitted if\nzero. For example:\n\n	setarray .@array, 200, 200, 200;\n	setarray .@array[1], 300, 150;\n\nwill produce:\n\n .@array[0] = 200\n .@array[1] = 300\n .@array[2] = 150\n\n---------------------------------------\n\n*cleararray <array name>[<first value to alter>],<value>,<number of values to set>;\n\nThis command will change many array values at the same time to the same \nvalue.\n\n	setarray .@array, 100, 200, 300, 400, 500, 600;\n	// This will make all 6 values 0\n	cleararray .@array[0], 0, 6;\n	// This will make array element 0 change to 245\n	cleararray .@array[0], 245, 1;\n	// This is equivalent to the above\n	cleararray .@array, 245, 1;\n	// This will make elements 1 and 2 change to 345\n	cleararray .@array[1], 345, 2;\n\nSee 'setarray'.\n\n---------------------------------------\n\n*copyarray <destination array>[<first value>],<source array>[<first value>],<amount of data to copy>;\n\nThis command lets you quickly shuffle a lot of data between arrays, which \nis in some cases invaluable.\n\n	setarray .@array, 100, 200, 300, 400, 500, 600;\n	// So we have made .@array[]\n	copyarray .@array2[0],.@array[2],2;\n\n	// Now, .@array2[0] will be equal to .@array[2] (300) and \n	// .@array2[1] will be equal to .@array[3].\n\nSo using the examples above:\n .@array[0] = 100\n .@array[1] = 200\n .@array[2] = 300\n .@array[3] = 400\n .@array[4] = 500\n .@array[5] = 600\n \nNew Array:\n .@array2[0] = 300\n .@array2[1] = 400\n .@array2[2] = 0\n .@array2[3] = 0\n\nNotice that .@array[4] and .@array[5] won't be copied to the second array,\nand it will return a 0.\n\n---------------------------------------\n\n*deletearray <array name>[<first value>],<how much to delete>;\n\nThis command will delete a specified number of array elements totally from \nan array, shifting all the elements beyond this towards the beginning.\n\n	// This will delete array element 0, and move all the other array \n	// elements up one place.\n	deletearray .@array[0],1\n\n	// This would delete array elements numbered 1, 2 and 3, leave element 0 \n	// in its place, and move the other elements ups, so there are no gaps.\n	deletearray .@array[1],3\n\nIf the amount of items to delete is not specified, all elements of the\narray starting from the specified one to the end, are deleted. If no\nstarting element is specified either, the the entire array will be\ndeleted.\n\n	// This would delete all elements of the array starting from 2, leaving\n	// element 0 and 1\n	deletearray .@array[2];\n\n	// This would delete all elements of the array\n	deletearray .@array;\n\n---------------------------------------\n//=====================================\n1 - End of Basic-Related Commands\n//=====================================\n---------------------------------------\n\n\n---------------------------------------\n//=====================================\n2 - Information-retrieving Related Commands\n//=====================================\n---------------------------------------\n\n*strcharinfo(<type>)\n\nThis function will return either the name, party name or guild name for \nthe invoking character. Whatever it returns is determined by type.\n(0) PC_NAME		- Character's name.\n(1) PC_PARTY	- The name of the party they're in if any.\n(2) PC_GUILD	- The name of the guild they're in if any.\n(3) PC_MAP		- The name of the map the character is in.\n \nIf a character is not a member of any party or guild, an empty string will \nbe returned when requesting that information.\n\nNote: Numbers can also be used in <type>, but their usage is disncouraged as\nusing only numbers reduces script readability\n\n---------------------------------------\n\n*strnpcinfo(<type>)\n\nThis function will return the various parts of the name of the calling NPC.\nWhatever it returns is determined by type.\n\n 0 - The NPC's display name (visible#hidden)\n 1 - The visible part of the NPC's display name\n 2 - The hidden part of the NPC's display name\n 3 - The NPC's unique name (::name)\n 4 - The name of the map the NPC is in.\n\n---------------------------------------\n\n*charid2rid(<char id>)\n\nThis function returns the RID of the character with the given character ID.\n\nIf the character is offline or doesn't exist, 0 is returned.\n\n---------------------------------------\n\n*getarraysize(<array name>)\n\nThis function returns highest index of the array that is filled.\nNotice that zeros and empty strings at the end of this array are not\ncounted towards this number.\n\nFor example:\n\n	setarray .@array, 100, 200, 300, 400, 500, 600;\n	.@arraysize = getarraysize(.@array);\n\nThis will make .@arraysize == 6. But if you try this:\n\n	setarray .@array, 100, 200, 300, 400, 500, 600, 0;\n	.@arraysize = getarraysize(.@array);\n\n.@arraysize will still equal 6, even though you've set 7 values.\n\nIf you do this:\n\n	.@array[1000] = 1;\n	.@arraysize = getarraysize(.@array);\n\n.@arraysize will be 1000, even though only one element has been set.\n\n---------------------------------------\n\n*getelementofarray(<array name>,<index>)\n\nThis command retrieves the value of the element of given array at given \nindex. This is equivalent to using:\n\n	<array name>[<index>]\n\nThe reason for this is, that this short form is internally converted into \na call to getelementofarray, when the script is loaded.\n\nAlso useful when passing arrays to functions or accessing another npc's \narrays: \n	getelementofarray(getarg(0),<index>)\n	getelementofarray(getvariableofnpc(.var, \"testNPC\"),<index>)\n\n---------------------------------------\n\n*readparam(<parameter number>)\n\nThis function will return the basic stats of an invoking character, \nreferred to by the parameter number. Instead of a number, you can use a \nparameter name if it is defined in 'db/const.txt'.\n\nExample parameters:\n\nStatusPoint, BaseLevel, SkillPoint, Class, Upper, Zeny, Sex, Weight, \nMaxWeight, JobLevel, BaseExp, JobExp, NextBaseExp, NextJobExp, Hp, MaxHp, \nSp, MaxSp, BaseJob, Karma, Manner, bVit, bDex, bAgi, bStr, bInt, bLuk\n\nAll of these also behave as variables, but don't expect to be able to just \n'set' them - some will not work for various internal reasons.\n\nExample 1:\n\n	// Returns how many status points you haven't spent yet.\n	mes \"Unused status points: \"+readparam(9);\n\nUsing this particular information as a function call is not required. \nTyping this will return the same result:\n\n	mes \"Unused status points: \"+StatusPoint;\n\nExample 2:\n\nYou can also use this command to get stat values.\n\n	if (readparam(bVit) > 77)\n		mes \"Only people with over 77 Vit are reading this!\";\n\nExample 3:\n\n	// Display your current weight\n	mes \"Your current weight is \"+( Weight/10 )+\"/\"+( MaxWeight/10 );\n\n---------------------------------------\n\n*getcharid(<type>{,\"<character name>\"})\n\nThis function will return a unique ID number of the invoking character, \nor, if a character name is specified, of that player.\n\nType is the kind of associated ID number required:\n\n 0 - Character ID number.\n 1 - Party ID number.\n 2 - Guild ID number.\n 3 - Account ID number.\n 4 - Battle ground ID\n\nFor most purposes other than printing it, a number is better to have than \na name (people do horrifying things to their character names).\n\nIf the character is not in a party or not in a guild, the function will \nreturn 0 if guild or party number is requested. If a name is specified and \nthe character is not found, 0 is returned.\n\nIf getcharid(0) returns a zero, the script got called not by a character \nand doesn't have an attached RID. Note that this will cause the map server \nto print \"player not attached!\" error messages, so it is preferred to use \n\"playerattached\" to check for the character attached to the script.\n\nif( getcharid(2) == 0 ) mes \"Only members of a guild are allowed here!\";\n\n---------------------------------------\n\n*getnpcid(<type>{,\"<npc name>\"});\n\nRetrieves IDs of the currently invoked NPC. If a unique npc name is given, \nIDs of that NPC are retrieved instead. Type specifies what ID to retrieve \nand can be one of the following:\n\n	0 - Unit ID (GID)\n\nIf an invalid type is given or the NPC does not exist, 0 is returned.\n\n---------------------------------------\n\n*getchildid()\n*getmotherid()\n*getfatherid()\n\nThese functions return the character ID of the attached player's child, \nmother, mother, or father, respectively. It returns 0 if no ID is found.\n\n	if (getmotherid()) mes \"Your mother's ID is: \"+getmotherid();\n\n---------------------------------------\n\n*ispartneron()\n\nThis function returns 1 if the invoking character's marriage partner is \ncurrently online and 0 if they are not or if the character has no partner.\n\n---------------------------------------\n\n*getpartnerid()\n\nThis function returns the character ID of the invoking character's \nmarriage partner, if any. If the invoking character is not married, it \nwill return 0, which is a quick way to see if they are married:\n\n	if (!getpartnerid()) mes \"I'm not going to be your girlfriend!\";\n	if (getpartnerid()) mes \"You're married already!\";\n\n---------------------------------------\n\n*getpartyname(<party id>)\n\nThis function will return the name of a party that has the specified ID \nnumber. If there is no such party ID, \"null\" will be returned.\n\nLets say the ID of a party was saved as a global variable:\n\n	// This would return the name of the party from the ID stored in a \n	// variable\n	mes \"You're in the '\"+getpartyname($@var)+\"' party, I know!\";\n\n---------------------------------------\n\n*getpartymember <party id>{,<type>};\n\nThis command will find all members of a specified party and returns their \nnames (or character id or account id depending on the value of \"type\") \ninto an array of temporary global variables. There's actually quite a few \ncommands like this which will fill a special variable with data upon \nexecution and not do anything else.\n\nUpon executing this,\n\n$@partymembername$[] is a global temporary string array which contains all \n					 the names of these party members.\n					 (only set when type is 0 or not specified)\n\n$@partymembercid[]   is a global temporary number array which contains the \n					 character id of these party members.\n					 (only set when type is 1)\n\n$@partymemberaid[]   is a global temporary number array which contains the \n					 account id of these party members.\n					 (only set when type is 2)\n\n$@partymembercount   is the number of party members that were found.\n\nThe party members will (apparently) be found regardless of whether they \nare online or offline. Note that the names come in no particular order.\n\nBe sure to use $@partymembercount to go through this array, and not \n'getarraysize', because it is not cleared between runs of 'getpartymember'.\nIf someone with 7 party members invokes this script, the array would have \n7 elements. But if another person calls up the NPC, and he has a party of \n5, the server will not clear the array for you, overwriting the values \ninstead. So in addition to returning the 5 member names, the 6th and 7th \nelements from the last call remain, and you will get 5+2 members, of which \nthe last 2 don't belong to the new guy's party. $@partymembercount will \nalways contain the correct number, (5) unlike 'getarraysize()' which will \nreturn 7 in this case.\n\nExample 1: list party member names\n\n	// get the party member names\n	getpartymember getcharid(1),0;\n	\n	// It's a good idea to copy the global temporary $@partymember***** \n	// variables to your own scope variables because if you have pauses in \n	// this script (sleep, sleep2, next, close2, input, menu, select, or \n	// prompt), another player could click this NPC, trigger \n	// 'getpartymember', and overwrite the $@partymember***** variables.\n	.@count = $@partymembercount;\n	copyarray .@name$[0], $@partymembername$[0], $@partymembercount;\n	\n	// list the party member names\n	for (.@i = 0; .@i < .@count; ++.@i) {\n		mes (.@i +1) + \". ^0000FF\" + .@name$[.@i] + \"^000000\";\n	}\n	close;\n\n\nExample 2: check party count (with a 'next' pause), before warping to event\n\n	.register_num = 5; // How many party members are required?\n	\n	// get the charID and accountID of character's party members\n	getpartymember getcharid(1), 1;\n	getpartymember getcharid(1), 2;\n	\n	if ($@partymembercount != .register_num) {\n		mes \"Please form a party of \"+ .register_num +\" to continue\";\n		close;\n	}\n	\n	// loop through both and use 'isloggedin' to count online party members\n	for (.@i = 0; .@i < $@partymembercount; ++.@i)\n		if (isloggedin($@partymemberaid[.@i], $@partymembercid[.@i]))\n			.@count_online++;\n	// We search accountID & charID because a single party can have \n	// multiple characters from the same account. Without searching \n	// through the charID, if a player has 2 characters from the same \n	// account inside the party but only 1 char online, it would count \n	// their online char twice.\n	\n	if (.@count_online != .register_num) {\n		mes \"All your party members must be online to continue\";\n		close;\n	}\n	\n	// copy the array to prevent players cheating the system\n	copyarray .@partymembercid, $@partymembercid, .register_num;\n	\n	mes \"Are you ready?\";\n	next; // careful here\n	select \"Yes\";\n	\n	// When a script hits a next, menu, sleep or input that pauses the \n	// script, players can invite or /leave and make changes in their \n	// party. To prevent this, we call getpartymember again and compare \n	// with the original values.\n	\n	getpartymember getcharid(1), 1;\n	if ($@partymembercount != .register_num) {\n		mes \"You've made changes to your party !\";\n		close;\n	}\n	for (.@i = 0; .@i < $@partymembercount; ++.@i) {\n		if (.@partymembercid[.@i] != $@partymembercid[.@i]) {\n			mes \"You've made changes to your party !\";\n			close;\n		}\n	}\n	\n	// Finally, it's safe to start the event!\n	warpparty \"event_map\", 0,0, getcharid(1);\n\n---------------------------------------\n\n*getpartyleader(<party id>{,<type>})\n\nThis function returns some information about the given party-id's leader.\nWhen type is omitted, the default information retrieved is the leader's \nname. Possible types are:\n\n	1: Leader account id\n	2: Leader character id\n	3: Leader's class\n	4: Leader's current map name\n	5: Leader's current level as stored on the party structure (may not be\n	   current level if leader leveled up recently).\n\nIf retrieval fails (leader not found or party does not exist), this \nfunction returns \"null\" instead of the character name, and -1 for the \nother types.\n\n---------------------------------------\n\n*getlook(<type>)\n\nThis function will return the number for the current character look value \nspecified by type. See 'setlook' for valid look types.\n\nThis can be used to make a certain script behave differently for \ncharacters dressed in black. :)\n\n---------------------------------------\n\n*getsavepoint(<information type>)\n\nThis function will return information about the invoking character's save \npoint. You can use it to let a character swap between several recorded \nsave points. Available information types are:\n\n 0 - Map name (a string)\n 1 - X coordinate\n 2 - Y coordinate\n\n---------------------------------------\n \n*getcharip({\"<character name>\"|<account id>|<char id>})\n\nThis function will return the IP address of the invoking character, or, if \na player is specified, of that character. A blank string is returned if no \nplayer is attached.\n \nExamples:\n\n// Outputs IP address of attached player.\n	mes \"Your IP: \" + getcharip();\n\n// Outputs IP address of character \"Silver\".\n	mes \"Silver's IP: \" + getcharip(\"Silver\");\n	\n---------------------------------------\n\n*sit({\"<character name>\"})\n*stand({\"<character name>\"})\n\nThis function will force a character to sit/stand if it is standing/sitting.\nIf no player is specified, the attached player will be used.\n\n---------------------------------------\n\n*issit({\"<character name>\"})\n\nThis function will return a number depending on the character's sitting state.\nIf the character is sitting, it will return 1, otherwise (standing) it will return 0.\nIn case no player is specified, the function will return the state of the attached player.\n\n---------------------------------------\n//=====================================\n2.1 - Item-Related Commands\n//=====================================\n---------------------------------------\n\n*getequipid(<equipment slot>)\n\nThis function returns the item ID of the item equipped in the equipment \nslot specified on the invoking character. If nothing is equipped there, it \nreturns -1. Valid equipment slots are:\n\nEQI_HEAD_TOP (1)          - Upper head gear\nEQI_ARMOR (2)             - Armor (Where you keep your Jackets and Robes)\nEQI_HAND_L (3)            - What is in your Left hand.\nEQI_HAND_R (4)            - What is in your Right hand.\nEQI_GARMENT (5)           - The garment slot (Mufflers, Hoods, Manteaus)\nEQI_SHOES (6)             - What foot gear the player has on.\nEQI_ACC_L (7)             - Accessory 1.\nEQI_ACC_R (8)             - Accessory 2.\nEQI_HEAD_MID (9)          - Middle Headgear (masks and glasses)\nEQI_HEAD_LOW (10)         - Lower Headgear (beards, some masks)\nEQI_COSTUME_HEAD_LOW (11) - Lower Costume Headgear\nEQI_COSTUME_HEAD_MID (12) - Middle Costume Headgear\nEQI_COSTUME_HEAD_TOP (13) - Upper Costume Headgear\nEQI_COSTUME_GARMENT (14)  - Costume Garment\nEQI_SHADOW_ARMOR (15)     - Shadow Armor\nEQI_SHADOW_WEAPON (16)    - Shadow Weapon\nEQI_SHADOW_SHIELD (17)    - Shadow Shield\nEQI_SHADOW_SHOES (18)     - Shadow Shoes\nEQI_SHADOW_ACC_R (19)     - Shadow Accessory 2\nEQI_SHADOW_ACC_L (20)     - Shadow Accessory 1\n\nNotice that a few items occupy several equipment slots, and if the \ncharacter is wearing such an item, 'getequipid' will return it's ID number \nfor either slot.\n\nCan be used to check if you have something equipped, or if you haven't got \nsomething equipped:\n\n	if(getequipid(EQI_HEAD_TOP) == Tiara) {\n		mes \"What a lovely Tiara you have on\";\n		close;\n	}\n	mes \"Come back when you have a Tiara on\";\n	close;\n\nYou can also use it to make sure people don't pass a point before removing \nan item totally from them. Let's say you don't want people to wear Legion \nPlate armor, but also don't want them to equip if after the check, you \nwould do this:\n\n	if (getequipid(EQI_ARMOR) == Full_Plate_Armor || getequipid(EQI_ARMOR) == Full_Plate_Armor_) {\n		mes \"You are wearing some Legion Plate Armor, please drop that in your stash before continuing\";\n		close;\n	}\n	if (countitem(Full_Plate_Armor) > 0 || countitem(Full_Plate_Armor_) > 0) {\n		mes \"You have some Legion Plate Armor in your inventory, please drop that in your stash before continuing\";\n		close;\n	}\n	mes \"I will lets you pass\";\n	close2;\n	warp \"place\",50,50;\n	end;\n\n---------------------------------------\n\n*getequipname(<equipment slot>)\n\nReturns the jname of the item equipped in the specified equipment slot on \nthe invoking character, or an empty string if nothing is equipped in that \nposition.\nDoes the same thing as getitemname(getequipid()). Useful for an NPC to \nstate what your are wearing, or maybe saving as a string variable.\nSee 'getequipid' for a full list of valid equipment slots.\n\n	if( getequipname(EQI_HEAD_TOP) != \"\" )\n		mes \"So you are wearing a \"+getequipname(EQI_HEAD_TOP)+\" on your head\";\n	else\n		mes \"You are not wearing a head gear\";\n\n---------------------------------------\n\n*getitemname(<item id>)\n\nGiven the database ID number of an item, this function will return the \ntext stored in the 'japanese name' field (which, in Hercules, stores an \nEnglish name the players would normally see on screen).\n\n---------------------------------------\n\n*getbrokenid(<number>)\n\nThis function will search the invoking character's inventory for any \nbroken items, and will return their item ID numbers. Since the character \nmay have several broken items, 1 given as an argument will return the \nfirst one found, 2 will return the second one, etc. Will return 0 if no \nsuch item is found.\n\n	// Let's see if they have anything broken:\n	if (getbrokenid(1)==0)\n		mes \"You don't have anything broken, quit bothering me.\";\n	else // They do, so let's print the name of the first broken item:\n		mes \"Oh, I see you have a broken \"+getitemname(getbrokenid(1))+\" here!\";\n\n---------------------------------------\n\n*getbrokencount()\n\nThis function will return the total amount of broken equipment on the\ninvoking character.\n\n---------------------------------------\n\n*getequipisequiped(<equipment slot>)\n\nThis functions will return 1 if there is an equipment placed on the \nspecified equipment slot and 0 otherwise. For a list of equipment slots \nsee 'getequipid'. Function originally used by the refining NPCs:\n\n	if (getequipisequiped(EQI_HEAD_TOP)) {\n		mes \"[Refiner]\";\n		mes \"That's a fine hat you are wearing there...\";\n		close;\n	}\n	mes \"[Refiner]\";\n	mes \"Do you want me to refine your dumb head?\";\n	close;\n\n---------------------------------------\n\n*getequipisenableref(<equipment slot>)\n\nWill return 1 if the item equipped on the invoking character in the \nspecified equipment slot is refinable, and 0 if it isn't. For a list of \nequipment slots see 'getequipid'.\n\n	if (getequipisenableref(EQI_HEAD_TOP)) {\n		mes \"[Refiner]\";\n		mes \"Ok I can refine this\";\n		close;\n	}\n	mes \"[Refiner]\";\n	mes \"I can't refine this hat!...\";\n	close;\n\n---------------------------------------\n\n*getequiprefinerycnt(<equipment slot>)\n\nReturns the current number of pluses for the item in the specified \nequipment slot. For a list of equipment slots see 'getequipid'.\n\nCan be used to check if you have reached a maximum refine value, default \nfor this is +10:\n\n	if(getequiprefinerycnt(EQI_HEAD_TOP) < 10)\n		mes \"I will now upgrade your \"+getequipname(EQI_HEAD_TOP);\n	else\n		mes \"Sorry, it's not possible to refine hats better than +10\";\n	close;\n\n---------------------------------------\n\n*getequipweaponlv(<equipment slot>)\n\nThis function returns the weapon level for the weapon equipped in the \nspecified equipment slot on the invoking character. For a list of \nequipment slots see 'getequipid'.\n\nOnly EQI_HAND_L and EQI_HAND_R normally make sense, since only weapons \nhave a weapon level. You can, however, probably, use this field for other \nequippable custom items as a flag or something.\n\nIf no item is equipped in this slot, or if it doesn't have a weapon level \naccording to the database, 0 will be returned.\n\nExamples:\n\n// Right hand can only contain a weapon.\n	switch (getequipweaponlv(EQI_HAND_R)) {\n		case 1: mes \"You are holding a lvl 1 weapon.\"; break;\n		case 2: mes \"You are holding a lvl 2 weapon.\"; break;\n		case 3: mes \"You are holding a lvl 3 weapon.\"; break;\n		case 4: mes \"You are holding a lvl 4 weapon.\"; break;\n		case 5: mes \"You are holding a lvl 5 weapon, hm, must be a custom design...\"; break;\n		default: mes \"Seems you don't have a weapon on.\"; break;\n	}\n\n// Left hand can hold either a weapon or shield.\n	if (getequipid(EQI_HAND_R) == 0) {\n		mes \"Seems you have nothing equipped here.\";\n		close;\n	}\n	switch (getequipweaponlv(EQI_HAND_L)) {\n		case 0: mes \"You are holding a shield, so it doesn't have a level.\"; break;\n		case 1: mes \"You are holding a lvl 1 weapon.\"; break;\n		case 2: mes \"You are holding a lvl 2 weapon.\"; break;\n		case 3: mes \"You are holding a lvl 3 weapon.\"; break;\n		case 4: mes \"You are holding a lvl 4 weapon.\"; break;\n		case 5: mes \"You are holding a lvl 5 weapon, hm, must be a custom design...\"; break;\n	}\n\n---------------------------------------\n\n*getequippercentrefinery(<equipment slot>)\n\nThis function calculates and returns the percent value chance to \nsuccessfully refine the item found in the specified equipment slot of the \ninvoking character by +1. There is no actual formula, the success rate for \na given weapon level of a certain refine level is found in the \ndb/refine_db.txt file. For a list of equipment slots see 'getequipid'.\n\nThese values can be displayed for the player to see, or used to calculate \nthe random change of a refine succeeding or failing and then going through \nwith it (which is what the official NPC refinery scripts use it for).\n\n// This will find a random number from 0 - 99 and if that is equal to or \n// more than the value recovered by this command it will show a message\n	if (getequippercentrefinery(EQI_HAND_L) <= rand(100))\n		mes \"Aww\";\n\n---------------------------------------\n\n*getareadropitem(\"<map name>\",<x1>,<y1>,<x2>,<y2>,<item>)\n\nThis function will count all the items with the specified ID number lying \non the ground on the specified map within the x1/y1-x2/y2 square on it and \nreturn that number.\n\nThis is the only function around where a parameter may be either a string \nor a number! If it's a number, it means that only the items with that item \nID number will be counted. If it is a string, it is assumed to mean the \n'english name' field from the item database. If you give it an empty \nstring, or something that isn't found from the item database, it will \ncount items number '512' (apples).\n\n---------------------------------------\n\n*getequipcardcnt(<equipment slot>)\n\nThis function will return the number of cards that have been compounded \nonto a specific equipped item for the invoking character. See 'getequipid' \nfor a list of possible equipment slots.\n\n---------------------------------------\n\n*getinventorylist;\n\nThis command sets a bunch of arrays with a complete list of whatever the \ninvoking character has in its inventory, including all the data needed to \nrecreate these items perfectly if they are destroyed. Here's what you get:\n\n@inventorylist_id[]        - array of item ids.\n@inventorylist_amount[]    - their corresponding item amounts.\n@inventorylist_equip[]     - will return the slot the item is equipped on, if at all.\n@inventorylist_refine[]    - for how much it is refined.\n@inventorylist_identify[]  - whether it is identified.\n@inventorylist_attribute[] - whether it is broken.\n@inventorylist_card1[]     - These four arrays contain card data for the\n@inventorylist_card2[]       items. These data slots are also used to store\n@inventorylist_card3[]       names inscribed on the items, so you can\n@inventorylist_card4[]       explicitly check if the character owns an item\n							 made by a specific craftsman.\n@inventorylist_expire[]    - expire time (Unix time stamp). 0 means never \n							 expires.\n@inventorylist_bound       - whether it is an account bounded item or not.\n@inventorylist_count       - the number of items in these lists.\n\nThis could be handy to save/restore a character's inventory, since no \nother command returns such a complete set of data, and could also be the\nonly way to correctly handle an NPC trader for carded and named items who \ncould resell them - since NPC objects cannot own items, so they have to \nstore item data in variables and recreate the items.\n\nNotice that the variables this command generates are all temporary, \nattached to the character, and integer.\n\nBe sure to use @inventorylist_count to go through these arrays, and not \n'getarraysize', because the arrays are not automatically cleared between \nruns of 'getinventorylist'.\n\n---------------------------------------\n\n*getcartinventorylist;\n\nThis command sets a bunch of arrays with a complete list of whatever the \ninvoking character has in its cart_inventory, including all the data needed to \nrecreate these items perfectly if they are destroyed. Here's what you get:\n\n@cartinventorylist_id[]        - array of item ids.\n@cartinventorylist_amount[]    - their corresponding item amounts.\n@cartinventorylist_refine[]    - for how much it is refined.\n@cartinventorylist_identify[]  - whether it is identified.\n@cartinventorylist_attribute[] - whether it is broken.\n@cartinventorylist_card1[]     - These four arrays contain card data for the\n@cartinventorylist_card2[]       items. These data slots are also used to store\n@cartinventorylist_card3[]       names inscribed on the items, so you can\n@cartinventorylist_card4[]       explicitly check if the character owns an item\n								 made by a specific craftsman.\n@cartinventorylist_expire[]    - expire time (Unix time stamp). 0 means never \n								 expires.\n@cartinventorylist_bound       - whether it is an account bounded item or not.\n@cartinventorylist_count       - the number of items in these lists.\n\nThis could be handy to save/restore a character's cart_inventory, since no \nother command returns such a complete set of data, and could also be the\nonly way to correctly handle an NPC trader for carded and named items who \ncould resell them - since NPC objects cannot own items, so they have to \nstore item data in variables and recreate the items.\n\nNotice that the variables this command generates are all temporary, \nattached to the character, and integer.\n\nBe sure to use @cartinventorylist_count to go through these arrays, and not \n'getarraysize', because the arrays are not automatically cleared between \nruns of 'getcartinventorylist'.\n\n---------------------------------------\n\n*cardscnt()\n\nThis function will return the number of cards inserted into the weapon \ncurrently equipped on the invoking character.\nWhile this function was meant for item scripts, it will work outside them:\n\n	if (cardscnt()==4) mes \"So you've stuck four cards into that weapon, think you're cool now?\";\n\n---------------------------------------\n\n*getrefine()\n\nThis function will return the refine count of the equipment from which \nthe function is called. This function is intended for use in item scripts.\n\n	if (getrefine()==10) mes \"Wow. That's a murder weapon.\";\n\n---------------------------------------\n\n*getnameditem(<item id>,\"<name to inscribe>\");\n*getnameditem(\"<item name>\",\"<name to inscribe>\");\n\nThis function is equivalent to using 'getitem', however, it will not just \ngive the character an item object, but will also inscribe it with a \nspecified character's name. You may not inscribe items with arbitrary \nstrings, only with names of characters that actually exist. While this \nisn't said anywhere specifically, apparently, named items may not have \ncards in them, slots or no - these data slots are taken by the character \nID who's name is inscribed. Only one remains free and it's not quite clear \nif a card may be there.\n\nThis function will return 1 if an item was successfully created and 0 if \nit wasn't for whatever reason. Like 'getitem', this function will also \naccept an 'english name' from the item database as an item name and will \nreturn 0 if no such item exists.\n\n---------------------------------------\n\n*getitemslots(<item ID>)\n\nThis function will look up the item with the specified ID number in the \ndatabase and return the number of slots this kind of items has - 0 if they \nare not slotted. It will also be 0 for all non-equippable items, \nnaturally, unless someone messed up the item database. It will return -1 \nif there is no such item.\n\nExample:\n\n//.@slots now has the amount of slots of the item with ID 1205.\n	.@slots = getitemslots(1205);\n\n---------------------------------------\n\n*getiteminfo(<item ID>,<type>)\n\nThis function will look up the item with the specified ID number in the \ndatabase and return the info set by TYPE argument.\nIt will return -1 if there is no such item.\n\nValid types are:\n	0 - Buy Price; 1 - Sell Price; 2 - Item Type;\n	3 - maxchance (Max drop chance of this item e.g. 1 = 0.01% , etc..\n		if = 0, then monsters don't drop it at all (rare or a quest item)\n		if = 10000, then this item is sold in NPC shops only\n	4 - sex; 5 - equip; 6 - weight; 7 - atk; 8 - def; 9 - range;\n	10 - slot; 11 - look; 12 - elv; 13 - wlv; 14 - view id\n	\n	If RENEWAL is defined, 15 - matk\n\nCheck sample in doc/sample/getiteminfo.txt\n\n---------------------------------------\n\n*getequipcardid(<equipment slot>,<card slot>)\n\nReturns value for equipped item slot in the indicated slot (0, 1, 2, or 3).\n\nThis function returns CARD ID, 255,254,-255 (for card 0, if the item is \nproduced). It's useful for when you want to check whether an item contains \ncards or if it's signed.\n\n---------------------------------------\n//=====================================\n2.1 - End of Item-Related Commands\n//=====================================\n---------------------------------------\n\n*getmapxy(\"<variable for map name>\",<variable for x>,<variable for y>,<type>{,\"<search string>\"})\n\nThis function will locate a character object, NPC object or pet's \ncoordinates and place their coordinates into the variables specified when \ncalling it. It will return 0 if the search was successful, and -1 if the \nparameters given were not variables or the search was not successful.\n\nType is the type of object to search for:\n\n	0 - Character object\n	1 - NPC object\n	2 - Pet object\n	3 - Monster object\n	4 - Homunculus object\n	5 - Mercenary object\n	6 - Elemental object\n\nWhile 3 is meant to look for a monster object, no searching will be done \nif you specify type 3, and the function will always return -1.\n\nThe search string is optional. If it is not specified, the location of the \ninvoking character will always be returned for types 0 and 2, the location \nof the NPC running this function for type 1.\nIf a search string is specified, for types 0 and 1, the character or NPC \nwith the specified name will be located. If type is 3, the search will \nlocate the current pet of the character who's name is given in the search \nstring, it will NOT locate a pet by name.\n\nWhat a mess. Example, a working and tested one now:\n\n	prontera,164,301,3%TAB%script%TAB%Meh%TAB%730,{\n		mes \"My name is Meh. I'm here so that Nyah can find me.\";\n		close;\n	}\n\n	prontera,164,299,3%TAB%script%TAB%Nyah%TAB%730,{\n		mes \"My name is Nyah.\";\n		mes \"I will now search for Meh all across the world!\";\n		if (getmapxy(.@mapname$,.@mapx,.@mapy,1,\"Meh\")!=0) {\n			mes \"I can't seem to find Meh anywhere!\";\n			close;\n		}\n		mes \"And I found him on map \"+.@mapname$+\" at X:\"+.@mapx+\" Y:\"+.@mapy+\" !\";\n		close;\n	}\n\nNotice that NPC objects disabled with 'disablenpc' will still be located.\n\n---------------------------------------\n\n*getgmlevel()\n\nThis function will return the (GM) level of player group the account to \nwhich the invoking character belongs. If this is somehow executed from a \nconsole command, 99 will be returned, and 0 will be returned if the \naccount has no GM level.\n\nThis allows you to make NPC's only accessible for certain GM levels, or \nbehave specially when talked to by GMs.\n\n	if (getgmlevel()) mes \"What is your command, your godhood?\";\n	if (getgmlevel() < 99) end;\n\n---------------------------------------\n\n*getgroupid()\n\nThis function will return the id of player group the account to which the \ninvoking player belongs.\n\n---------------------------------------\n\n*gettimetick(<tick type>)\n\nThis function will return the system time in UNIX epoch time (if tick type \nis 2) or the time since the start of the current day in seconds if tick \ntype is 1.\nPassing 0 will make it return the server's tick, which is a measurement in\nmilliseconds used by the server's timer system. The server's tick is an\nunsigned int which loops every ~50 days.\n\nJust in case you don't know, UNIX epoch time is the number of seconds \nelapsed since 1st of January 1970, and is useful to see, for example, \nfor how long the character has been online with OnPCLoginEvent and \nOnPCLogoutEvent, which could allow you to make an 'online time counted for \nconviction only' jail script.\n\n---------------------------------------\n\n*gettime(<type>)\n\nThis function returns specified information about the current system time.\n\n1 - Seconds (of a minute)\n2 - Minutes (of an hour)\n3 - Hour (of a day)\n4 - Week day (0 for Sunday, 6 is Saturday)\n5 - Day of the month.\n6 - Number of the month.\n7 - Year.\n8 - Day of the year.\n\nIt will only return numbers.\n\n	if (gettime(4)==6) mes \"It's a Saturday. I don't work on Saturdays.\";\n\n---------------------------------------\n\n*gettimestr(<format string>,<max length>)\n\nThis function will return a string containing time data as specified by \nthe format string.\n\nThis uses the C function 'strfmtime', which obeys special format \ncharacters. For a full description see, for example, the description of \n'strfmtime' at http://www.delorie.com/gnu/docs/glibc/libc_437.html\nAll the format characters given in there should properly work.\nMax length is the maximum length of a time string to generate.\n\nThe example given in Hercules sample scripts works like this:\n\n	mes gettimestr(\"%Y-%m/%d %H:%M:%S\",21);\n\nThis will print a full date and time like 'YYYY-MM/DD HH:MM:SS'.\n\n---------------------------------------\n\n*getusers(<type>)\n\nThis function will return a number of users on a map or the whole server. \nWhat it returns is specified by Type.\n\nType can be one of the following values, which control what is returned:\n\n	0 - Count of all characters on the map of the invoking character.\n	1 - Count of all characters in the entire server.\n	8 - Count of all characters on the map of the NPC the script is\n		running in.\n\n---------------------------------------\n\n*getmapusers(\"<map name>\")\n\nThis function will return the number of users currently located on the \nspecified map.\n\nCurrently being used in the PVP scripts to check if a PVP room is full of \nnot, if the number returned it equal to the maximum allowed it will not \nlet you enter.\n\n---------------------------------------\n\n*getareausers({\"<map name>\",}{<x1>,<y1>,<x2>,<y2>})\n*getareausers({\"<map name>\",}{<radius>})\n\nThis function will return the count of connected characters which are \nlocated within the specified area. Area can be x1/y1-x2/y2 square,\nor radius from npc position. If map name missing, used attached player map.\n\nThis is useful for maps that are split into many buildings, such as all \nthe \"*_in\" maps, due to all the shops and houses.\n\nExamples:\n	// return players in area npc area on current map.\n	.@num = getareausers();\n	// return players in square (1, 1) - (10, 10)\n	.@num = \"players: \" + getareausers(1, 1, 10, 10);\n\n---------------------------------------\n\n*getusersname;\n\nThis command will give the invoking character a list of names of the \nconnected characters (including themselves) into an NPC script message \nwindow (see 'mes') paging it by 10 names as if with the 'next' command.\n\nYou need to put a 'close' after that yourself.\n\n---------------------------------------\n//=====================================\n2.2 - Guild-Related Commands\n//=====================================\n---------------------------------------\n\n*getguildname(<guild id>)\n\nThis function returns a guild's name given an ID number. If there is no \nsuch guild, \"null\" will be returned;\n\n	// Would print whatever guild 10007 name is.\n	mes \"The guild \"+getguildname(10007)+\" are all nice people.\";\n\n	// This will do the same as above:\n	.@var = 10007;\n	mes \"We have some friends in \"+getguildname(.@var)+\", you know.\";\n\nThis is used all over the WoE controlling scripts. You could also use it \nfor a guild-based event.\n\n---------------------------------------\n\n*getguildmaster(<guild id>)\n\nThis function return the name of the master of the guild which has the \nspecified ID number. If there is no such guild, \"null\" will be returned.\n\n// Would return the guild master of guild 10007, whatever that might be.\n	mes getguildmaster(10007)+\" runs \"+getguildname(10007);\n\nCan be used to check if the character is the guild master of the specified \nguild.\n\nMaybe you want to make a room only guild masters can enter:\n\n	.@GID = getcharid(2);\n	if (.@GID == 0) {\n		mes \"Sorry you are not in a guild\";\n		close;\n	}\n	if (strcharinfo(0) == getguildmaster(.@GID)) {\n		mes \"Welcome guild master of \"+GetGuildName(.@GID);\n		close;\n	}\n	mes \"Sorry you don't own the guild you are in\";\n	close;\n\n---------------------------------------\n\n*getguildmasterid(<guild id>)\n\nThis function will return the character ID number of the guild master of \nthe guild specified by the ID. 0 if the character is not a guild master of \nany guild.\n\n---------------------------------------\n\n*getcastlename(\"<map name>\")\n\nThis function returns the name of the castle when given the map name for \nthat castle. The data is read from 'db/castle_db.txt'.\n\n---------------------------------------\n\n*getcastledata(\"<map name>\",<type of data>)\n*setcastledata \"<map name>\",<type of data>,<value>;\n\nThis function returns the castle ownership information for the castle \nreferred to by its map name. Castle information is stored in \n`guild_castle` SQL table.\n\nTypes of data correspond to `guild_castle` table columns:\n\n 1 - `guild_id`   - Guild ID.\n 2 - `economy`    - Castle Economy score.\n 3 - `defense`    - Castle Defense score.\n 4 - `triggerE`   - Number of times the economy was invested in today.\n 5 - `triggerD`   - Number of times the defense was invested in today.\n 6 - `nextTime`   - unused\n 7 - `payTime`    - unused\n 8 - `createTime` - unused\n 9 - `visibleC`   - Is 1 if a Kafra was hired for this castle, 0 otherwise.\n10 - `visibleG0`  - Is 1 if the 1st guardian is present (Soldier Guardian)\n11 - `visibleG1`  - Is 1 if the 2nd guardian is present (Soldier Guardian)\n12 - `visibleG2`  - Is 1 if the 3rd guardian is present (Soldier Guardian)\n13 - `visibleG3`  - Is 1 if the 4th guardian is present (Archer Guardian)\n14 - `visibleG4`  - Is 1 if the 5th guardian is present (Archer Guardian)\n15 - `visibleG5`  - Is 1 if the 6th guardian is present (Knight Guardian)\n16 - `visibleG6`  - Is 1 if the 7th guardian is present (Knight Guardian)\n17 - `visibleG7`  - Is 1 if the 8th guardian is present (Knight Guardian)\n\nAll types of data have their meaning determined by War of Emperium \nscripts, with exception of:\n - `guild_id` that is always the ID of the guild that owns the castle,\n - `defense` that is used in Guardians & Emperium HP calculations,\n - `visibleG` that is always considered to hold guardian presence bits.\n\nThe 'setcastledata' command will behave identically, but instead of \nreturning values for the specified types of accessible data, it will alter \nthem and cause them to be sent to the char-server for storage.\n\nChanging Guild ID or Castle Defense will trigger additional actions, like \nrecalculating guardians' HP.\n\n---------------------------------------\n\n*getgdskilllv(<guild id>,<skill id>)\n*getgdskilllv(<guild id>,\"<skill name>\")\n\nThis function returns the level of the skill <skill id> of the guild \n<guild id>. \nIf the guild does not have that skill, 0 is returned.\nIf the guild does not exist, -1 is returned.\nRefer to 'db/(pre-)re/skill_db.txt' for the full list of skills. \nGD_* are guild skills\n\n---------------------------------------\n\n*requestguildinfo <guild id>{,\"<event label>\"};\n\nThis command requests the guild data from the char server and merrily \ncontinues with the execution. Whenever the guild information becomes \navailable (which happens instantly if the guild information is already in \nmemory, or later, if it isn't and the map server has to wait for the char \nserver to reply) it will run the specified event as in a 'doevent' call.\n\n---------------------------------------\n\n*getmapguildusers(<mapname>,<guild id>)\n\nReturns the amount of characters from the specified guild on the given map.\n\nExample:\n\nmes \"You have \"+getmapguildusers(\"prontera\",getcharid(2))+\" guild members in Prontera.\";\n\n---------------------------------------\n\n*getguildmember <guild id>{,<type>};\n\nThis command will find all members of a specified guild and returns their names \n(or character id or account id depending on the value of \"type\") into an array\nof temporary global variables.\n\nUpon executing this,\n\n$@guildmembername$[] is a global temporary string array which contains all the \n					 names of these guild members.\n					 (only set when type is 0 or not specified)\n\n$@guildmembercid[]   is a global temporary number array which contains the \n					 character id of these guild members.\n					 (only set when type is 1)\n\n$@guildmemberaid[]   is a global temporary number array which contains the \n					 account id of these guild members.\n					 (only set when type is 2)\n\n$@guildmembercount   is the number of guild members that were found.\n\nThe guild members will be found regardless of whether they are online or offline.\nNote that the names come in no particular order.\n\nBe sure to use $@guildmembercount to go through this array, and not \n'getarraysize', because it is not cleared between runs of 'getguildmember'.\n\nFor usage examples, see 'getpartymember'.\n\n---------------------------------------\n//=====================================\n2.2 - End of Guild-Related Commands\n//=====================================\n---------------------------------------\n\n*getskilllv(<skill id>)\n*getskilllv(\"<skill name>\")\n\nThis function returns the level of the specified skill that the invoking \ncharacter has. If they don't have the skill, 0 will be returned. The full \nlist of character skills is available in 'db/(pre-)re/skill_db.txt'.\n\nThere are two main uses for this function, it can check whether the \ncharacter has a skill or not, and it can tell you if the level is high \nenough.\n\nExample 1:\n\n	if (getskilllv(TF_THROWSTONE)) {\n		// TF_THROWSTONE is defined in skill_db.txt and its value is 152\n		mes \"You have got the skill Throw Stone\";\n		close;\n	}\n	mes \"You don't have Throw Stone\";\n	close;\n\nExample 2:\n\n	if (getskilllv(AL_HEAL) == 10) {\n		mes \"Your heal lvl has been maxed\";\n		close;\n	}\n	if (getskilllv(AL_HEAL) >= 5) {\n		mes \"Your heal lvl is 5 or more\";\n		close;\n	}\n	mes \"You heal skill is below lvl 5\";\n	close;\n\n---------------------------------------\n\n*getskilllist;\n\nThis command sets a bunch of arrays with a complete list of skills the \ninvoking character has. Here's what you get:\n\n@skilllist_id[]   - skill ids.\n@skilllist_lv[]   - skill levels.\n@skilllist_flag[] - see 'skill' for the meaning of skill flags.\n@skilllist_count  - number of skills in the above arrays.\n\nWhile 'getskillv' is probably more useful for most situations, this is the \neasiest way to store all the skills and make the character something else \nfor a while. Advanced job for a day? :) This could also be useful to see \nhow many skills a character has.\n\n---------------------------------------\n\n*getpetinfo(<type>)\n\nThis function will return pet information for the pet the invoking \ncharacter currently has active. Valid types are:\n\n 0 - Unique pet ID number as stored by the char server and distinguishing \n	 it from all other pets the characters actually have. This value is \n	 currently useless, at most you can use it to tell pets apart reliably.\n 1 - Pet class number as per 'db/pet_db.txt' - will tell you what kind of \n	 a pet it is.\n 2 - Pet name. Will return \"null\" if there's no pet.\n 3 - Pet friendly level (intimacy score). 1000 is full loyalty.\n 4 - Pet hungry level. 100 is completely full.\n 5 - Pet rename flag. 0 means this pet has not been named yet.\n\n---------------------------------------\n\n*petstat(<flag>)\n\nReturns current pet status, all are integers except name.\nReturns 0 or \"\" if the player doesn't have pets.\n\nFlags usable:\nPET_CLASS\nPET_NAME\nPET_LEVEL\nPET_HUNGRY\nPET_INTIMATE\n\nExample:\n	.@i = petstat(PET_CLASS);\n\n---------------------------------------\n\n*getmonsterinfo(<mob ID>,<type>)\n\nThis function will look up the monster with the specified ID number in the\nmob database and return the info set by TYPE argument.\nIt will return -1 if there is no such monster (or the type value is \ninvalid), or \"null\" if you requested the monster's name.\n\nValid types are listed in const.txt:\n	MOB_NAME	0\n	MOB_LV	1\n	MOB_MAXHP	2\n	MOB_BASEEXP	3\n	MOB_JOBEXP	4\n	MOB_ATK1	5\n	MOB_ATK2	6\n	MOB_DEF	7\n	MOB_MDEF	8\n	MOB_STR	9\n	MOB_AGI	10\n	MOB_VIT	11\n	MOB_INT	12\n	MOB_DEX	13\n	MOB_LUK	14\n	MOB_RANGE	15\n	MOB_RANGE2	16\n	MOB_RANGE3	17\n	MOB_SIZE	18\n	MOB_RACE	19\n	MOB_ELEMENT	20\n	MOB_MODE	21\n	MOB_MVPEXP	22\n\nCheck sample in doc/sample/getmonsterinfo.txt\n\n---------------------------------------\n\n*addmonsterdrop(<mob id or name>, <item id>, <rate>)\n\nThis command will temporarily add a drop to an existing monster. If the\nmonster already drops the specified item, its drop rate will be updated to the\ngiven value.\n\nBoth the monster and the item must be valid.  Acceptable values for the drop\nrate are in the range [1:10000].\n\nReturn value will be 1 in case of success (the item was added or its drop rate\nwas updated), and 0 otherwise (there were no free item drop slots).\n\nExample:\n	// Add Poring Doll (741) to the Poring's (1002) drops, with 1% (100) rate\n	addmonsterdrop(1002, 741, 100);\n\n---------------------------------------\n\n*delmonsterdrop(<mob id or name>, <item id>)\n\nThis command will temporarily remove a drop from an existing monster.\n\nBoth the monster and the item must be valid.\n\nReturn value will be 1 in case of success (the item was removed), and 0\notherwise (the monster didn't have the specified item in its drop list).\n\nExample:\n	// Remove Jellopy (909) from the Poring's (1002) drops\n	delmonsterdrop(1002, 909);\n\n---------------------------------------\n\n*getmobdrops(<mob id>)\n\nThis command will find all drops of the specified mob and return the item \nIDs and drop percentages into arrays of temporary global variables. \n'getmobdrops' returns 1 if successful and 0 if the mob ID doesn't exist.\n\nUpon executing this,\n\n$@MobDrop_item[] is a global temporary number array which contains the \n				 item IDs of the monster's drops.\n\n$@MobDrop_rate[] is a global temporary number array which contains the \n				 drop percentages of each item. (1 = .01%)\n\n$@MobDrop_count  is the number of item drops found.\n\nBe sure to use $@MobDrop_count to go through the arrays, and not \n'getarraysize', because the temporary global arrays are not cleared \nbetween runs of 'getmobdrops'. If a mob with 7 item drops is looked up, \nthe arrays would have 7 elements. But if another mob is looked up and it \nonly has 5 item drops, the server will not clear the arrays for you, \noverwriting the values instead. So in addition to returning the 5 item \ndrops, the 6th and 7th elements from the last call remain, and you will \nget 5+2 item drops, of which the last 2 don't belong to the new mob. \n$@MobDrop_count will always contain the correct number (5), unlike \n'getarraysize()' which would return 7 in this case.\n\nExample:\n\n	// get a Mob ID from the user\n	input .@mob_id;\n	\n	if (getmobdrops(.@mob_id)) {	// 'getmobdrops' returns 1 on success\n		// immediately copy global temporary variables into scope \n		// variables, since we don't know when 'getmobdrops' will get \n		// called again for another mob, overwriting your global temporary \n		// variables.\n		.@count = $@MobDrop_count;\n		copyarray .@item[0],$@MobDrop_item[0],.@count;\n		copyarray .@rate[0],$@MobDrop_rate[0],.@count;\n		\n		mes getmonsterinfo(.@mob_id,MOB_NAME) + \" - \" + .@count + \" drops found:\";\n		for (.@i = 0; .@i < .@count; ++.@i) {\n			mes .@item[.@i] + \" (\" + getitemname(.@item[.@i]) + \") \" + .@rate[.@i]/100 + ((.@rate[.@i]%100 < 10) ? \".0\":\".\") + .@rate[.@i]%100 + \"%\";\n		}\n	} else {\n		mes \"Unknown monster ID.\";\n	}\n	close;\n\n---------------------------------------\n\n*skillpointcount()\n\nReturns the total amount of skill points a character possesses \n(SkillPoint+SP's used in skills) This command can be used to check the \ncurrently attached characters total amount of skill points. This means the \nskill points used in skill are counted, and added to SkillPoints (number \nof skill points not used).\n\nExample:\n\n//This will set the temp character variable @skill_points to the amount of\n//skill points, and then tell the player the value.\n	@skill_points = skillpointcount();\n	mes \"You have \"+@skill_points+\" skill points in total!\";\n	\n//Self-explanatory... :P\n	if (skillpointcount() > 20)\n		mes \"Wow, you have more then 20 Skill Points in total!\";\n\nThis command does not count skills which are set as flag 3 (permamently \ngranted) (e.g. ALL_BUYING_STORE/ALL_INCCARRY).\n---------------------------------------\n\n*getscrate(<effect type>,<base rate>{,<GID>})\n\nThis function will return the chance of a status effect affecting the \ninvoking character, in percent, modified by the their current defense \nagainst said status. The 'base rate' is the base chance of the status \neffect being inflicted, in percent.\n\n	if (rand(100) > getscrate(Eff_Blind, 50)) {\n		// do something\n	}\n\nYou can see the full list of available effect types you can possibly \ninflict in 'db/const.txt' under 'Eff_'.\n\n---------------------------------------\n//=====================================\n3 - Checking-Related Commands\n//=====================================\n---------------------------------------\n\n*playerattached()\n\nReturns the ID of the player currently attached to the script. It will \nreturn 0 if no one is attached, or if the attached player no longer exists \non the map server. It is wise to check for the attached player in script \nfunctions that deal with timers as there's no guarantee the player will \nstill be logged on when the timer triggers. Note that the ID of a player \nis actually their account ID.\n\n---------------------------------------\n\n*isloggedin(<account id>{,<char id>})\n\nThis function returns 1 if the specified account is logged in and 0 if \nthey aren't. You can also pass the char_id to check for both account and \nchar id.\n\n---------------------------------------\n\n*checkweight(<item id>,<amount>{,<item id>,<amount>,<item id>,<amount>,...});\n*checkweight(\"<item name>\",<amount>{,\"<item name>\",<amount>,\"<item name>\",<amount>,...});\n*checkweight2(<id_array>,<amount_array>);\n\nThese functions will compute and return 1 if the total weight of the \nspecified number of specific items does not exceed the invoking \ncharacter's carrying capacity, and 0 otherwise. It is important to see if \na player can carry the items you expect to give them, failing to do that \nmay open your script up to abuse or create some very unfair errors.\n\nThe second function will check an array of items and amounts, and also\nreturns 1 on success and 0 on failure.\n\nThe functions, in addition to checking to see if the player is capable of \nholding a set amount of items, also ensure the player has room in their \ninventory for the item(s) they will be receiving.\n\nLike 'getitem', this function will also accept an 'english name' from the \ndatabase as an argument.\n\nExample 1:\n\n	if (checkweight(512,10)) {\n		getitem 512,10;\n	} else {\n		mes \"Sorry, you cannot hold this amount of apples!\";\n	}\n\nExample 2:\n\n	setarray .@item[0],512,513,514;\n	setarray .@amount[0],10,5,5;\n	if (!checkweight(.@item,.@amount)) {\n		mes \"Sorry, you cannot hold this amount of fruit!\";\n	}\n\n---------------------------------------\n\n*basicskillcheck()\n\nThis function will return the state of the configuration option \n'basic_skill_check' in 'battle.conf'. Returns 1 if the option is enabled \nand 0 if it isn't. If the 'basic_skill_check' option is enabled, which it \nis by default, characters must have a certain number of basic skill levels \nto sit, request a trade, use emotions, etc. Making your script behave \ndifferently depending on whether the characters must actually have the \nskill to do all these things might in some cases be required.\n\n---------------------------------------\n\n*checkoption(<option number>)\n*checkoption1(<option number>)\n*checkoption2(<option number>)\n*setoption <option number>{,<flag>};\n\nThe 'setoption' series of functions check for a so-called option that is \nset on the invoking character. 'Options' are used to store status \nconditions and a lot of other non-permanent character data of the yes-no \nkind. For most common cases, it is better to use 'checkcart', \n'checkfalcon', 'checkpeco' and other similar functions, but there are some \noptions which you cannot get at this way. They return 1 if the option is \nset and 0 if the option is not set.\n\nOption numbers valid for the first (option) version of this command are:\n\n0x000001 - Sight in effect.\n0x000002 - Hide in effect.\n0x000004 - Cloaking in effect.\n0x000008 - Cart number 1 present.\n0x000010 - Falcon present.\n0x000020 - Peco Peco present.\n0x000040 - GM Perfect Hide in effect.\n0x000080 - Cart number 2 present.\n0x000100 - Cart number 3 present.\n0x000200 - Cart number 4 present.\n0x000400 - Cart number 5 present.\n0x000800 - Orc head present.\n0x001000 - The character is wearing a wedding sprite.\n0x002000 - Ruwach is in effect.\n0x004000 - Chasewalk in effect.\n0x008000 - Flying or Xmas suit.\n0x010000 - Sighttrasher.\n0x100000 - Warg present.\n0x200000 - The character is riding a warg.\n\nOption numbers valid for the second version (opt1) of this command are:\n\n1 - Petrified.\n2 - Frozen.\n3 - Stunned.\n4 - Sleeping.\n6 - Petrifying (the state where you can still walk)\n\nOption numbers valid for the third version (opt2) of this command are:\n\n0x01 - Poisoned.\n0x02 - Cursed.\n0x04 - Silenced.\n0x08 - Signum Crucis (plays a howl-like sound effect, but otherwise no\n	   visible effects are displayed)\n0x10 - Blinded.\n0x80 - Deadly poisoned.\n\nOption numbers (except for opt1) are bit-masks - you can add them up to \ncheck for several states, but the functions will return true if at least \none of them is in effect.\n\n'setoption' will set options on the invoking character. There are no \nsecond and third versions of this command, so you can only change the \nvalues in the first list (cloak, cart, ruwach, etc). If flag is 1 (default \nwhen omitted), the option will be added to what the character currently \nhas; if 0, the option is removed. \n\nThis is definitely not a complete list of available option flag numbers. \nAsk a core developer (or read the source: src/map/status.h) for the full \nlist.\n\n---------------------------------------\n\n*setcart {<type>};\n*checkcart()\n\nIf <type> is 0 this command will remove the cart from the character.\nOtherwise it gives the invoking character a cart. The cart given will be \ncart number <type> and will work regardless of whether the character is a \nmerchant class or not.\nNote: the character needs to have the skill MC_PUSHCART to gain a cart.\n\nThe accompanying function will return 1 if the invoking character has a \ncart (any kind of cart) and 0 if they don't.\n\n	if (checkcart()) mes \"But you already have a cart!\";\n\n---------------------------------------\n\n*setfalcon {<flag>};\n*checkfalcon()\n\nIf <flag> is 0 this command will remove the falcon from the character.\nOtherwise it gives the invoking character a falcon. The falcon will be \nthere regardless of whether the character is a hunter or not. It will \n(probably) not have any useful effects for non-hunters though.\nNote: the character needs to have the skill HT_FALCON to gain a falcon.\n\nThe accompanying function will return 1 if the invoking character has a \nfalcon and 0 if they don't.\n\n	if (checkfalcon()) mes \"But you already have a falcon!\";\n\n---------------------------------------\n\n*setmount {<flag>};\n*checkmount()\n\nIf <flag> is MOUNT_NONE (or 0) this command will remove the mount from the\ncharacter.\n\nOtherwise it gives the invoking character the desired combat mount, where\nallowed by their class and skills.\n\nIf no flag is specified, the mount is automatically chosen according to the\ncharacter's class and skills.\n\nThe following flag values are accepted:\n\n	MOUNT_NONE:\n		- Dismount\n	MOUNT_PECO:\n		- PecoPeco (Knight series class)\n		- GrandPeco (Crusader series class)\n		- Gryphon (Royal Guard)\n	MOUNT_WUG:\n		- Warg (Ranger)\n	MOUNT_MADO:\n		- Mado Gear (Mechanic)\n	MOUNT_DRAGON:\n	MOUNT_DRAGON_GREEN:\n	MOUNT_DRAGON_BROWN:\n	MOUNT_DRAGON_GRAY:\n	MOUNT_DRAGON_BLUE:\n	MOUNT_DRAGON_RED:\n		- Dragon (Rune Knight)\n		  if MOUNT_DRAGON is specified, a the default (green) dragon will be used.\n\nUnlike 'setfalcon' and 'setcart' this will not work at all if they aren't of a \nclass which can ride a mount.\n\nThe accompanying function will return 0 if the invoking character is not on a\nmount, and a non-zero value (according to the above constants) if they are.\nNote: in case of dragons, the returned value will always be MOUNT_DRAGON,\nregardless of color.\n\n	if (checkmount())\n		mes \"Leave your mount outside! No riding mounts on the floor here!\";\n\n	if (checkmount() == MOUNT_DRAGON)\n		mes \"Wow, your dragon is cool! Can I pet it?\";\n\n---------------------------------------\n\n*setcashmount;\n*hascashmount()\n\nThe 'setcashmount' function toggles cash mount for the invoking character.\nIt will return 1 if successful, 0 otherwise.\n\nNote: Character must not be mounting a non-cash mount (eg. dragon, peco, \n	  wug, etc.)\n\nThe accompanying function will return 1 if the invoking character has a \ncash mount and 0 if they don't.\n\n---------------------------------------\n\n*checkwug()\n\nThis function will return 1 if the invoking character has a warg and 0 if \nthey don't.\n\n---------------------------------------\n\n*checkvending({\"<Player Name>\"})\n*checkchatting({\"<Player Name>\"})\n\nChecks if the player is vending or in a chatroom.\nName is optional, and defaults to the attached player if omitted.\n\nReturn values for 'checkvending' are\n  0 = not vending\n  1 = normal vending\n  2 = vending using @autotrade\n\n'checkchatting' returns 1 if they are in a chat room, 0 if they are not.\n\nExamples:\n	//This will check if Aaron is vending, and if so, put a message in \n	//front of the attached player saying Aaron is vending.\n	if (checkvending(\"Aaron\"))\n		mes \"Aaron is currently vending!\";\n\n	//This will check if the attached player in a chat room or not.\n	if (checkchatting())\n		mes \"You are currently in a chat room!\";\n\n---------------------------------------\n\n*checkidle({\"<Player Name>\"})\n\nReturns the time, in seconds, that the specified player has been idle.\nName is optional, and defaults to the attached player if omitted.\n\n---------------------------------------\n\n*agitcheck()\n*agitcheck2()\n\nThese function will let you check whether the server is currently in WoE \nmode (or WoE SE mode if the second function is called) and will return 1 \nif War of Emperium is on and 0 if it isn't. \n\n---------------------------------------\n\n*isnight()\n\nThis functions will return true or false depending on whether the server is in \nnight mode or day mode:\n\n	if (!isnight()) mes \"I only prowl in the night.\";\n\n---------------------------------------\n\n*checkre(<type>)\n\nChecks if a renewal feature is enabled or not in renewal.h, and returns 1 \nif enabled and 0 for disabled. The renewal feature to check is determined \nby the type parameter.\n\n 0 - RENEWAL (game renewal server mode)\n 1 - RENEWAL_CAST (renewal cast time)\n 2 - RENEWAL_DROP (renewal drop rate algorithms)\n 3 - RENEWAL_EXP (renewal exp rate algorithms)\n 4 - RENEWAL_LVDMG (renewal level modifier on damage)\n 5 - RENEWAL_EDP (renewal enchant deadly poison algorithm)\n 6 - RENEWAL_ASPD (renewal ASPD)\n	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n	@ /!\\ This command is deprecated @\n	@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n\nThis command is deprecated and it should not be used in new scripts, as it\nis likely to be removed at a later time. Please consider using the respective\nconstants RENEWAL, RENEWAL_CAST, RENEWAL_DROP, RENEWAL_EXP, RENEWAL_LVDMG,\nRENEWAL_EDP, RENEWAL_ASPD instead.\n\n---------------------------------------\n//=====================================\n3.1 - Checking Item-Related Commands\n//=====================================\n---------------------------------------\n\n*isequipped(<id>{,<id>{,<id>{,<id>}}})\n\nThis function will return 1 if the invoking character has all of the item \nIDs given equipped (if card IDs are passed, then it checks if the cards \nare inserted into slots in the equipment they are currently wearing). \nTheoretically there is no limit to the number of items that may be tested \nfor at the same time. \nIf even one of the items given is not equipped, 0 will be returned.\n\n	// (Poring,Santa Poring,Poporing,Marin)\n	if (isequipped(4001,4005,4033,4196)) mes \"Wow! You're wearing a full complement of possible poring cards!\";\n	// (Poring)\n	if (isequipped(4001)) mes \"A poring card is useful, don't you think?\";\n\nThe function was meant for item scripts to support the cards released by \nGravity in February 2005, but it will work just fine in normal NPC scripts.\n\n---------------------------------------\n\n*isequippedcnt(<card id>{,<card id>{,<card id>{,<card id>}}})\n\nThis function is similar to 'isequipped', but instead of 1 or 0, it will \nreturn the number of cards in the list given that were found on the \ninvoking character.\n\n	if (isequippedcnt(4001,4005,4033,4196) == 4) mes \"Finally got all four poring cards?\";\n\n---------------------------------------\n\n*checkequipedcard(<card id>)\n\nThis function will return 1 if the card specified by it's item ID number \nis inserted into any equipment they have in their inventory, currently \nequipped or not.\n\n---------------------------------------\n\n*getequipisidentify(<equipment slot>)\n\nThis function will return 1 if an item in the specified equipment slot is \nidentified and 0 if it isn't. Since you can't even equip unidentified \nequipment, there's a question of whether it can actually end up there, and \nit will normally return 1 all the time if there is an item in this \nequipment slot, which makes this script command kinda pointless.\nFor a list of equipment slots see 'getequipid'.\n\n---------------------------------------\n//=====================================\n3.0 & 3.1 - End of Checking/Item-Related Commands\n//=====================================\n---------------------------------------\n\n---------------------------------------\n//=====================================\n4 - Player-Related Commands\n//=====================================\n---------------------------------------\n\n*attachrid(<account ID>)\n*detachrid;\n\nThese commands allow the manipulation of the script's currently attached \nplayer. While attachrid allows attaching of a different player by using \nits account id for the parameter rid, detachrid makes the following \ncommands run as if the script was never invoked by a player.\n\nIn case, that the player cannot be attached, such as, when the player went \noffline in the mean time, attachrid returns 0, otherwise 1.\n\n---------------------------------------\n\n*rid2name(<rid>)\n\nConverts rid to name. Note: The player/monster/NPC must be online/enabled.\nGood for PCKillEvent where you can convert 'killedrid' to the name of the \nplayer.\n\nNote: rid2name may not produce correct character names since rid means \n	  account id.\n	  It will return the current online character of the account only.\n\n---------------------------------------\n\n*message \"<character name>\",\"<message>\";\n\nThat command will send a message to the chat window of the character \nspecified by name. The text will also appear above the head of that \ncharacter. It will not be seen by anyone else.\n\n---------------------------------------\n\n*dispbottom \"<message>\";\n\nThis command will send the given message into the invoking character's \nchat window.\n\n---------------------------------------\n\n*showscript \"<message>\"{,<GID>};\n\nMakes attached player or GID says a message like shouting a skill name, the message\nwill be seen to everyone around but not in chat window.\n\n---------------------------------------\n\n*warp \"<map name>\",<x>,<y>;\n\nThis command will take the invoking character to the specified map, and if \nwanted, specified coordinates too, but these can be random.\n\n	warp \"place\",50,55;\n\nThis would take them to X 50 Y 55 on the map called \"place\". If your X and \nY coordinates land on an unwalkable map square, it will send the warped \ncharacter to a random place. Same will happen if they are both zero:\n\n	warp \"place\",0,0;\n\nNotice that while warping people to coordinates 0,0 will normally get them \ninto a random place, it's not certain to always be so. Darned if I know \nwhere this is actually coded, it might be that this happens because square \n0,0 is unwalkable on all official maps. Beware if you're using custom maps.\n\nThere are also three special 'map names' you can use:\n\n\"Random\" will warp the player randomly on the current map.\n\"Save\" and \"SavePoint\" will warp the player back to their save point.\n\n---------------------------------------\n\n*areawarp \"<from map name>\",<x1>,<y1>,<x2>,<y2>,\"<to map name>\",<x3>,<y3>{,<x4>,<y4>};\n\nThis command is similar to 'warp', however, it will not refer to the \ninvoking character, but instead, all characters within a specified area, \ndefined by the x1/y1-x2/y2 square, will be warped. Nobody outside the area \nwill be affected, including the activating character, if they are outside \nthe area.\n\n	areawarp \"place\",10,10,120,120,\"place2\",150,150;\n\nEveryone that is in the area between X 10 Y 10 and X 120 Y 120, in a \nsquare shape, on the map called \"place\", will be affected, and warped to \n\"place2\" X 150 Y 150.\n\n	areawarp \"place\",10,10,120,120,\"place2\",0,0;\n\nBy using ,0,0; as the destination coordinates it will take all the \ncharacters in the affected area to a random set of co-ordinates on the \n\"place2\" map.\n\n	areawarp \"place\",10,10,120,120,\"place2\",150,150,200,200;\n\nBy using the optional x4 and y4 parameters, the destination coordinates \nwill be a random place within the defined x3/y3-x4/y4 square.\n\nLike 'warp', areawarp will also explicitly warp characters randomly into \nthe current map if you give the 'to map name' as \"Random\".\n\nSee also 'warp'.\n\n---------------------------------------\n \n*warpparty \"<to_mapname>\",<x>,<y>,<party_id>,{\"<from_mapname>\"};\n \nWarps a party to specified map and coordinate given the party ID, which \nyou can get with getcharid(1). You can also request another party id given \na member's name with getcharid(1,<player_name>).\n\nYou can use the following \"map names\" for special warping behavior:\nRandom:			All party members are randomly warped in their current map \n				(as if they all used a fly wing).\nSavePointAll:	All party members are warped to their respective save point.\nSavePoint:		All party members are warped to the save point of the \n				currently attached player (will fail if there's no player \n				attached).\nLeader:			All party members are warped to the leader's position. The \n				leader must be online and in the current map-server for this \n				to work.\n\nIf you specify a from_mapname, warpparty will only affect those on that \nmap.\n\nExample:\n\n	mes \"[Party Warper]\";\n	mes \"Here you go!\";\n	close2;\n	.@id = getcharid(1);\n	warpparty \"prontera\",150,100,.@id;\n	close;\n\n---------------------------------------\n\n*warpchar \"<mapname>\",<x>,<y>,<char_id>;\n\nWarps another player to specified map and coordinate given the char id, \nwhich you can get with getcharid(0,<player_name>). Obviously this is \nuseless if you want to warp the same player that is executing this script, \nunless it's some kind of \"chosen\" script.\n\nExample:\n\nwarpchar \"prontera\",150,100,150001;\n\n---------------------------------------\n\n*warpguild \"<mapname>\",<x>,<y>,<guild_id>;\n\nWarps a guild to specified map and coordinate given the guild id, which \nyou can get with getcharid(2). You can also request another guild id given \nthe member's name with getcharid(2,<player_name>).\n\nYou can use the following \"map names\" for special warping behavior:\nRandom:			All guild members are randomly warped in their current map \n				(as if they all used a fly wing)\nSavePointAll:	All guild members are warped to their respective save point.\nSavePoint:		All guild members are warped to the save point of the \n				currently attached player (will fail if there's no player \n				attached).\n\nExample:\n\nwarpguild \"prontera\",x,y,Guild_ID;\n\n---------------------------------------\n\n*warppartner(\"<map name>\",<x>,<y>);\n\nThis function will find the invoking character's marriage partner, if any, \nand warp them to the map and coordinates given. Go kidnap that spouse. :) \nIt will return 1 upon success and 0 if the partner is not online, the \ncharacter is not married, or if there's no invoking character (no RID). \n0,0 will, as usual, normally translate to random coordinates.\n\n---------------------------------------\n\n*savepoint \"<map name>\",<x>,<y>;\n\nThis command saves where the invoking character will return to upon \n'return to save point', if dead or in some other cases. The two versions \nare equivalent. Map name, X coordinate and Y coordinate should be \nperfectly obvious. This ignores any and all map flags, and can make a \ncharacter respawn where no teleportation is otherwise possible.\n\n	savepoint \"place\",350,75;\n\n---------------------------------------\n\n*heal <hp>,<sp>;\n\nThis command will heal a set amount of HP and/or SP on the invoking \ncharacter.\n\n	heal 30000,0; // This will heal 30,000 HP\n	heal 0,30000; // This will heal 30,000 SP\n	heal 300,300; // This will heal 300 HP and 300 SP\n\nThis command just alters the hit points and spell points of the invoking \ncharacter and produces no other output whatsoever.\n\n---------------------------------------\n\n*itemheal <hp>,<sp>;\n\nThis command heals given relative amounts of HP and/or SP on the invoking \ncharacter. Unlike heal, this command is intended for use in item scripts. \nIt applies potion-related bonuses, such as alchemist ranking, cards, \nstatus changes.\nIt also applies a sp/vit-related bonus that is calculated by:\n	heal = heal*[(100+STATUS*2)/100]\nSo if a player has 99 vit and the script is 'itemheal 5,0':\n	heal(hp) = 5*[(100+99*2)/100]\n	heal(hp) = 14,9\n	heal(hp) = 14\n	heal(sp) = 0\n\nWhen used inside an NPC script, potion-related bonuses are omitted.\n\nThere is also a nice example on using this with the 'rand' function, to \ngive you a random amount of healing.\n\n	// If the player has 50 vit and no bonuses this will heal\n	// anything from 200 to 300 HP and 5 SP\n	itemheal rand(100,150),5;\n\n---------------------------------------\n\n*percentheal <hp>,<sp>;\n\nThis command will heal the invoking character. It heals the character, but \nnot by a set value - it adds percent of their maximum HP/SP.\n\n	percentheal 100,0; // This will heal 100% HP\n	percentheal 0,100; // This will heal 100% SP\n	percentheal 50,50; // This will heal 50% HP and 50% SP\n\nSo the amount that this will heal will depend on the total amount of HP or \nSP you have maximum. Like 'heal', this will not call up any animations or \neffects.\n\n---------------------------------------\n\n*recovery;\n\nThis command will revive and restore full HP and SP to all characters \ncurrently connected to the server.\n\n---------------------------------------\n\n*jobchange <job number>{,<upper flag>};\n\nThis command will change the job class of the invoking character.\n\n	jobchange 1; // This would change your player into a Swordman\n	jobchange 4002; // This would change your player into a Swordman High\n\nThis command does work with numbers, but you can also use job names. The \nfull list of job names and the numbers they correspond to can be found in \n'db/const.txt'.\n\n	// This would change your player into a Swordman\n	jobchange Job_Swordman;\n	// This would change your player into a Swordman High\n	jobchange Job_Swordman_High;\n\n'upper flag' can alternatively be used to specify the type of job one \nchanges to. For example, jobchange Job_Swordman,1; will change the \ncharacter to a high swordsman. The upper values are:\n-1 (or when omitted): preserves the current job type.\n0: Normal/standard classes\n1: High/Advanced classes\n2: Baby classes\n\nThis command will also set a permanent character-based variable \n'jobchange_level' which will contain the job level at the time right \nbefore changing jobs, which can be checked for later in scripts.\n\n---------------------------------------\n\n*jobname (<job number>)\n\nThis command retrieves the name of the given job using the messages.conf \nentries 550 to 650.\n\n	mes \"[Kid]\";\n	mes \"I never thought I'd met a \"+jobname(Class)+\" here of all places.\";\n	close;\n\n---------------------------------------\n\n*eaclass ({<job number>})\n\nThis commands returns the \"eA job-number\" corresponding to the given \nclass, and uses the invoking player's class if none is given. The eA \njob-number is also a class number system, but it's one that comes with \nconstants which make it easy to convert among classes. The command will \nreturn -1 if you pass it a job number which doesn't have an eA job-number \nequivalent.\n\n	.@eac = eaclass();\n	if ((.@eac&EAJ_BASEMASK) == EAJ_SWORDMAN)\n		mes \"Your base job is Swordman.\";\n	if (.@eac&EAJL_UPPER)\n		mes \"You are a rebirth job.\";\n	if ((.@eac&EAJ_UPPERMASK) == EAJ_SWORDMAN)\n		mes \"You must be a Swordman, Baby Swordman or High Swordman.\";\n\nFor more information on the eA Job System, see the docs/ea_job_system.txt \nfile.\n\n---------------------------------------\n*roclass <job number> {,<gender>}\n\nDoes the opposite of eaclass. That is, given an eA job-number, it returns \nthe corresponding RO class number. A gender is required because both Bard \nand Dancers share the same eA job-number (EAJ_BARDDANCER), and uses the \ninvoking player's gender if none is given (if no player is attached, \nmale will be used by default). The command will return -1 if there is no \nvalid class to represent the specified job (for example, if you try to get \nthe baby version of a Taekwon class).\n\n	.@eac = eaclass();\n	//Check if class is already rebirth\n	if (.@eac&EAJL_UPPER) {\n		mes \"You look strong.\";\n		close;\n	}\n	.@eac = roclass(.@eac|EAJL_UPPER);\n	//Check if class has a rebirth version\n	if (.@eac != -1) {\n		mes \"Bet you can't wait to become a \"+jobname(.@eac)+\"!\";\n		close;\n	}\n\n---------------------------------------\n\n*changebase <job ID number>;\n\nThis command will change the appearance of the invoking character to that \nof a specified job class. Nothing but appearance will change.\n\nExamples:\n\n	/* This example is an item script in the item db */\n	{\n		Id: 2338\n		AegisName: \"Wedding_Dress\"\n		Name: \"Wedding Dress\"\n		Type: 5\n		Buy: 43000\n		Weight: 500\n		Job: 0xFFFFFFFE\n		Loc: 16\n		Script: <\"\n			bonus bMdef,15;\n			changebase Job_Wedding;\n		\">\n	},\n\nchangebase Job_Novice; // Changes player to Novice sprite.\n\nchangebase Class; // Changes player back to default sprite.\n\n---------------------------------------\n\n*classchange <view id>,<type>;\n\nThis command is very ancient, it's origins are clouded in mystery. \nIt will send a 'display id change' packet to everyone in the immediate \narea of the NPC object, which will supposedly make the NPC look like a \ndifferent sprite, an NPC sprite ID, or a monster ID. This effect is not \nstored anywhere and will not persist (Which is odd, cause it would be \nrelatively easy to make it do so) and most importantly, will not work at \nall since this command was broken with the introduction of advanced \nclasses. The code is written with the assumption that the lowest sprite \nIDs are the job sprites and the anything beyond them is monster and NPC \nsprites, but since the advanced classes rolled in, they got the ID numbers \non the other end of the number pool where monster sprites float.\n\nAs a result it is currently impossible to call this command with a valid \nview id. It will do nothing whatsoever if the view ID is below 4047. \nGetting it to run will actually just crash the client.\n\nIt could be a real gem if it can be gotten to actually do what it's \nsupposed to do, but this will only happen in a later Git revision.\n\n---------------------------------------\n\n*changesex;\n\nThis command will change the gender for the attached character's account. \nIf it was male, it will become female, if it was female, it will become \nmale. The change will be written to the character server, the player will \nreceive the message: \"Need disconnection to perform change-sex request...\" \nand the player will be immediately kicked to the login screen. When they \nlog back in, they will be the opposite sex.\n\nIf there are any Dancer/Gypsy or Bard/Clown characters on the account, \nthey will also have their skills reset upon 'changesex'.\n\n---------------------------------------\n\n*getexp <base xp>,<job xp>;\n\nThis command will give the invoking character a specified number of base \nand job experience points. Should be used as a quest reward. Negative values \nwon't work.\nIs subject to EXP bonuses and to the `quest_exp_rate` config option.\n\n	getexp 10000,5000;\n\nYou can also assign directly to the parameters defined in 'db/const.txt':\n\n	BaseExp += 10000;\n	JobExp += 5000;\n\nYou can also reduce the amount of experience points:\n\n	BaseExp -= 10000;\n\nWhen setting the parameters directly no bonuses or config options are applied.\n\n---------------------------------------\n\n*setlook <look type>,<look value>;\n*changelook <look type>,<look value>;\n\n'setlook' will alter the look data for the invoking character. It is used \nmainly for changing the palette used on hair and clothes: you specify \nwhich look type you want to change, then the palette you want to use. Make \nsure you specify a palette number that exists/is usable by the client you \nuse. 'changelook' works the same, but is only client side (it doesn't save \nthe look value).\n\n	// This will change your hair(6), so that it uses palette 8, what ever \n	// your palette 8 is, your hair will use that color.\n\n	setlook VAR_HEADPALETTE, 8;\n\n	// This will change your clothes(7), so they are using palette 1, \n	// whatever your palette 1 is, your clothes will then use that set of \n	// colors.\n\n	setlook VAR_BODYPALETTE,1;\n\nHere are the possible look types:\n\n  0 - LOOK_BASE           Base sprite\n  1 - LOOK_HAIR           Hairstyle\n  2 - LOOK_WEAPON         Weapon\n  3 - LOOK_HEAD_BOTTOM    Head bottom\n  4 - LOOK_HEAD_TOP       Head top\n  5 - LOOK_HEAD_MID       Head mid\n  6 - LOOK_HAIR_COLOR     Hair color\n  7 - LOOK_CLOTHES_COLOR  Clothes color\n  8 - LOOK_SHIELD         Shield\n  9 - LOOK_SHOES          Shoes\n 10 - LOOK_BODY           Body(N/A)\n 11 - LOOK_FLOOR          FLOOR(N/A)\n 12 - LOOK_ROBE           Robe\n\nWhatever 'shoes' means is anyone's guess, ask Gravity - the client does \nnothing with this value. It still wants it from the server though, so it \nis kept, but normally doesn't do a thing.\n \nOnly the look data for hairstyle, hair color and clothes color are saved \nto the char server's database and will persist. The rest freely change as \nthe character puts on and removes equipment, changes maps, logs in and out \nand otherwise you should not expect to set them. In fact, messing with \nthem is generally hazardous, do it at your own risk, it is not tested \nwhat will this actually do - it won't cause database corruption and \nprobably won't cause a server crash, but it's easy to crash the client \nwith just about anything unusual.\n\nHowever, it might be an easy way to quickly check for empty view IDs for \nsprites, which is essential for making custom headgear. \n\nSince a lot of people have different palettes for hair and clothes, it's \nimpossible to tell you what all the color numbers are. If you want a \nserious example, there is a Stylist script inside the default Hercules \ninstallation that you can look at: 'npc/custom/stylist.txt'\n\n---------------------------------------\n\n*pushpc <direction>,<cells>;\n\nThis command will push the currently attached player to given direction by \ngiven amount of square cells. Direction is the same as used when declaring \nNPCs, and can be specified by using one of the DIR_* constants \n(db/const.txt).\n\nThe knock-back is not restricted by items or map flags, only obstacles are \ntaken into account. If there is not enough space to perform the push (e.g. \ndue to a wall), the character is pushed only up to the obstacle.\n\n	// pushes the character 5 cells in 3 o'clock direction from it's\n	// current position.\n	pushpc DIR_EAST, 5;\n\n---------------------------------------\n\n*get_version()\n\nThis command will return the SVN revision number or Git SHA-1 hash the \nserver is currently running on (depends on whether you used a SVN or Git \nclient for getting Hercules).\n\n	if ( get_version() >= 15000 )\n		mes \"Welcome to Hercules!\";\n		\n---------------------------------------\n\n*montransform <monster id>,<duration>{,<sc_type>{,<val1>{,<val2>{,<val3>{,<val4>}}}}}; \n*montransform \"<monster name>\",<duration>{,<sc_type>{,<val1>{,<val2>{,<val3>{,<val4>}}}}}; \n\nThis command can transform your character into monster and you can still\nuse all your skills like a normal character.\nCan only be removed when your killed or if you die or if duration is over.\n\nfor sc_type,val1,val2,val3,val4, see 'sc_start','sc_start2','sc_start4' commands.\n\n---------------------------------------\n//=====================================\n4.1 - Player Item-Related Commands\n//=====================================\n---------------------------------------\n\n*getitem <item id>,<amount>{,<account ID>};\n*getitem \"<item name>\",<amount>{,<account ID>};\n\nThis command will give a specific amount of specified items to the target \ncharacter. If the character is not online, nothing will happen.\nIf <account ID> is not specified, items will be created in the invoking \ncharacter inventory instead.\n\nIn the first and most commonly used version of this command, items are \nreferred to by their database ID number found in 'db/(pre-)re/item_db.txt'.\n\n	getitem 502,10 // The person will receive 10 apples\n	getitem 617,1  // The person will receive 1 Old Violet Box\n\nGiving an item ID of -1 will give a specified number of random items from \nthe list of those that fall out of Old Blue Box. Unlike in all other \ncases, these will be unidentified, if they turn out to be equipment. This \nis exactly what's written in the Old Blue Box's item script.\n\nOther negative IDs also correspond to other random item generating item \ntables:\n\nGiving an item ID of -2 will produce the effects of Old Violet Box.\nGiving an item ID of -3 will produce the effects of Old Card Album.\nGiving an item ID of -4 will produce the effects of Gift Box.\nGiving an item ID of -5 will produce the effects of Worn Out Scroll, \nwhich, in current Git, drops only Jellopies anyway.\n\nThis transaction is logged if the log script generated transactions option \nis enabled.\n\nYou may also create an item by it's name in the 'english name' field in \nthe item database:\n\n	getitem \"RED_POTION\",10;\n\nWhich will do what you'd expect. If it can't find that name in the \ndatabase, apples will be created anyway. It is often a VERY GOOD IDEA to \nuse it like this.\n\nThis is used in pretty much all NPC scripts that have to do with items and \nquite a few item scripts. For more examples check just about any official \nscript.\n\n---------------------------------------\n\n*getitem2 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};\n*getitem2 \"<item name>\",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};\n\nThis command will give an amount of specified items to the invoking \ncharacter. If an optional account ID is specified, and the target \ncharacter is currently online, items will be created in their inventory \ninstead. If they are not online, nothing will happen. It works essentially \nthe same as 'getitem' (it even works for negative ID numbers the same way) \nbut is a lot more flexible.\n\nThose parameters that are different from 'getitem' are:\n\nidentify	- Whether you want the item to be identified (1) or not (0).\nrefine		- For how many pluses will it be refined. It will not let you \n			  refine an item higher than the max refine.\nattribute	- Whether the item is broken (1) or not (0).\ncard1,2,3,4	- If you want a card compound to it, place the card ID number \n			  into the specific card slot.\n\nCard1-card4 values are also used to store name information for named \nitems, as well as the elemental property of weapons and armor. You can \ncreate a named item in this manner, however, if you just need a named \npiece of standard equipment, it is much easier to the 'getnameditem' \nfunction instead.\n\nYou will need to keep these values if you want to destroy and then \nperfectly recreate a named item, for this see 'getinventorylist'.\n\nIf you still want to try creating a named item with this command because \n'getnameditem' won't do it for you cause it's too limited, you can do it \nlike this. Careful, minor magic ahead.\n\n	// First, let's get an ID of a character who's name will be on the \n	// item. Only an existing character's name may be there.\n	// Let's assume our character is 'Adam' and find his ID.\n\n	.@charid = getcharid(0,\"Adam\");\n\n	// Now we split the character ID number into two portions with a \n	// binary shift operation. If you don't understand what this does, \n	// just copy it.\n\n	.@card3 = .@charid & 65535;\n	.@card4 = .@charid >> 16;\n\n	// If you're inscribing non-equipment, .@card1 must be 254.\n	// Arrows are also not equipment. :)\n	.@card1 = 254;\n\n	// For named equipment, card2 means the Star Crumbs and elemental \n	// crystals used to make this equipment. For everything else, it's 0.\n\n	.@card2 = 0;\n\n	// Now, let's give the character who invoked the script some \n	// Adam's Apples:\n\n	getitem2 512,1,1,0,0,.@card1,.@card2,.@card3,.@card4;\n\nThis wasn't tested with all possible items, so I can't give any promises, \nexperiment first before relying on it.\n\nTo create equipment, continue this example it like this:\n\n	// We've already have card3 and card4 loaded with correct\n	// values so we'll just set up card1 and card2 with data\n	// for an Ice Stiletto.\n\n	// If you're inscribing equipment, .@card1 must be 255.\n	.@card1 = 255;\n\n	// That's the number of star crumbs in a weapon.\n	.@sc = 2;\n\n	// That's the number of elemental property of the weapon.\n	.@ele = 1;\n\n	// And that's the wacky formula that makes them into\n	// a single number.    \n	.@card2 = .@ele+((.@sc*5)<<8);\n\n	// That will make us an Adam's +2 VVS Ice Stiletto:\n\n	getitem2 1216,1,1,2,0,.@card1,.@card2,.@card3,.@card4;\n\nExperiment with the number of star crumbs - I'm not certain just how much \nwill work most and what it depends on. The valid element numbers are:\n\n 1 - Ice, 2 - Earth 3 - Fire 4 - Wind.\n\nYou can, apparently, even create duplicates of the same pet egg with this \ncommand, creating a pet which is the same, but simultaneously exists in \ntwo eggs, and may hatch from either, although, I'm not sure what kind of a \nmess will this really cause.\n\n---------------------------------------\n*getitembound <item id>,<amount>,<bound type>{,<account ID>};\n*getitembound \"<item name>\",<amount>,<bound type>{,<account ID>};\n\nThis command behaves identically to 'getitem', but the items created will be\nbound to the target character as specified by the bound type. All items created\nin this manner cannot be dropped, sold, vended, auctioned, or mailed, and in\nsome cases cannot be traded or stored.\n\nValid bound types are:\n 1 - Account Bound\n 2 - Guild Bound\n 3 - Party Bound\n 4 - Character Bound\n\n---------------------------------------\n\n*getitembound2 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<bound type>;\n*getitembound2 \"<item name>\",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<bound type>;\n\nThis command behaves identically to 'getitem2', but the items created will be\nbound to the target character as specified by the bound type. All items created\nin this manner cannot be dropped, sold, vended, auctioned, or mailed, and in\nsome cases cannot be traded or stored.\n\nFor a list of bound types see 'getitembound'.\n\n---------------------------------------\n\n*countbound({<bound type>})\n\nThis function will return the number of bounded items in the character's\ninventory, and sets an array @bound_items[] containing all item IDs of the\ncounted items. If a bound type is specified, only those items will be counted.\n\nFor a list of bound types see 'getitembound'.\n\nExample:\n	mes \"You currently have \"+countbound()+\" bounded items.\";\n	next;\n	mes \"The list of bounded items include:\";\n	for (.@i = 0; .@i < getarraysize(@bound_items); ++.@i)\n		mes getitemname(@bound_items[.@i]);\n	close;\n\n---------------------------------------\n\n*checkbound(<item_id>{,<bound_type>{,<refine>{,<attribute>{,<card_1>{,<card_2>{,<card_3>{,<card_4>}}}}}}});\n\nThis command allows you to check whether or not the attached player has the specified bound item in their inventory.\nIf a bound type is not specified or a bound type of 0 is used, it will search the player's inventory for a bound item\nof any type, so long as the other parameters match. In all cases, this command will return the bound type of the\nitem found, or 0 if the specified item was not found.\n\nValid bound types are:\n 0 - All Bound types.\n 1 - Account Bound\n 2 - Guild Bound\n 3 - Party Bound\n 4 - Character Bound\n\nOptional Parameters:\n bound_type - checks to see if the item has the specified bound type.\n refine - checks to see if the item is refined to the given number.\n attribute - whether the item is broken (1) or not (0).\n card 1,2,3,4 - checks to see if the specified cards are compounded on the item as well.\n\nExample:\n	// This will check if you have a bound (any type) 1205 (Cutter).\n	if (checkbound(1205)) {\n		mes \"You have a bound Cutter\";\n	} else {\n		mes \"You do not have a bound Cutter\";\n	}\n	close;\n	\n	// This will also check if you have a bound (any type) 1205 (Cutter).\n	if (checkbound(1205,0)) {\n		mes \"You have a bound Cutter\";\n	} else {\n		mes \"You do not have a bound Cutter\";\n	}\n	close;\n	\n	// This will check if the player doesn't have a bound 1205 (Cutter).\n	if (!checkbound(1205)) {\n		mes \"You do not have a bound Cutter\";\n	} else {\n		mes \"You do have a bound Cutter\";\n	}\n	close;\n	\n	// This will check if the item found, has a bound type of 2 (guild_bound)\n	if (checkbound(1205) == 2) {\n		mes \"You have a guild_bound Cutter\";\n	} else {\n		mes \"You do not have a guild_bound Cutter.\";\n	}\n	close;\n	\n	// This will check if you have a 'guild_bound' +7 1205 (Cutter).\n	if (checkbound(1205, 2, 7)) {\n		mes \"You have a +7 guild_bound Cutter.\";\n	} else {\n		mes \"You don't have the required item.\";\n	}\n	close;\n---------------------------------------\n\n*getnameditem <item id>,<character name|character ID>;\n*getnameditem \"<item name>\",<character name|character ID>;\n\nCreate an item signed with the given character's name. \n\nThe command returns 1 when the item is created successfully, or 0 if it \nfails. Failure occurs when:\n- There is no player attached.\n- Item name or ID is not valid.\n- The given character ID/name is offline.\n\nExample:\n\n//This will give the currently attached player a Aaron's Apple (if Aaron \n//is online).\n	getnameditem \"Apple\",\"Aaron\";\n	\n//Self-explanatory (I hope).\n	if (getnameitem(\"Apple\",\"Aaron\")) {\n		mes \"You now have a Aaron's Apple!\";\n	}\n\n---------------------------------------\n\n*rentitem <item id>,<time>;\n*rentitem \"<item name>\",<time>;\n\nCreates a rental item in the attached character's inventory. The item will \nexpire in <time> seconds and be automatically deleted. When receiving a \nrental item, the character will receive a message in their chat window. \nThe character will also receive warning messages in their chat window \nbefore the item disappears.\n\nThis command can not be used to rent stackable items. Rental items cannot \nbe dropped, traded, sold to NPCs, or placed in guild storage (i.e. trade \nmask 75).\nNote: 'delitem' in an NPC script can still remove rental items.\n\n---------------------------------------\n\n*makeitem <item id>,<amount>,\"<map name>\",<X>,<Y>;\n*makeitem \"<item name>\",<amount>,\"<map name>\",<X>,<Y>;\n\nThis command will create an item lying around on a specified map in the \nspecified location.\n\n	itemid   - Found in 'db/(pre-)re/item_db.txt'\n	amount   - Amount you want produced\n	map name - The map name\n	X        - The X coordinate\n	Y        - The Y coordinate.\n\nThis item will still disappear just like any other dropped item. Like \n'getitem', it also accepts an 'english name' field from the database and \ncreates apples if the name isn't found.\nIf the map name is given as \"this\", the map the invoking character is on \nwill be used.\n\n---------------------------------------\n\n*cleanarea \"<map name>\",<x1>,<y1>,<x2>,<y2>;\n*cleanmap \"<map name>\";\n\nThese commands will clear all items lying on the ground on the specified \nmap, either within the x1/y1-x2/y2 rectangle or across the entire map.\n\n---------------------------------------\n\n*searchitem <array name>,\"<item name>\";\n\nThis command will fill the given array with the ID of items whose name \nmatches the given one. It returns the number of items found. For \nperformance reasons, the results array is limited to 10 items.\n\n	mes \"What item are you looking for?\";\n	input .@name$;\n	.@qty = searchitem(.@matches[0],.@name$);\n	mes \"I found \"+.@qty+\" items:\";\n	for (.@i = 0; .@i < .@qty; ++.@i)\n		//Display name (eg: \"Apple[0]\")\n		mes getitemname(.@matches[.@i])+\"[\"+getitemslots(.@matches[.@i])+\"]\";\n\n---------------------------------------\n\n*delitem <item id>,<amount>{,<account ID>};\n*delitem \"<item name>\",<amount>{,<account ID>};\n\nThis command will remove a specified amount of items from the invoking or \ntarget character. Like all the item commands, it uses the item ID found \ninside 'db/(pre-)re/item_db.txt'.\n\n	delitem 502,10; // The person will lose 10 apples\n	delitem 617,1;  // The person will lose 1 Old Violet Box\n\nIt is always a good idea to check if the player actually has the items \nbefore you delete them. If you try to delete more items that the player \nhas, the player will lose the ones he/she has and the script will be \nterminated with an error.\n\nLike 'getitem' this command will also accept an 'english name' field from \nthe database. If the name is not found, nothing will be deleted.\n\n---------------------------------------\n\n*delitem2 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};\n*delitem2 \"<item name>\",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};\n\nThis command will remove a specified amount of items from the invoking or \ntarget character.\nCheck 'getitem2' to understand its expanded parameters.\n\n---------------------------------------\n\n*countitem(<item id>)\n*countitem(\"<item name>\")\n\nThis function will return the number of items for the specified item ID \nthat the invoking character has in the inventory.\n\n	mes \"[Item Checker]\";\n	mes \"Hmmm, it seems you have \"+countitem(502)+\" apples\";\n	close;\n\nLike 'getitem', this function will also accept an 'english name' from the \ndatabase as an argument.\n\nIf you want to state the number at the end of a sentence, you can do it by \nadding up strings:\n\n	mes \"[Item Checker]\";\n	mes \"Hmmm, the total number of apples you are holding is \"+countitem(\"APPLE\");\n	close;\n\n---------------------------------------\n\n*countitem2(<item id>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>)\n*countitem2(\"<item name>\",<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>)\n\nExpanded version of 'countitem' function, used for created/carded/forged \nitems.\n\nThis function will return the number of items for the specified item ID \nand other parameters that the invoking character has in the inventory.\nCheck 'getitem2' to understand the arguments of the function.\n	\n---------------------------------------\n\n*groupranditem <item_id/constant>;\n\nReturns the item_id of a random item picked from the item container specified. There\nare different item containers and they are specified in 'db/(pre-)re/item_group.conf'.\n\nExample:\n   getitem groupranditem 603,1;\n   getitem groupranditem Old_Blue_Box,1;\n\n---------------------------------------\n\n*getrandgroupitem <item_id/constant>,<quantity>;\n\nSimilar to the above example, this command allows players to obtain the specified\nquantity of a random item from the container. The different containers\nare specified in 'db/(pre-)re/item_group.conf'.\n\nExample:\n   getrandgroupitem Old_Blue_Box,1;\n   getrandgroupitem 603,1;\n\n---------------------------------------\n\n*packageitem\n\nThis command has only 1 param which is optional. If the package item_id is not provided, it\nwill try to use the item id from the item it is being used from (if called from an item script). \nIt runs a item package and grants the items accordingly to the attached player.\n\nExample:\n\n/* This example is an item script from the item db */\n	{\n		Id: 12477\n		AegisName: \"Gift_Bundle\"\n		Name: \"Gift Bundle\"\n		Type: 2\n		Buy: 0\n		Script: <\" packageitem(); \">\n	},\n\n---------------------------------------\n\n*enable_items;\n*disable_items;\n\nThese commands enable/disable changing of equipments while an NPC is \nrunning. When disable_items is run, equipments cannot be changed during \nscripts until enable_items is called or the script has terminated. To \navoid possible exploits, when disable_items is invoked, it will only \ndisable changing equips while running that script in particular. Note that \nif a different script also calls disable_items, it will override the last \ncall (so you may want to call this command at the start of your script \nwithout assuming the effect is still in effect).\nIf 'item_enabled_npc' option is set to Yes in 'items.conf' all NPC are \nallowing changing of equipment by default except for those have been set \nwith 'disable_items'.\n\n---------------------------------------\n\n*itemskill <skill id>,<skill level>,{flag};\n*itemskill \"<skill name>\",<skill level>,{flag};\n\nThis command meant for item scripts to replicate single-use skills in \nusable items. It will not work properly if there is a visible dialog \nwindow or menu.\nIf the skill is self or auto-targeting, it will be used immediately. \nOtherwise, a target cursor is shown.\nFlag is a optional param and, when present, the command will not check for \nskill requirements.\n\n// When Anodyne is used, it will cast Endure (8), Level 1, as if the \n// actual skill has been used from skill tree.\n605,Anodyne,Anodyne,11,2000,0,100,,,,,10477567,2,,,,,{ itemskill 8,1; },{}\n\n---------------------------------------\n\n*itemeffect <item id>;\n*itemeffect \"<item name>\";\n*consumeitem is an alias of itemeffect (added for compatibility)\n\nThis command will run the item script of the specified item on the \ninvoking character. The character does not need to posess the item, and \nthe item will not be deleted. While this command is intended for usable \nitems, it will run for any item type.\n\n---------------------------------------\n\n*produce <item level>;\n\nThis command will open a crafting window on the client connected to the \ninvoking character. The 'item level' is a number which determines what \nkind of a crafting window will pop-up. \n\nYou can see the full list of such item levels in 'db/produce_db.txt' which \ndetermines what can actually be produced. The window will not be empty \nonly if the invoking character can actually produce the items of that type \nand has the appropriate raw materials in their inventory.\n\nThe success rate to produce the item is the same as the success rate of \nthe skill associated with the item level. If there is no skill id, the \nsuccess rate will be 50%.\n\nValid item levels are:\n\n 1   - Level 1 Weapons\n 2   - Level 2 Weapons\n 3   - Level 3 Weapons\n 21  - Blacksmith's Stones and Metals\n 22  - Alchemist's Potions, Holy Water, Assassin Cross's Deadly Poison\n 23  - Elemental Converters\n\n---------------------------------------\n\n*cooking <dish level>;\n\nThis command will open a produce window on the client connected to the \ninvoking character. The 'dish level' is the number which determines what \nkind of dish level you can produce. You can see the full list of dishes \nthat can be produced in 'db/produce_db.txt'.\n\nThe window will be shown empty if the invoking character does not have \nenough of the required incredients to cook a dish.\n\nValid dish levels are:\n\n11 - Level 1 Dish\n12 - Level 2 Dish\n13 - Level 3 Dish\n14 - Level 4 Dish\n15 - Level 5 Dish\n16 - Level 6 Dish\n17 - Level 7 Dish\n18 - Level 8 Dish\n19 - Level 9 Dish\n20 - Level 10 Dish\n\nAlthough it's required to set a dish level, it doesn't matter if you set \nit to 1 and you want to cook a level 10 dish, as long as you got the \nrequired ingredients to cook the dish the command works.\n\n---------------------------------------\n\n*makerune <% success bonus>;\n\nThis command will open a rune crafting window on the client connected to \nthe invoking character. Since this command is officially used in rune \nores, a bonus success rate must be specified (which adds to the base \nformula).\n\nYou can see the full list of runes that can be produced in \n'db/produce_db.txt'. The window will not be empty only if the invoking \ncharacter can actually produce a rune and has the appropriate raw \nmaterials in their inventory.\n\n---------------------------------------\n\n*successremovecards <equipment slot>;\n\nThis command will remove all cards from the item found in the specified \nequipment slot of the invoking character, create new card items and give \nthem to the character. If any cards were removed in this manner, it will \nalso show a success effect.\n\n---------------------------------------\n\n*failedremovecards <equipment slot>,<type>;\n\nThis command will remove all cards from the item found in the specified \nequipment slot of the invoking character. 'type' determines what happens \nto the item and the cards:\n\n 0 - will destroy both the item and the cards.\n 1 - will keep the item, but destroy the cards.\n 2 - will keep the cards, but destroy the item.\n  \nWhatever the type is, it will also show a failure effect on screen.\n\n---------------------------------------\n\n*repair <broken item number>;\n\nThis command repairs a broken piece of equipment, using the same list of \nbroken items as available through 'getbrokenid'.\n\nThe official scripts seem to use the repair command as a function instead: \n'repair(<number>)' but it returns nothing on the stack. Probably only \nValaris, who made it, can answer why is it so.\n\n---------------------------------------\n\n*repairall;\n\nThis command repairs all broken equipment in the attached player's \ninventory. A repair effect will be shown if any items are repaired, else \nthe command will end silently.\n\n---------------------------------------\n\n*successrefitem <equipment slot>{,<upgrade_count>};\n\nThis command will refine an item in the specified equipment slot of the \ninvoking character by +1 (unless <upgrade_count> is specified).\nFor a list of equipment slots see 'getequipid'. \nThis command will also display a 'refine success' \neffect on the character and put appropriate messages into their chat \nwindow. It will also give the character fame points if a weapon reached \n+10 this way, even though these will only take effect for blacksmith who \nwill later forge a weapon.\n\n---------------------------------------\n\n*failedrefitem <equipment slot>;\n\nThis command will fail to refine an item in the specified equipment slot \nof the invoking character. The item will be destroyed. This will also \ndisplay a 'refine failure' effect on the character and put appropriate \nmessages into their chat window.\n\n---------------------------------------\n\n*downrefitem <equipment slot>{,<downgrade_count>};\n\nThis command will downgrade an item by - 1 (unless optional <downgrade_count> is provided)\nin the specified equipment slot  of the invoking character.\nSo the item will not be destroyed unlike in the \nfailedrefitem script command. This will also display a 'refine failure' \neffect on the character and put appropriate messages into their chat \nwindow.\n\n---------------------------------------\n\n*unequip <equipment slot>;\n\nThis command will unequip whatever is currently equipped in the invoking \ncharacter's specified equipment slot. For a full list of possible \nequipment slots see 'getequipid'.\n\nIf an item occupies several equipment slots, it will get unequipped from \nall of them.\n\n---------------------------------------\n\n*clearitem;\n\nThis command will destroy all items the invoking character has in their \ninventory (including equipped items). It will not affect anything else, \nlike storage or cart.\n\n---------------------------------------\n\n*equip <item id>;\n*equip2 <item id>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>;\n*autoequip <item id>,<option>;\n\nThese commands are to equip a equipment on the attached character. \nThe equip function will equip the item ID given when the player has this \nitem in his/her inventory, while the autoequip function will equip the \ngiven item ID when this is looted. The option parameter of the autoequip \nis 1 or 0, 1 to turn it on, and 0 to turn it off.\n\nExamples:\n\n//This will equip a 1104 (falchion) on the character if this is in the \n//inventory.\n	equip 1104;\n\n//This will equip a +10 1104 (falchion) on the character if this is in the\n//inventory.\n	equip2 1104,10,0,0,0,0,0;\n\n//The invoked character will now automatically equip a falchion when it's \n//looted.\n	autoequip 1104,1;\n	\n//The invoked character will no longer automatically equip a falchion.\n	autoequip 1104,0;\n\n---------------------------------------\n\n*buyingstore <slots>;\n\nInvokes buying store preparation window like the skill 'Open Buying \nStore', without the item requirement. Amount of slots is limited by the \nserver to a maximum of 5 slots by default.\n\nExample:\n\n	// Gives the player opportunity to buy 4 different kinds of items.\n	buyingstore 4;\n\n---------------------------------------\n\n*searchstores <uses>,<effect>;\n\nInvokes the store search window, which allows to search for both vending \nand buying stores. Parameter uses indicates, how many searches can be \nstarted, before the window has to be reopened. Effect value affects what \nhappens when a result item is double-clicked and can be one of the\nfollowing:\n\n	0 = Shows the store's position on the mini-map and highlights the shop \n		sign with yellow color, when the store is on same map as the \n		invoking player.\n	1 = Directly opens the shop, regardless of distance.\n\nExample:\n\n	// Item Universal_Catalog_Gold (10 uses, effect: open shop)\n	searchstores 10,1;\n\n---------------------------------------\n\n*delequip <equipment slot>;\n\nThis command will destroy whatever is currently equipped in the invoking\ncharacter's specified equipment slot. For a full list of possible equipment \nslots see 'getequipid'.\n\nIt is always a good idea to check if the player actually has the item you want \nbefore you use this command. If you try to delete in a position that the player \nhas no gear, script will be terminated with an error.\n\n---------------------------------------\n//=====================================\n4.1 - End of Player Item-Related Commands\n//=====================================\n---------------------------------------\n\n*openstorage;\n\nThis will open character's Kafra storage window on the client connected to \nthe invoking character. It can be used from any kind of NPC or item \nscript, not just limited to Kafra Staff.\n\nThe storage window opens regardless of whether there are open NPC dialogs \nor not, but it is preferred to close the dialog before displaying the \nstorage window, to avoid any disruption when both windows overlap.\n\n	mes \"I will now open your stash for you\";\n	close2;\n	openstorage;\n	end;\n\n---------------------------------------\n\n*openmail;\n\nThis will open a character's Mail window on the client connected to the \ninvoking character.\n\n	mes \"Close this window to open your mail inbox.\";\n	close2;\n	openmail;\n	end;\n\n---------------------------------------\n\n*openauction;\n\nThis will open the Auction window on the client connected to the invoking \ncharacter.\n\n	mes \"Close this window to open the Auction window.\";\n	close2;\n	openauction;\n	end;\n\n---------------------------------------\n//=====================================\n4.2 - Guild-Related Commands\n//=====================================\n---------------------------------------\n\n*guildopenstorage()\n\nThis function works the same as 'openstorage' but will open a guild \nstorage window instead for the guild storage of the guild the invoking \ncharacter belongs to. This is a function because it returns a value - 0 if \nthe guild storage was opened successfully and 1 if it wasn't. (Notice, \nit's a ZERO upon success.) \nSince guild storage is only accessible to one character at one time, it \nmay fail if another character is accessing the guild storage at the same \ntime.\n\nThis will also fail and return 2 if the attached character does not belong \nto any guild.\n\n---------------------------------------\n\n*guildchangegm(<guild id>,<new master's name>)\n\nThis function will change the Guild Master of a guild. The ID is the \nguild's id, and the new guild master's name must be passed.\n\nReturns 1 on success, 0 otherwise.\n\n---------------------------------------\n\n*guildgetexp <amount>;\n\nThis will give the specified amount of guild experience points to the \nguild the invoking character belongs to. It will silently fail if they do \nnot belong to any guild.\n\n---------------------------------------\n\n*guildskill <skill id>,<level>\n*guildskill \"<skill name>\",<level>\n\nThis command will bump up the specified guild skill by the specified \nnumber of levels. This refers to the invoking character and will only work \nif the invoking character is a member of a guild AND it's guild master, \notherwise no failure message will be given and no error will occur, but \nnothing will happen. The full list of guild skills is available in \n'db/(pre-)re/skill_db.txt', these are all the GD_ skills at the end.\nIf a level higher than the maximum is given as parameter the skill will be\nleveled to the maximum and not above.\n\n// This would give your character's guild one level of Approval \n// (GD_APPROVAL ID 10000). Notice that if you try to add two levels of \n// Approval, or add Approval when the guild already has it, it will only \n// have one level of Approval afterwards.\n	guildskill 10000,1;\n\nYou might want to make a quest for getting a certain guild skill, make it \nhard enough that all the guild needs to help or something. Doing this for \nthe Glory of the Guild skill, which allows your guild to use an emblem, is \na good idea for a fun quest. (Wasting a level point on that is really \nannoying :D)\n\n---------------------------------------\n//=====================================\n4.2 - End of Guild-Related Commands\n//=====================================\n---------------------------------------\n\n*resetlvl <action type>;\n\nThis is a character reset command, meant mostly for rebirth script \nsupporting Advanced jobs, which will reset the invoking character's stats \nand level depending on the action type given. Valid action types are:\n\n 1 - Base level 1, Job level 1, 0 skill points, 0 base exp, 0 job exp, \n	 wipes the status effects (only the ones settable by 'setoption'), \n	 sets all stats to 1. If the new job is 'Novice High', give 100 status \n	 points, give First Aid and Play Dead skills.\n 2 - Base level 1, Job level 1, 0 skill points, 0 base exp, 0 job exp. \n	 Skills and attribute values are not altered.\n 3 - Base level 1, base exp 0. Nothing else is changed.\n 4 - Job level 1, job exp 0. Nothing else is changed.\n\nIn all cases everything the character has on will be unequipped.\n\nEven though it doesn't return a value, it is used as a function in the \nofficial rebirth scripts.\n\n---------------------------------------\n\n*resetstatus;\n\nThis is a character reset command, which will reset the stats on the \ninvoking character and give back all the stat points used to raise them \npreviously. Nothing will happen to any other numbers about the character.\n\nUsed in reset NPC's (duh!).\n\n---------------------------------------\n\n*resetskill;\n\nThis command takes off all the skill points on the invoking character, so \nthey only have Basic Skill blanked out (lvl 0) left, and returns the \npoints for them to spend again. Nothing else will change but the skills. \nQuest skills will also reset if 'quest_skill_reset' option is set to Yes \nin 'battle.conf'. If the 'quest_skill_learn' option is set in there, the \npoints in the quest skills will also count towards the total.\n\nUsed in reset NPC's (duh!).\n\n---------------------------------------\n\n*sc_start 	<effect type>,<ticks>,<value 1>{,<rate>,<flag>{,<GID>}};\n*sc_start2 	<effect type>,<ticks>,<value 1>,<value 2>{,<rate>,<flag>{,<GID>}};\n*sc_start4 	<effect type>,<ticks>,<value 1>,<value 2>,<value 3>,<value 4>{,<rate>,<flag>{,<GID>}};\n*sc_end 	<effect type>{,<GID>};\n\nThese commands will bestow a status effect on a character.\n\nThe <effect type> determines which status is invoked. This can be either a number\nor constant, with the common statuses (mostly negative) found in 'db/const.txt'\nwith the 'SC_' prefix. A full list is located in 'src/map/status.h', though\nthey are not currently documented.\n\nThe duration of the status is given in <ticks>, or milleseconds.\n\nCertain status changes take an additional parameter <value 1>, which typically\nmodifies player stats by the given number or percentage. This differs for each\nstatus, and is sometimes zero.\n\nOptional value <rate> is the chance that the status will be invoked (10000 = 1%).\nThis is used primarily in item scripts. When used in an NPC script, a flag MUST\nbe defined for the rate to work.\n\nOptional value <flag> is how the status change start will be handled (a bitmask).\n SCFLAG_NONE      = 0x00: No special behavior.\n SCFLAG_NOAVOID   = 0x01: Status change cannot be avoided.\n SCFLAG_FIXEDTICK = 0x02: Tick cannot be reduced by stats (default).\n SCFLAG_LOADED    = 0x04: sc_data was loaded, no value will be altered.\n SCFLAG_FIXEDRATE = 0x08: Rate cannot be reduced.\n SCFLAG_NOICON    = 0x10: Status icon (SI) won't be shown.\n\nIf a <GID> is given, the status change will be invoked on the specified character\ninstead of the one attached to the script. This can only be defined after setting\na rate and flag.\n\n'sc_start2' and 'sc_start4' allow extra parameters to be passed, and are used only\nfor effects that require them. The meaning of the extra values vary depending on the\neffect type.\n\n'sc_end' will remove a specified status effect. If SC_ALL (-1) is given, it will\nperform a complete removal of all statuses (although permanent ones will re-apply).\n\nExamples:\n	// This will poison the invoking character for 10 minutes at 50% chance.\n	sc_start SC_POISON,600000,0,5000;\n\n	// This will bestow the effect of Level 10 Blessing.\n	sc_start 10,240000,10;\n\n	// Elemental armor defense takes the following four values:\n	// val1 is the first element, val2 is the resistance to the element val1.\n	// val3 is the second element, val4 is the resistance to the element val3.\n	sc_start4 SC_DefEle,60000,Ele_Fire,20,Ele_Water,-15;\n\n	// This will end the Freezing status for the invoking character.\n	sc_end SC_FREEZE;\n\nNote: to use SC_NOCHAT you should alter Manner\n	Manner = -5;	// Will mute a user for 5 minutes\n	Manner = 0;	// Will unmute a user\n	Manner = 5;	// Will unmute a user and prevent the next use of 'Manner'\n\n---------------------------------------\n\n*getstatus <effect type>{,<type>};\n\nRetrieve information about a specific status effect when called. Depending \non <type> specified the function will return different information.\n\nPossible <type> values:\n	- 0 or undefined: whether the status is active\n	- 1: the val1 of the status\n	- 2: the val2 of the status\n	- 3: the val3 of the status\n	- 4: the val4 of the status\n	- 5: the amount of time in milliseconds that the status has remaining\n\nIf <type> is not defined or is set to 0, then the script function will \neither return 1 if the status is active, or 0 if the status is not active. \nIf the status is not active when any of the <type> fields are provided, \nthis script function will always return 0.\n\n---------------------------------------\n\n*skilleffect <skill id>,<number>;\n*skilleffect \"<skill name>\",<number>;\n\nThis command displays visual and aural effects of given skill on currently \nattached character. The number parameter is for skill whose visual effect \ninvolves displaying of a number (healing or damaging). Note that this \ncommand will not actually use the skill: it is intended for scripts which \nsimulate skill usage by the NPC, such as buffs, by setting appropriate \nstatus and displaying the skill's effect.\n\n	mes \"Be blessed!\";\n	// Heal of 2000 HP\n	heal 2000,0;\n	skilleffect 28,2000;\n	// Blessing Level 10\n	sc_start 10,240000,10;\n	skilleffect 34,0;\n	// Increase AGI Level 5\n	sc_start 12,140000,5;\n	skilleffect 29,0;\n\nThis will heal the character with 2000 HP, buff it with Blessing Lv 10 and \nIncrease AGI Lv 5, and display appropriate effects.\n\n---------------------------------------\n\n*npcskilleffect <skill id>,<number>,<x>,<y>;\n*npcskilleffect \"<skill name>\",<number>,<x>,<y>;\n\nThis command behaves identically to 'skilleffect', however, the effect \nwill not be centered on the invoking character's sprite, nor on the NPC \nsprite, if any, but will be centered at map coordinates given on the same \nmap as the invoking character.\n\n---------------------------------------\n\n*specialeffect <effect number>{,<send_target>{,\"<NPC Name>\"}};\n\nThis command will display special effect with the given number, centered \non the specified NPCs coordinates, if any. For a full list of special \neffect numbers known see 'doc/effect_list.txt'. Some effect numbers are \nknown not to work in some client releases. (Notably, rain is absent from \nany client executables released after April 2005.)\n\n<NPC name> parameter will display <effect number> on another NPC. If the \nNPC specified does not exist, the command will do nothing. When specifying \nan NPC, <send_target> must be specified when specifying an <NPC Name>, \nspecifying AREA will retain the default behavior of the command.\n\n	// this will make the NPC \"John Doe#1\"\n	// show the effect \"EF_HIT1\" specified by\n	// Jane Doe. I wonder what John did...\n	mes \"[Jane Doe]\";\n	mes \"Well, I never!\";\n	specialeffect EF_HIT1,AREA,\"John Doe#1\";\n	close;\n\n---------------------------------------\n\n*specialeffect2 <effect number>{,<send_target>{,\"<Player Name>\"}};\n\nThis command behaves identically to the 'specialeffect', but the effect \nwill be centered on the invoking character's sprite.\n\n<Player name> parameter will display <effect number> on another Player \nthan the one currently attached to the script. Like with specialeffect, \nwhen specifying a player, <send_target> must be supplied, specifying AREA \nwill retain the default behavior of the command.\n\n---------------------------------------\n\n*statusup <stat>;\n\nThis command will bump a specified stat of the invoking character up by \none permanently using status points to do so, if there aren't enough to perform\nthe change nothing will happen.\nStats are to be given as number, but you can use these constants to replace them:\n\nbStr -  Strength\nbVit -  Vitality\nbInt -  Intelligence\nbAgi -  Agility\nbDex -  Dexterity\nbLuk -  Luck\n\n---------------------------------------\n\n*statusup2 <stat>,<amount>;\n\nThis command will bump a specified stat of the invoking character up by \nthe specified amount permanently without using status points.\nAmount can be negative. See 'statusup'.\n\n// This will decrease a character's Vit forever.\n	statusup bVit,-1;\n\n---------------------------------------\n\n*bonus <bonus type>,<val1>;\n*bonus2 <bonus type>,<val1>,<val2>;\n*bonus3 <bonus type>,<val1>,<val2>,<val3>;\n*bonus4 <bonus type>,<val1>,<val2>,<val3>,<val4>;\n*bonus5 <bonus type>,<val1>,<val2>,<val3>,<val4>,<val5>;\n\nThese commands are meant to be used in item scripts. They will probably \nwork outside item scripts, but the bonus will not persist for long. They, \nas expected, refer only to an invoking character.\n\nYou can find the full list of possible bonuses and which command to use \nfor each kind in 'doc/item_bonus.txt'.\n\n---------------------------------------\n\n*autobonus <bonus script>,<rate>,<duration>{,<flag>,{<other script>}};\n*autobonus2 <bonus script>,<rate>,<duration>{,<flag>,{<other script>}};\n*autobonus3 <bonus script>,<rate>,<duration>,<skill id>,{<other script>};\n*autobonus3 <bonus script>,<rate>,<duration>,\"<skill name>\",{<other script>};\n\nThese commands are meant to be used in item scripts. They will probably \nwork outside item scripts, but the bonus will not persist for long. They, \nas expected, refer only to an invoking character.\n\nWhat these commands do is 'attach' a script to the player which will get\nexecuted on attack (or when attacked in the case of autobonus2).\n\nRate is the trigger rate of the script (10000 = 100%). \n\nDuration is the time that the bonus will last for since the script has \ntriggered.\n\nSkill ID/skill name the skill which will be used as trigger to start the \nbonus (for autobonus3).\n\nThe optional argument 'flag' is used to classify the type of attack where \nthe script can trigger (it shares the same flags as the bAutoSpell bonus \nscript):\n\nRange criteria:\n	BF_SHORT:  Trigger on melee attack\n	BF_LONG:   Trigger on ranged attack\n	Default:   BF_SHORT+BF_LONG\nAttack type criteria:\n	BF_WEAPON: Trigger on weapon skills \n	BF_MAGIC:  Trigger on magic skills \n	BF_MISC:   Trigger on misc skills\n	Default:   BF_WEAPON\nSkill criteria:\n	BF_NORMAL: Trigger on normal attacks\n	BF_SKILL:  Trigger on skills\n	default:   If the attack type is BF_WEAPON (only) BF_NORMAL is used,\n			   otherwise BF_SKILL+BF_NORMAL is used.\n\nThe difference between the optional argument 'other script' and the 'bonus \nscript' is that, the former one triggers only when attacking (or attacked) \nand the latter one runs on status calculation as well, which makes sure, \nwithin the duration, the \"bonus\" that get lost on status calculation is \nrestored. So, 'bonus script' is technically supposed to accept \"bonus\" \ncommand only. And we usually use 'other script' to show visual effects.\n\nIn all cases, when the script triggers, the attached player will be the \none who holds the bonus. There is currently no way of knowing within this \nscript who was the other character (the attacker in autobonus2, or the \ntarget in autobonus and autobonus3).\n\n//Grants a 1% chance of starting the state \"all stats +10\" for 10 seconds \n//when using weapon or misc attacks (both melee and ranged skills) and \n//shows a special effect when the bonus is active.\n	autobonus \"{ bonus bAllStats,10; }\",10,10000,BF_WEAPON|BF_MISC,\"{ specialeffect2 EF_FIRESPLASHHIT; }\";\n\n---------------------------------------\n\n*skill <skill id>,<level>{,<flag>};\n*skill \"<skill name>\",<level>{,<flag>};\n*addtoskill <skill id>,<level>{,<flag>};\n*addtoskill \"<skill name>\",<level>{,<flag>};\n\nThese commands will give the invoking character a specified skill. This is \nalso used for item scripts.\n\nLevel is obvious. Skill id is the ID number of the skill in question as \nper 'db/(pre-)re/skill_db.txt'. It is not known for certain whether this \ncan be used to give a character a monster's skill, but you're welcome to \ntry with the numbers given in 'db/(pre-)re/mob_skill_db.txt'.\n\nFlag is 0 if the skill is given permanently (will get written with the \ncharacter data) or 1 if it is temporary (will be lost eventually, this is \nmeant for card item scripts usage.).  The flag parameter is optional, and \ndefaults to 1 in 'skill' and to 2 in 'addtoskill'.\n\nFlag 2 means that the level parameter is to be interpreted as a stackable \nadditional bonus to the skill level. If the character did not have that \nskill previously, they will now at 0+the level given.\n\n// This will permanently give the character Stone Throw \n// (TF_THROWSTONE,152), at level 1.\n	skill 152,1,0;\n\nFlag 3 is the same as flag 0 in that it saves to the database. However, \nthese skills are ignored when any action is taken that adjusts the skill \ntree (reset/job change).\n\n---------------------------------------\n\n*nude;\n\nThis command will unequip anything equipped on the invoking character.\n\nIt is not required to do this when changing jobs since 'jobchange' will \nunequip everything not equippable by the new job class anyway.\n\n---------------------------------------\n\n*disguise <Monster ID>;\n*undisguise;\n\nThis command disguises the current player with a monster sprite.\nThe disguise lasts until 'undisguise' is issued or the player logs out.\n\nExample:\n\ndisguise 1002; // Disguise character as a Poring.\nnext;\nundisguise; // Return to normal character sprite.\n\n---------------------------------------\n//=====================================\n4.3 - Marriage-Related Commands\n//=====================================\n---------------------------------------\n\n*marriage(\"<spouse name>\");\n\nThis function will marry two characters, the invoking character and the \none referred to by name given, together, setting them up as each other's \nmarriage partner. No second function call has to be issued (in current Git \nat least) to make sure the marriage works both ways. The function returns \n1 upon success, or 0 if the marriage could not be completed, either \nbecause the other character wasn't found or because one of the two \ncharacters is already married.\n\nThis will do nothing else for the marriage except setting up the spouse ID \nfor both of these characters. No rings will be given and no effects will \nbe shown.\n\n---------------------------------------\n\n*wedding;\n\nThis command will call up wedding effects - the music and confetti - \ncentered on the invoking character. Example can be found in the wedding \nscript.\n\n---------------------------------------\n\n*divorce()\n\nThis function will \"un-marry\" the invoking character from whoever they \nwere married to. Both will no longer be each other's marriage partner, \n(at least in current Git, which prevents the cases of multi-spouse \nproblems). It will return 1 upon success or 0 if the character was not \nmarried at all.\n\nThis function will also destroy both wedding rings and send a message to \nboth players, telling them they are now divorced.\n\n---------------------------------------\n//=====================================\n4.3 - End of Marriage-Related Commands\n//=====================================\n---------------------------------------\n\n*pcfollow <id>,<target id>;\n*pcstopfollow <id>;\n\nMakes a character follow or stop following someone. This command does the \nsame as the @follow command. The main difference is that @follow can use \ncharacter names, and this commands needs the Account ID for the target.\n\nExamples:\n\n// This will make Aaron follow Bullah, when both of these characters are \n// online.\n	pcfollow getcharid(3,\"Aaron\"),getcharid(3,\"Bullah\");\n	\n// Makes Aaron stop following whoever he is following.\n	pcstopfollow getcharid(3,\"Aaron\");\n	\n---------------------------------------\n\n*pcblockmove <id>,<option>;\n\nPrevents the given ID from moving when the option != 0, and 0 enables the \nID to move again. The ID can either be the GID of a monster/NPC or account \nID of a character, and will run for the attached player if zero is \nsupplied.\n\nExamples:\n\n// Prevents the current char from moving away.\n	pcblockmove getcharid(3),1;\n	\n// Enables the current char to move again.\n	pcblockmove getcharid(3),0;\n\n\n---------------------------------------\n//=====================================\n4 - End of Player-Related Commands\n//=====================================\n---------------------------------------\n\n---------------------------------------\n//=====================================\n5 - Mob / NPC Related Commands\n//=====================================\n---------------------------------------\n\n*monster     \"<map name>\",<x>,<y>,\"<name to show>\",<mob id>,<amount>{,\"<event label>\"{,<size>{,<ai>}}};\n*areamonster \"<map name>\",<x1>,<y1>,<x2>,<y2>,\"<name to show>\",<mob id>,<amount>{,\"<event label>\"{,<size>{,<ai>}}};\n\nThis command will spawn a monster on the specified coordinates on the \nspecified map. If the script is invoked by a character, a special map \nname, \"this\", will be recognized to mean the name of the map the invoking \ncharacter is located at. This command works fine in the item scripts.\n\nThe same command arguments mean the same things as described above in the \nbeginning of this document when talking about permanent monster spawns. \nMonsters spawned in this manner will not respawn upon being killed.\n\nUnlike the permanent monster spawns, if the mob id is -1, a random monster \nwill be picked from the entire database according to the rules configured \nin the server for dead branches. This will work for all other kinds of \nnon-permanent monster spawns.\n\nThe only very special thing about this command is an event label, which is \nan optional parameter. This label is written like \n'<NPC object name>::<label name>' and upon the monster being killed, it \nwill execute the script inside of the specified NPC object starting from \nthe label given. The RID of the player attached at this execution will be \nthe RID of the killing character.\n\n<size> can be:\n	0 = medium (default)\n	1 = small\n	2 = big\n	\n<ai> can be:\n	0 = none (default)\n	1 = attack/friendly\n	2 = sphere (Alchemist skill)\n	3 = flora (Alchemist skill)\n	4 = zanzou (Kagerou/Oboro skill)\n\n	monster \"place\",60,100,\"Poring\",1002,1,\"NPCNAME::OnLabel\";\n\nThe coordinates of 0,0 will spawn the monster on a random place on the \nmap. Both 'monster' and 'areamonster' return the GID of the monster \nspawned if there was ONLY ONE monster to be spawned. This is useful for \ncontrolling each of the spawned mobs with the unit* commands shown below.\nFor example:\n\n	// We'll make a poring which will automatically attack invoking player:\n	.@mobGID = monster(\"prontera\",150,150,\"Poring\",PORING,1); // PORING is defined in the mob db and its value is 1002\n	unitattack .@mobGID, getcharid(3); // Attacker GID, attacked GID\n\nThe way you can get the GID of more than only one monster is looping \nthrough all the summons to get their individual GIDs and do whatever you \nwant with them. For example:\n\n	// We want to summon .mobnumber porings which will give us a kiss\n	for (.@i = 0; .@i < .mobnumber; ++.@i) {\n		.@mobGID = monster \"map\",.x,.y,\"Kisser Poring\",PORING,1;\n		unitemote .@mobGID, e_kis;\n	}\n\nRefer to the unit* commands below.\n\nThe 'areamonster' command works much like the 'monster' command and is not \nsignificantly different, but spawns the monsters within a square defined \nby x1/y1-x2/y2.\n\nSimple monster killing script:\n\n	<NPC object definition. Let's assume you called him NPCNAME.>\n		mes \"[Summon Man]\";\n		mes \"Want to start the kill?\";\n		next;\n		if (select(\"Yes:No\") != 1) {\n			mes \"[Summon Man]\";\n			mes \"Come back later\";\n			close;\n		}\n		monster \"prontera\",0,0,\"Quest Poring\",PORING,10,\"NPCNAME::OnPoringKilled\";\n		// By using 0,0 it will spawn them in a random place.\n		mes \"[Summon Man]\";\n		mes \"Now go and kill all the Poring I summoned\";\n		// He summoned ten.\n		close;\n	OnPoringKilled:\n		++$poring_killed;\n		if ($poring_killed == 10) {\n			announce \"Summon Man: Well done all the poring are dead\",bc_self;\n			$poring_killed = 0;\n		}\n		end;\n\nFor more examples see just about any official 2-1 or 2-2 job quest script.\n\n---------------------------------------\n\n*areamobuseskill \"<map name>\",<x>,<y>,<range>,<mob id>,<skill id>,<skill level>,<cast time>,<cancelable>,<emotion>,<target type>;\n*areamobuseskill \"<map name>\",<x>,<y>,<range>,<mob id>,\"<skill name>\",<skill level>,<cast time>,<cancelable>,<emotion>,<target type>;\n\nThis command will make all monsters of the specified mob ID in the \nspecified area use the specified skill. Map name, x, and y define the \ncenter of the area, which extending <range> cells in each direction (ex: a \nrange of 3 would create a 7x7 square). The skill can be specified by skill \nID or name. <cast time> is in milliseconds (1000 = 1 second), and the rest \nshould be self-explanatory. \n\n<target type> can be: \n	0 = self\n	1 = the mob's current target\n	2 = the mob's master\n	3 = random target\n\nExample:\n\n	// spawn 1 Shining Plant in the 5x5 area centered on (155,188)\n	areamonster \"prontera\",153,186,157,190,\"Shining Plant\",1083,1;\n	// make the plant cast level 10 Cold Bolt on a random target\n	areamobuseskill \"prontera\",155,188,2,1083,\"MG_COLDBOLT\",10,3000,1,e_gg,3;\n\n---------------------------------------\n\n*killmonster \"<map name>\",\"<event label>\"{,<type>};\n\nThis command will kill all monsters that were spawned with 'monster' or \n'addmonster' and have a specified event label attached to them. Commonly \nused to get rid of remaining quest monsters once the quest is complete.\n\nIf the label is given as \"All\", all monsters which have their respawn \ntimes set to -1 (like all the monsters summoned with 'monster' or \n'areamonster' script command, and all monsters summoned with GM commands, \nbut no other ones - that is, all non-permanent monsters) on the specified \nmap will be killed regardless of the event label value.\n\nkillmonster supports an optional argument type. Using 1 for type will make \nthe command fire \"OnMyMobDead\" events from any monsters that do die as a \nresult of this command.\n\n---------------------------------------\n\n*killmonsterall \"<map name>\"{,<type>};\n\nThis command will kill all monsters on a specified map name, regardless of \nhow they were spawned or what they are without triggering any event label \nattached to them, unless you specify 1 for type parameter. In this case, \nmob death labels will be allowed totrigger when there is no player. Any \nother number for this parameter won't be recognized.\n\n---------------------------------------\n\n*strmobinfo(<type>,<monster id>);\n\nThis function will return information about a monster record in the \ndatabase, as per 'db/(pre-)re/mob_db.txt'. Type is the kind of information \nreturned. Valid types are:\n\n 1 - 'english name' field in the database, a string.\n 2 - 'japanese name' field in the database, a string.\n	 All other returned values are numbers:\n 3 - Level.\n 4 - Maximum HP.\n 5 - Maximum SP.\n 6 - Experience reward.\n 7 - Job experience reward.\n\n---------------------------------------\n\n*mobcount(\"<map name>\",\"<event label>\")\n\nThis function will count all the monsters on the specified map that have a \ngiven event label and return the number or 0 if it can't find any. \nNaturally, only monsters spawned with 'monster' and 'areamonster' script \ncommands can have non-empty event label.\nIf you pass this function an empty string for the event label, it will \nreturn the total count of monster without event label, including \npermanently spawning monsters.\n\nWith the dynamic mobs system enabled, where mobs are not kept in memory \nfor maps with no actual people playing on them, this will return a 0 for \nany such map.\n\nIf the event label is given as \"all\", all monsters will be counted, \nregardless of having any event label attached.\n\nIf the map name is given as \"this\", the map the invoking character is on \nwill be used. If the map is not found, or the invoker is not a character \nwhile the map is \"this\", it will return -1.\n\n---------------------------------------\n\n*clone \"<map name>\",<x>,<y>,\"<event>\",<char id>{,<master_id>{,<mode>{,<flag>,<duration>}}}\n\nThis command creates a monster which is a copy of another player. The \nfirst four arguments serve the same purpose as in the monster script \ncommand, The <char id> is the character id of the player to clone (player \nmust be online).\nIf <master id> is given, the clone will be a 'slave/minion' of it. \nMaster_id must be a character id of another online player.\n\nThe mode can be specified to determine the behavior of the clone, its \nvalues are the same as the ones used for the mode field in the mob_db. The \ndefault mode is aggressive, assists, can move, can attack.\n\nFlag can be either zero or one currently. If zero, the clone is a normal \nmonster that'll target players, if one, it is considered a summoned \nmonster, and as such, it'll target other monsters. Defaults to zero.\n\nThe duration specifies how long the clone will live before it is \nauto-removed. Specified in seconds, defaults to no limit (zero).\n\nReturned value is the monster ID of the spawned clone. If command fails, \nreturned value is zero.\n\n---------------------------------------\n\n*summon \"Monster name\",<monster id>{,<Time Out>{,\"event label\"}};\n\nThis command will summon a monster. (see also 'monster') Unlike monsters \nspawned with other commands, this one will set up the monster to fight to \nprotect the invoking character. Monster name and mob id obey the same \nrules as the one given at the beginning of this document for permanent \nmonster spawns with the exceptions mentioned when describing 'monster' \ncommand.\n\nThe effect for the skill 'Call Homunculus' will be displayed centered on \nthe invoking character.\n\nTimeout is the time in milliseconds the summon lives, and is set default \nto 60000 (1 minute). Note that also the value 0 will set the timer to \ndefault, and it is not possible to create a spawn that lasts forever.\nIf an event label is given, upon the monster being killed, the event label \nwill run as if by 'donpcevent'.\n\n// Will summon a dead branch-style monster to fight for the character.\nsummon \"--ja--\",-1;\n\n---------------------------------------\n\n*homevolution;\n\nThis command will try to evolve the current player's homunculus.\nIf it doesn't work, the /swt emotion is shown.\n\nTo evolve a homunculus, the invoking player must have a homunculus, the \nhomunculus must not be the last evolution and the homunculus must have \nabove 91000 intimacy with its owner.\n\n---------------------------------------\n\n*gethominfo(<type>)\n\nThis function works as a direct counterpart of 'getpetinfo':\n 0 - Homunculus unique ID\n 1 - Homunculus Class\n 2 - Name\n 3 - Friendly level (intimacy score). 100000 is full loyalty.\n 4 - Hungry level. 100 is completely full.\n 5 - Rename flag. 0 means this homunculus has not been named yet.\n 6 - Homunculus level\n\n---------------------------------------\n\n*morphembryo;\n\nThis command will try to put the invoking player's Homunculus in an\nuncallable state, required for mutation into a Homunculus S. The player\nwill also receive a Strange Embryo (ID 6415) in their inventory if\nsuccessful, which is deleted upon mutation.\n\nThe command will fail if the invoking player does not have an evolved\nHomunculus at level 99 or above. The /swt emotion is shown upon failure.\n\nReturns 1 upon success and 0 for all failures.\n\n---------------------------------------\n\n*hommutate {<ID>};\n\nThis command will try to mutate the invoking player's Homunculus into\na Homunculus S. The Strange Embryo (ID 6415) is deleted upon success.\n\nThe command will fail if the invoking player does not have an evolved\nHomunculus at level 99 or above, if it is not in the embryo state\n(from the 'morphembryo' command), or if the invoking player does not\npossess a Strange Embryo. The /swt emotion is shown upon failure.\n\nIf the optional parameter <ID> is set, the invoking player's Homunculus\nwill change into the specified Homunculus ID. Otherwise, a random Homunculus S\nwill be chosen. See 'db/homunculus_db.txt' for a full list of IDs.\n\nReturns 1 upon success and 0 for all failures.\n\n---------------------------------------\n\n*checkhomcall()\n\nThis function checks if the attached player's Homunculus is active,\nand will return the following values:\n -1: The player has no Homunculus.\n  0: The player's Homunculus is active.\n  1: The player's Homunculus is vaporized.\n  2: The player's Homunculus is in morph state.\n\n---------------------------------------\n\n*unitwalk <GID>,<x>,<y>;\n*unitwalk <GID>,<target_GID>;\n\nThis is one command, but can be used in two ways. If only the first \nargument is given, the unit whose GID is given will start walking towards \nthe target whose GID is given.\n\nWhen 2 arguments are passed, the given unit will walk to the given x,y \ncoordinates on the map where the unit currently is.\n\nExamples:\n\n//Will move/walk the poring we made to the coordinates 150,150\n	unitwalk .GID,150,150;\n\n//NPC will move towards the attached player.\n	unitwalk .GID,getcharid(3);//a player's GID is their account ID\n\n---------------------------------------\n\n*unitkill <GID>;\n*unitwarp <GID>,<Mapname>,<x>,<y>;\n*unitattack <GID>,<Target ID>;\n*unitstop <GID>;\n*unittalk <GID>,<Text>;\n*unitemote <GID>,<Emote>;\n\nOkay, these commands should be fairly self explaining.\nFor the emotions, you can look in db/const.txt for prefixes with e_\nPS: unitwarp supports a <GID> of zero, which causes the executor of the \nscript to be affected. This can be used with OnTouchNPC to warp monsters:\n\nOnTouchNPC:\n	unitwarp 0,\"this\",-1,-1;\n\n---------------------------------------\n\n*disablenpc \"<NPC object name>\";\n*enablenpc \"<NPC object name>\";\n\nThese two commands will disable and enable, respectively, an NPC object \nspecified by name. The disabled NPC will disappear from sight and will no \nlonger be triggerable in the normal way. It is not clear whether it will \nstill be accessible through 'donpcevent' and other triggering commands, \nbut it probably will be. You can disable even warp NPCs if you know their \nobject names, which is an easy way to make a map only accessible through \nwalking half the time. Then you 'enablenpc' them back.\n\nYou can also use these commands to create the illusion of an NPC switching \nbetween several locations, which is often better than actually moving the \nNPC - create one NPC object with a visible and a hidden part to their \nname, make a few copies, and then disable all except one.\n\n---------------------------------------\n\n*hideonnpc \"<NPC object name>\";\n*hideoffnpc \"<NPC object name>\";\n\nThese commands will make the NPC object specified display as hidden or \nvisible, even though not actually disabled per se. Hidden as in thief Hide \nskill, but unfortunately, not detectable by Ruwach or Sight.\n\nAs they are now, these commands are pointless, it is suggested to use \n'disablenpc'/'enablenpc', because these two commands actually unload the \nNPC sprite location and other accompanying data from memory when it is not \nused. However, you can use these for some quest ideas (such as cloaking \nNPCs talking while hidden then revealing... you can wonder around =P).\n\n---------------------------------------\n\n*doevent \"<NPC object name>::<event label>\";\n\nThis command will start a new execution thread in a specified NPC object \nat the specified label. The execution of the script running this command \nwill not stop, and the event called by the 'doevent' command will not run \nuntil the invoking script has terminated. No parameters may be passed with \na doevent call.\n\nThe script of the NPC object invoked in this manner will run as if it's \nbeen invoked by the RID that was active in the script that issued a \n'doevent'. As such, the command will not work if an RID is not attached.\n\n	place,100,100,1%TAB%script%TAB%NPC%TAB%53,{\n		mes \"This is what you will see when you click me\";\n		close;\n	OnLabel:\n		mes \"This is what you will see if the doevent is activated\";\n		close;\n	}\n\n	....\n\n	doevent \"NPC::OnLabel\";\n\n---------------------------------------\n\n*donpcevent \"<NPC object name>::<event label>\";\n\nThis command invokes the event label code within an another NPC or NPCs. \nIt starts a separate instance of execution, and the invoking NPC will \nresume execution its immediately.\n\nIf the supplied event label has the form \"NpcName::OnLabel\", then only \ngiven NPC's event label will be invoked (much like 'goto' into another \nNPC). If the form is \"::OnLabel\" (NPC name omitted), the event code of all \nNPCs with given label will be invoked, one after another. In both cases \nthe invoked script will run without an attached RID, whether or not the \ninvoking script was attached to a player. The event label name is required \nto start with \"On\".\n\nThis command can be used to make other NPCs act, as if they were \nresponding to the invoking NPC's actions, such as using an emotion or \ntalking.\n\n	place,100,100,1%TAB%script%TAB%NPC%TAB%53,{\n		mes \"Hey NPC2 copy what I do\";\n		close2;\n		@emote = rand(1,30);\n		donpcevent \"NPC2::OnEmote\";\n	OnEmote:\n		emotion @emote;\n		end;\n	}\n\n	place,102,100,1%TAB%script%TAB%NPC2%TAB%53,{\n		mes \"Hey NPC copy what I do\";\n		close2;\n		@emote = rand(1,30);\n		donpcevent \"NPC::OnEmote\";\n	OnEmote:\n		emotion @emote;\n		end;\n	}\n\nWhichever of the both NPCs is talked to, both will show a random emotion \nat the same time. \n\nCommand returns 1 or 0 on success and failure.\nA debug message also shows on the console when no events are triggered.\n\n---------------------------------------\n\n*npctalk \"<message>\";\n\nThis command will display a message to the surrounding area as if the NPC \nobject running it was a player talking - that is, above their head and in \nthe chat window. The display name of the NPC will get appended in front of \nthe message to complete the effect.\n\n	// This will make everyone in the area see the NPC greet the character\n	// who just invoked it.\n	npctalk \"Hello \"+strcharinfo(0)+\", how are you?\";\n\n---------------------------------------\n\n*setnpcdisplay(\"<npc name>\", \"<display name>\", <class id>, <size>)\n*setnpcdisplay(\"<npc name>\", \"<display name>\", <class id>)\n*setnpcdisplay(\"<npc name>\", \"<display name>\")\n*setnpcdisplay(\"<npc name>\", <class id>)\n\nChanges the display name and/or display class of the target NPC.\nReturns 0 is successful, 1 if the NPC does not exist.\nSize is 0 = normal 1 = small 2 = big.\n\n---------------------------------------\n//=====================================\n5.1 - Time-Related Commands\n//=====================================\n---------------------------------------\n\n*addtimer <ticks>,\"NPC::OnLabel\";\n*deltimer \"NPC::OnLabel\";\n*addtimercount \"NPC::OnLabel\",<ticks>;\n\nThese commands will create, destroy, and delay a countdown timer - \n'addtimer' to create, 'deltimer' to destroy and 'addtimercount' to delay \nit by the specified number of ticks. For all three cases, the event label \ngiven is the identifier of that timer. The timer runs on the character \nobject that is attached to the script, and can have multiple instances. \nWhen the label is run, it is run as if the player that the timer runs on \nhas clicked the NPC.\n\nWhen this timer runs out, a new execution thread will start in the \nspecified NPC object at the specified label.\n\nThe ticks are given in 1/1000ths of a second.\n\nOne more thing. These timers are stored as part of player data. If the \nplayer logs out, all of these get immediately deleted, without executing \nthe script. If this behavior is undesirable, use some other timer \nmechanism (like 'sleep').\n\nExample:\n<NPC Header> {\n	dispbottom \"Starting a 5 second timer...\";\n	addtimer 5000, strnpcinfo(3)+\"::On5secs\";\n	end;\nOn5secs:\n	dispbottom \"5 seconds have passed!\";\n	end;\n}\n\n---------------------------------------\n\n*initnpctimer	{ \"<NPC name>\" {, <Attach Flag>} } |\n				{ \"<NPC name>\" | <Attach Flag> };\n*stopnpctimer	{ \"<NPC name>\" {, <Detach Flag>}  } |\n				{ \"<NPC name>\" | <Detach Flag> };\n*startnpctimer	{ \"<NPC name>\" {, <Attach Flag>} } |\n				{ \"<NPC name>\" | <Attach Flag> };\n*setnpctimer	<tick>{,\"<NPC name>\"};\n*getnpctimer	(<type of information>{,\"<NPC name>\"})\n*attachnpctimer	{\"<character name>\"};\n*detachnpctimer	{\"<NPC name>\"};\n\nThis set of commands and functions will create and manage an NPC-based \ntimer. The NPC name may be omitted, in which case the calling NPC is used \nas target.\n\nContrary to addtimer/deltimer commands which let you have many different \ntimers referencing different labels in the same NPC, each with their own \ncountdown, 'initnpctimer' can only have one per NPC object. But it can \ntrigger many labels and let you know how many were triggered already and \nhow many still remain.\n\nThis timer is counting up from 0 in ticks of 1/1000ths of a second each. \nUpon  creating this timer, the execution will not stop, but will happily \ncontinue onward. The timer will then invoke new execution threads at \nlabels \"OnTimer<time>:\" in the NPC object it is attached to. \n\nTo create the timer, use the 'initnpctimer', which will start it running. \n'stopnpctimer' will pause the timer, without clearing the current tick, \nwhile 'startnpctimer' will let the paused timer continue.\n\nBy default timers do not have a RID attached, which lets them continue \neven if the player that started them logs off. To attach a RID to a timer, \nyou can either use the optional \"attach flag\" when using \n'initnpctimer/startnpctimer', or do it manually by using 'attachnpctimer'. \nLikewise, the optional flag of stopnpctimer lets you detach any RID after \nstopping the timer, and by using 'detachnpctimer' you can detach a RID at \nany time.\n\nNormally there is only a single timer per NPC, but as an exception, as \nlong as you attach a player to the timer, you can have multiple timers \nrunning at once, because these will get stored on the players instead of \nthe NPC.\nNOTE: You need to attach the RID before the timer _before_ you start it to\nget a player-attached timer. Otherwise it'll stay a NPC timer (no effect).\n\nIf the player that is attached to the npctimer logs out, the \n\"OnTimerQuit:\" event label of that NPC will be triggered, so you can do \nthe appropriate cleanup (the player is still attached when this event is \ntriggered).\n\nThe 'setnpctimer' command will explicitly set the timer to a given tick. \n'getnpctimer' provides timer information. Its parameter defines what type:\n\n 0 - Will return the current tick count of the timer.\n 1 - Will return 1 if there are remaining \"OnTimer<ticks>:\" labels in the \n	 specified NPC waiting for execution.\n 2 - Will return the number of times the timer has triggered and will \n	 trigger an \"OnTimer<tick>:\"  label in the specified NPC.\n\nExample 1:\n\n	<NPC Header> {\n		// We need to use attachnpctimer because the mes command below \n		// needs RID attach\n		attachnpctimer;\n		initnpctimer;\n		npctalk \"I cant talk right now, give me 10 seconds\";\n		end;\n	OnTimer5000:\n		npctalk \"Ok 5 seconds more\";\n		end;\n	OnTimer6000:\n		npctalk \"4\";\n		end;\n	OnTimer7000:\n		npctalk \"3\";\n		end;\n	OnTimer8000:\n		npctalk \"2\";\n		end;\n	OnTimer9000:\n		npctalk \"1\";\n		end;\n	OnTimer10000:\n		stopnpctimer;\n		mes \"[Man]\";\n		mes \"Ok we can talk now\";\n		detachnpctimer;\n		// and remember attachnpctimer and detachnpctimer can only be used \n		// while the NPC timer is not running!\n	}\n\nExample 2:\n\n	OnTimer15000:\n		npctalk \"Another 15 seconds have passed.\";\n\n		// You have to use 'initnpctimer' instead of 'setnpctimer 0'.\n		// This is equal to 'setnpctimer 0' + 'startnpctimer'.\n		// Alternatively, you can also insert another 'OnTimer15001' label \n		// so that the timer won't stop.\n		initnpctimer;\n		end;\n\n	// This OnInit label will run when the script is loaded, so that the \n	// timer is initialized immediately as the server starts. It is \n	// dropped back to 0 every time the NPC says something, so it will \n	// cycle continuously.\n	OnInit:\n		initnpctimer;\n		end;\n\nExample 3:\n\n	mes \"[Man]\";\n	mes \"I have been waiting \"+(getnpctimer(0)/1000)+\" seconds for you.\";\n	// We divide the timer returned by 1000 to convert milliseconds to \n	// seconds.\n	close;\n\nExample 4:\n\n	mes \"[Man]\";\n	mes \"Ok, I will let you have 30 more seconds...\";\n	close2;\n	setnpctimer (getnpctimer(0)-30000);\n	// Notice the 'close2'. If there were a 'next' there the timer would \n	// be changed only after the player pressed the 'next' button.\n	end;\n \n---------------------------------------\n \n*sleep {<milliseconds>};\n*sleep2 {<milliseconds>};\n*awake \"<NPC name>\";\n\nThese commands are used to control the pause of a NPC.\nsleep and sleep2 will pause the script for the given amount of \nmilliseconds.\nAwake is used to cancel a sleep. When awake is called on a NPC it will run \nas if the sleep timer ran out, and thus making the script continue. Sleep \nand sleep2 basically do the same, but the main difference is that sleep \nwill not keep the rid, while sleep2 does.\n\nExamples:\n	// This will pause the script for 10 seconds and ditch the RID \n	// (so no player is attached anymore)\n	sleep 10000; \n	// Pauses the script for 5 seconds, and continue with the RID attached.\n	sleep2 5000; \n	//Cancels any running sleep timers on the NPC 'NPC'.\n	awake \"NPC\"; \n\n---------------------------------------\n\n*progressbar \"<color>\",<seconds>;\n\nThis command works almost like sleep2, but displays a progress bar above \nthe head of the currently attached character (like cast bar). Once the \ngiven amount of seconds passes, the script resumes. If the character moves \nwhile the progress bar progresses, it is aborted and the script ends. The \ncolor format is in RGB (0xRRGGBB). The color is currently ignored by the \nclient and appears always green.\n\n---------------------------------------\n//=====================================\n5.1 - End of Time-related commands\n//=====================================\n---------------------------------------\n\n*announce \"<text>\",<flag>{,<fontColor>{,<fontType>{,<fontSize>{,<fontAlign>{,<fontY>}}}}};\n\nThis command will broadcast a message to all or most players, similar to \n@kami/@kamib GM commands.\n\n	announce \"This will be shown to everyone at all in yellow.\",0;\n\nThe region the broadcast is heard in (target), source of the broadcast and \nthe color the message will come up as is determined by the flags.\n\nThe flag values are coded as constants in db/const.txt to make them easier \nto use.\n\nTarget flags:\n- bc_all:	Broadcast message is sent server-wide (default).\n- bc_map:	Message is sent to everyone in the same map as the source of \n			the broadcast (see below).\n- bc_area:	Message is sent to players in the vicinity of the source.\n- bc_self:	Message is sent only to current player.\nYou cannot	use more than one target flag.\n\nSource flags:\n- bc_pc:	Broadcast source is the attached player (default).\n- bc_npc:	Broadcast source is the NPC, not the player attached to the \n			script (useful when a player is not attached or the message \n			should be sent to those nearby the NPC).\nYou cannot use more than one source flag.\n\nSpecial flags:\n- bc_yellow:Broadcast will be displayed in yellow color (default).\n- bc_blue:	Broadcast will be displayed in blue color.\n- bc_woe:	Indicates that this broadcast is 'WoE Information' that can \n			be disabled client-side.\nDue to the way client handles broadcasts, it is impossible to set both \nbc_blue and bc_woe.\n\nThe optional parameters allow usage of broadcasts in custom colors, \nfont-weights, sizes etc. If any of the optional parameters is used, \nspecial flag is ignored. Optional parameters may not work well (or at all) \ndepending on a game client used.\n\nThe color parameter is a single number which can be in hexadecimal \nnotation.\n\nFor example:\n	announce \"This will be shown to everyone at all in green.\",bc_all,0x00FF00;\nWill display a global announce in green. The color format is in RGB \n(0xRRGGBB).\n\nIn official scripts only two font-weights (types) are used:\n - normal (FW_NORMAL = 400, default),\n - bold   (FW_BOLD = 700).\n\nDefault font size is 12.\n\nUsing this for private messages to players is probably not that good an \nidea, but it can be used instead in NPCs to \"preview\" an announce.\n\n	// This will be a private message to the player using the NPC that \n	// made the announcement\n	announce \"This is my message just for you\",bc_blue|bc_self;\n\n	// This will be shown on everyones screen that is in sight of the NPC.\n	announce \"This is my message just for you people here\",bc_npc|bc_area;\n\n---------------------------------------\n\n*mapannounce \"<map name>\",\"<text>\",<flag>{,<fontColor>{,<fontType>{,<fontSize>{,<fontAlign>{,<fontY>}}}}}};\n\nThis command will work like 'announce' but will only broadcast to \ncharacters currently residing on the specified map. The flag and optional \nparameters parameters are the same as in 'announce', but target and source \nflags are ignored.\n\n---------------------------------------\n\n*areaannounce \"<map name>\",<x1>,<y1>,<x2>,<y2>,\"<text>\",<flag>{,<fontColor>{,<fontType>{,<fontSize>{,<fontAlign>{,<fontY>}}}}}};\n\nThis command works like 'announce' but will only broadcast to characters \nresiding in the specified x1/y1-x2/y2 rectangle on the map given. The \nflags and optional parameters are the same as in 'announce', but target \nand source flags are ignored.\n\n	areaannounce \"prt_church\",0,0,350,350,\"God's in his heaven, all right with the world\",0;\n\n---------------------------------------\n\n*callshop \"<name>\",<option>;\n\nThese are a series of commands used to create dynamic shops. \nThe callshop function calls an invisible shop (view -1) as if the player \nclicked on it.\n\nFor the options on callShop:\n	0 = The normal window (buy, sell and cancel)\n	1 = The buy window\n	2 = The sell window\n	\nExample:\n\n//Will call the shop named DaShop and opens the buy menu.\ncallshop \"DaShop\",1;\n\n\nThe shop which is called by callshop (as long as an npcshop* command is \nexecuted from that NPC (see note 1)) will trigger the labels OnBuyItem and \nOnSellitem. These labels can take over handling for relatively the buying \nof items from the shop and selling the items to a shop. Via these labels \nyou can customize the way an item is bought or sold by a player. \n\nIn the OnBuyItem, two arrays are set (@bought_nameid and \n@bought_quantity), which hold information about the name id (item id) sold \nand the amount sold of it. Same goes for the OnSellItem label, only the \nvariables are named different (@sold_nameid, @sold_quantity, @sold_refine, \n@sold_attribute, @sold_identify, @sold_card1, @sold_card2, @sold_card3, \n@sold_card4). An example on a shop comes with Hercules, and can be found \nin the doc/sample/npc_dynamic_shop.txt file.\n \nThis example shows how to use the labels and their set variables to create \na dynamic shop.\n\nNote 1: These labels will only be triggered if a npcshop* command is \nexecuted, this is because these commands set a special data on the shop \nNPC, named master_nd in the source. \nThe OnSellItem and OnBuyItem are triggered in the NPC whose master_nd is \ngiven in the shop.\n\n---------------------------------------\n\n*npcshopitem \"<name>\",<item id>,<price>{,<item id>,<price>{,<item id>,<price>{,...}}}\n\nThis command lets you override the contents of an existing NPC shop or \ncashshop. The current sell list will be wiped, and only the items \nspecified with the price specified will be for sale.\n\nThe function returns 1 if shop was updated successfully, or 0 if not found.\n\nNote that you cannot use -1 to specify default selling price!\n\n---------------------------------------\n\n*npcshopadditem \"<name>\",<item id>,<price>{,<item id>,<price>{,<item id>,<price>{,...}}}\n\nThis command will add more items at the end of the selling list for the \nspecified NPC shop or cashshop. If you specify an item already for sell, \nthat item will appear twice on the sell list.\n\nThe function returns 1 if shop was updated successfully, or 0 if not found.\n\nNote that you cannot use -1 to specify default selling price!\n\n---------------------------------------\n\n*npcshopdelitem \"<name>\",<item id>{,<item id>{,<item id>{,...}}}\n\nThis command will remove items from the specified NPC shop or cashshop.\nIf the item to remove exists more than once on the shop, all instances \nwill be removed.\n\nNote that the function returns 1 even if no items were removed. The return \nvalue is only to confirm that the shop was indeed found.\n\n---------------------------------------\n\n*npcshopattach \"<name>\"{,<flag>}\n\nThis command will attach the current script to the given NPC shop.\nWhen a script is attached to a shop, the events \"OnBuyItem\" and \n\"OnSellItem\" of your script will be executed whenever a player buys/sells \nfrom the shop. Additionally, the arrays @bought_nameid[], \n@bought_quantity[] or @sold_nameid[] and @sold_quantity[] will be filled \nup with the items and quantities bought/sold.\n\nThe optional parameter specifies whether to attach (\"1\") or detach (\"0\") \nfrom the shop (the default is to attach). Note that detaching will detach \nany NPC attached to the shop, even if it's from another script, while \nattaching will override any other script that may be already attached.\n\nThe function returns 0 if the shop was not found, 1 otherwise.\n\n---------------------------------------\n\n*waitingroom \"<chatroom name>\",<limit>{,<event label>,<trigger>,<required zeny>,<min lvl>,<max lvl>};\n\nThis command will create a chat room, owned by the NPC object running this \nscript and displayed above the NPC sprite.\nThe maximum length of a chat room name is 60 letters.\n\nThe limit is the maximum number of people allowed to enter the chat room. \nThe attached NPC is included in this count. If the optional event and \ntrigger parameters are given, the event label \n(\"<NPC object name>::<label name>\") will be invoked as if with a 'doevent' \nupon the number of people in the chat room reaching the given triggering \namount.\n\n// The NPC will just show a box above its head that says \"Hello World\", \n// clicking it will do nothing, since the limit is zero.\n	waitingroom \"Hello World\",0;\n\n// The NPC will have a box above its head, with \"Disco - Waiting Room\"\n// written on it, and will have 8 waiting slots. Clicking this will enter \n// the chat room, where the player will be able to wait until 7 players \n// accumulate. Once this happens, it will cause the NPC \"Bouncer\" run the \n// label \"OnStart\".\n\n	waitingroom \"Disco - Waiting Room\",8,\"Bouncer::OnStart\",7;\n\n// The NPC will have a box above its head, with \"Party - Waiting Room\" \n// written on it, and will have 8 waiting slots. Clicking this will allow \n// a player who has 5000 zeny and lvl 50~99 to enter the chat room, where \n// the player will be able to wait until 7 players accumulate. Once this \n// happens, it will cause the NPC \"Bouncer\" run the label \"OnStart\".\n\n	waitingroom \"Party - Waiting Room\",8,\"Bouncer::OnStart\",7,5000,50,99;\n\nCreating a waiting room does not stop the execution of the script and it \nwill continue to the next line.\n\nFor more examples see the 2-1 and 2-2 job quest scripts which make \nextensive use of waiting rooms.\n\n---------------------------------------\n\n*delwaitingroom {\"<NPC object name\"};\n\nThis command will delete a waiting room. If no parameter is given, it will \ndelete a waiting room attached to the NPC object running this command, if \nit is, it will delete a waiting room owned by another NPC object. This is \nthe only way to get rid of a waiting room, nothing else will cause it to \ndisappear.\n\nIt's not clear what happens to a waiting room if the NPC is disabled with \n'disablenpc', by the way.\n\n---------------------------------------\n\n*enablewaitingroomevent {\"<NPC object name>\"};\n*disablewaitingroomevent {\"<NPC object name>\"};\n\nThis will enable and disable triggering the waiting room event (see \n'waitingroom') respectively. Optionally giving an NPC object name will do \nthat for a specified NPC object. The chat room will not disappear when \ntriggering is disabled and enabled in this manner and players will not be \nkicked out of it. Enabling a chat room event will also cause it to \nimmediately check whether the number of users in it exceeded the trigger \namount and trigger the event accordingly.\n\nNormally, whenever a waiting room was created to make sure that only one \ncharacter is, for example, trying to pass a job quest trial, and no other \ncharacters are present in the room to mess up the script.\n\n---------------------------------------\n\n*getwaitingroomstate(<information type>{,\"<NPC object name>\"})\n\nThis function will return information about the waiting room state for the \nattached waiting room or for a waiting room attached to the specified NPC \nif any.\n\nThe valid information types are:\n\n 0  - Number of users currently chatting.\n 1  - Maximum number of users allowed.\n 2  - Will return 1 if the waiting room has a trigger set.\n	  0 otherwise.\n 3  - Will return 1 if the waiting room is currently disabled.\n	  0 otherwise.\n 4  - The Title of the waiting room (string)\n 5  - Password of the waiting room, if any. Pointless, since there is no \n	  way to set a password on a waiting room right now.\n 16 - Event name of the waiting room (string)\n 32 - Whether or not the waiting room is full.\n 33 - Whether the amount of users in the waiting room is higher than the \n	  trigger number.\n\n---------------------------------------\n\n*warpwaitingpc \"<map name>\",<x>,<y>{,<number of people>};\n\nThis command will warp the amount of characters equal to the trigger \nnumber of the waiting room chat attached to the NPC object running this \ncommand to the specified map and coordinates, kicking them out of the \nchat. Those waiting the longest will get warped first. It can also do a \nrandom warp on the same map (\"Random\" instead of map name) and warp to the \nsave point (\"SavePoint\").\n\nThe list of characters to warp is taken from the list of the chat room \nmembers. Those not in the chat room will not be considered even if they \nare talking to the NPC in question. If the number of people is given, \nexactly this much people will be warped.\n\nThis command can also keep track of who just got warped. It does this by \nsetting special variables:\n\n$@warpwaitingpc[] is an array containing the account_id numbers of the \n				  characters who were just warped.\n$@warpwaitingpcnum contains the number of the character it just warped.\n\nSee also 'getpartymember' for advice on what to do with those variables.\n\nThe obvious way of using this effectively would be to set up a waiting \nroom for two characters to be warped onto a random PVP map for a \none-on-one duel, for example.\n\n---------------------------------------\n\n*kickwaitingroomall {\"<NPC object name>\"};\n\nThis command kicks everybody out of a specified waiting room chat.\n\n---------------------------------------\n\n*setmapflagnosave \"<map name>\",\"<alternate map name>\",<x>,<y>;\n\nThis command sets the 'nosave' flag for the specified map and also gives \nan alternate respawn-upon-relogin point.\n\nIt does not make a map impossible to make a save point on as you would \nnormally think, 'savepoint' will still work. It will, however, make the \nspecified map kick the reconnecting players off to the alternate map given \nto the coordinates specified.\n\n---------------------------------------\n\n*setmapflag \"<map name>\",<flag>{,<val>};\n\nThis command marks a specified map with a map flag given. Map flags alter \nthe behavior of the map, you can see the list of the available ones in \n'db/const.txt' under 'mf_'.\n\nThe map flags alter the behavior of the map regarding teleporting \n(mf_nomemo, mf_noteleport, mf_nowarp, mf_nogo), storing location when \ndisconnected (mf_nosave), dead branch usage (mf_nobranch), penalties upon \ndeath (mf_nopenalty, mf_nozenypenalty), PVP behavior (mf_pvp, \nmf_pvp_noparty, mf_pvp_noguild), WoE behavior (mf_gvg,mf_gvg_noparty), \nability to use skills or open up trade deals (mf_notrade, mf_novending, \nmf_noskill, mf_noicewall), current weather effects (mf_snow, mf_fog, \nmf_sakura, mf_leaves, mf_rain, mf_clouds, mf_fireworks) and whether night \nwill be in effect on this map (mf_nightenabled).\n\nThe val optional parameter is as the mapflags variable when one exists, it \nmay be a number or a string depending on the mapflag in question.\n\n---------------------------------------\n\n*removemapflag \"<map name>\",<flag>;\n\nThis command removes a mapflag from a specified map. \nSee 'setmapflag' for a list of mapflags.\n\n---------------------------------------\n\n*getmapflag(\"<map name>\",<flag>)\n\nThis command checks the status of a given mapflag and returns the \nmapflag's state. \n0 means OFF, and 1 means ON. See 'setmapflag' for a list of mapflags.\n\n---------------------------------------\n\n*setbattleflag \"<battle flag>\",<value>;\n*getbattleflag(\"<battle flag>\")\n\nSets or gets the value of the given battle flag.\nBattle flags are the flags found in the battle/*.conf files and is also \nused in Lupus' variable rates script.\n\nExamples:\n\n// Will set the base experience rate to 20x (2000%)\n	setbattleflag \"base_exp_rate\",2000;\n	\n// Will return the value of the base experience rate (when used after the \n// above example, it would print 2000).\n	mes getbattleflag(\"base_exp_rate\");\n\n---------------------------------------\n\n*warpportal <x>,<y>,\"<mapname>\",<x>,<y>;\n\nCreates a warp Portal as if a acolyte class character did it.\nThe first x and y is the place of the warp portal on the map where the NPC \nis on the mapname and second x and y is the target area of the warp portal.\n\nExamples:\n\n// Will create a warp portal on the NPC's map at 150,150 \n// leading to prontera, coords 150,180.\n	warpportal 150,150,\"prontera\",150,180;\n\n---------------------------------------\n\n*mapwarp \"<from map>\",\"<to map>\",<x>,<y>{,<type>,<ID>};\n\nThis command will collect all characters located on the From map and warp \nthem wholesale to the same point on the To map, or randomly distribute \nthem there if the coordinates are zero. \"Random\" is understood as a \nspecial To map name and will mean randomly shuffling everyone on the same \nmap.\n\nOptionally, a type and ID can be specified. Available types are:\n\n 0 - Everyone\n 1 - Guild\n 2 - Party\n\nExample:\n\n// Will warp all members of guild with ID 63 on map prontera to alberta.\n	mapwarp \"prontera\",\"alberta\",150,150,1,63;\n\n---------------------------------------\n//=====================================\n5.2 - Guild-Related Commands\n//=====================================\n---------------------------------------\n\n*maprespawnguildid \"<map name>\",<guild id>,<flag>;\n\nThis command goes through the specified map and for each player and \nmonster found there does stuff.\n\nFlag is a bit-mask (add up numbers to get effects you want)\n 1 - warp all guild members to their save points.\n 2 - warp all non-guild members to their save points.\n 4 - remove all monsters which are not guardian or Emperium.\n\nFlag 7 will, therefore, mean 'wipe all mobs but guardians and the Emperium \nand kick all characters out', which is what the official scripts do upon \ncastle surrender. Upon start of WoE, the scripts do 2 (warp out all people \nnot in the guild that owns the castle).\n\nCharacters not belonging to any guild will be warped out regardless of the \nflag setting.\n\nFor examples, check the WoE scripts in the distribution.\n\n---------------------------------------\n\n*agitstart;\n*agitend;\n*agitstart2;\n*agitend2;\n\nThese four commands will start/end War of Emperium or War of Emperium SE.\n\nThis is a bit more complex than it sounds, since the commands themselves \nwon't actually do anything interesting, except causing all 'OnAgitStart:' \nand 'OnAgitEnd:', or 'OnAgitStart2:' and 'OnAgitEnd2:' in the case of \nlatter two commands, events to run everywhere, respectively. They are used \nas  simple triggers to run a lot of complex scripts all across the server, \nand they, in turn, are triggered by clock with an 'OnClock<time>:' \ntime-triggering label.\n\n---------------------------------------\n\n*gvgon \"<map name>\";\n*gvgoff \"<map name>\";\n\nThese commands will turn GVG mode for the specified maps on and off, \nsetting up appropriate map flags. In GVG mode, maps behave as if during \nthe time of WoE, even though WoE itself may or may not actually be in \neffect. \n\n---------------------------------------\n\n*flagemblem <guild id>;\n\nThis command only works when run by the NPC objects which have sprite id \n722, which is a 3D guild flag sprite. If it isn't, the data will change, \nbut nothing will be seen by anyone. If it is invoked in that manner, the \nemblem of the specified guild will appear on the flag, though, if any \nplayers are watching it at this moment, they will not see the emblem \nchange until they move out of sight of the flag and return.\n\nThis is commonly used in official guildwar scripts with a function call \nwhich returns a guild id:\n\n// This will change the emblem on the flag to that of the guild that owns\n// \"guildcastle\"\n\n	flagemblem getcastledata(\"guildcastle\",1);\n\n---------------------------------------\n\n*guardian \"<map name>\",<x>,<y>,\"<name to show>\",<mob id>{,\"<event label>\"{,<guardian index>}};\n\nThis command is roughly equivalent to 'monster', but is meant to be used \nwith castle guardian monsters and will only work with them. It will set \nthe guardian characteristics up according to the castle's investment \nvalues and otherwise set the things up that only castle guardians need.\n\nReturns the id of the mob or 0 if an error occurred.\nWhen 'guardian index' isn't supplied it produces a temporary guardian.\nTemporary guardians are not saved with the castle and can't be accessed by \nguardianinfo.\n\n---------------------------------------\n\n*guardianinfo(\"<map name>\", <guardian number>, <type>);\n\nThis function will return various info about the specified guardian, or -1 \nif it fails for some reason. It is primarily used in the castle manager \nNPC.\n\nMap name and guardian number (value between 0 and 7) define the target.\nType indicates what information to return:\n 0 - visibility (whether the guardian is installed or not)\n 1 - max. hp\n 2 - current hp\n\n---------------------------------------\n//=====================================\n5.2 - End of Guild-Related Commands\n//=====================================\n---------------------------------------\n\n*npcspeed <speed value>;\n*npcwalkto <x>,<y>;\n*npcstop;\n\nThese commands will make the NPC object in question move around the map. \nAs they currently are, they are a bit buggy and are not useful for much \nmore than making an NPC move randomly around the map.\n\n'npcspeed' will set the NPCs walking speed to a specified value. As in the \n@speed GM command, 200 is the slowest possible speed while 0 is the \nfastest possible (instant motion). 100 is the default character walking \nspeed.\n'npcwalkto' will start the NPC sprite moving towards the specified \ncoordinates on the same map as it is currently on. The script proceeds \nimmediately after the NPC begins moving.\n'npcstop' will stop the motion.\n\nWhile in transit, the NPC will be clickable, but invoking it will cause it \nto stop moving, which will make it's coordinates different from what the \nclient computed based on the speed and motion coordinates. The effect is \nrather unnerving.\n\nOnly a few NPC sprites have walking animations, and those that do, do not \nget the animation invoked when moving the NPC, due to the problem in the \nNPC walking code, which looks a bit silly. You might have better success \nby defining a job-sprite based sprite id in 'db/mob_avail.txt' with this.\n\n---------------------------------------\n\n*movenpc \"<NPC name>\",<x>,<y>{,<dir>};\n\nThis command looks like the npcwalktoxy function,but is a little different.\n\nWhile npcwalktoxy just makes the NPC 'walk' to the coordinates given\n(which sometimes gives problems if the path isn't a straight line without \nobjects), this command just moves the NPC. It basically warps out and in \non the current and given spot. Direction can be used to change the NPC's \nfacing direction.\n\nExample:\n\n// This will move Bugga from to the coordinates 100,20 (if those \n// coordinates are legit).\n	movenpc \"Bugga\",100,20;\n\n---------------------------------------\n//=====================================\n6 - Other Commands\n//=====================================\n---------------------------------------\n\n*debugmes \"<message>\";\n\nThis command will send the message to the server console (map-server \nwindow). It will not be displayed anywhere else.\n//\n	// Displays \"NAME has clicked me!\" in the map-server window.\n	debugmes strcharinfo(0)+\" has clicked me!\";\n	\n	// debugmes \"\\033[38D\\033[K ==Message== \\n\"; // enable colour code.\n---------------------------------------\n\n*logmes \"<message>\";\n\nThis command will write the message given to the map server NPC log file, \nas specified in 'conf/logs.conf'. If SQL logging is enabled, the message \nwill go to the 'npclog' table.\n\nIf logs are not enabled for NPCs, nothing will happen.\n\n---------------------------------------\n\n*globalmes \"<message>\"{,\"<NPC name>\"};\n\nThis command will send a message to the chat window of all currently \nconnected characters.\n\nIf NPC name is specified, the message will be sent as if the sender would \nbe the NPC with the said name.\n\n---------------------------------------\n\n*channelmes(\"<#channel>\", \"<message>\");\n\nThis command will send a message to the specified chat channel.\n\nThe sent message will not include any character's names.\n\nFor special channels, such as #map and #ally, the attached RID's map or guild\nwill be used.\n\nIf the channel doesn't exist (or, in the case of a character-specific channel,\nno RID is attached), false will be returned. In case of success, true is\nreturned.\n\n---------------------------------------\n*rand(<number>{,<number>});\n\nThis function returns a number ...\n(if you specify one) ... randomly positioned between 0 and the number you \n						 specify -1.\n(if you specify two) ... randomly positioned between the two numbers you \n						 specify.\n\nrand(10)  would result in 0,1,2,3,4,5,6,7,8 or 9\nrand(0,9) would result in 0,1,2,3,4,5,6,7,8 or 9\nrand(2,5) would result in 2,3,4 or 5\n\n---------------------------------------\n\n*viewpoint <action>,<x>,<y>,<point number>,<color>;\n\nThis command will mark places on the mini map in the client connected to \nthe invoking character. It uses the normal X and Y coordinates from the \nmain map. The colors of the marks are defined using a hexadecimal number, \nsame as the ones used to color text in 'mes' output, but are written as \nhexadecimal numbers in C. (They look like 0x<six numbers>.)\n\nAction is what you want to do with a point, 1 will set it, while 2 will \nclear it. 0 will also set it, but automatically removes the point after 15 \nseconds.\nPoint number is the number of the point - you can have several. If more \nthan one point is drawn at the same coordinates, they will cycle, which \ncan be used to create flashing marks.\n\n	// This command will show a mark at coordinates X 30 Y 40, is mark \n	// number 1, and will be red.\n\n	viewpoint 1,30,40,1,0xFF0000;\n\nThis will create three points:\n\n	viewpoint 1,30,40,1,0xFF0000;\n	viewpoint 1,35,45,2,0xFF0000;\n	viewpoint 1,40,50,3,0xFF0000;\n\nAnd this is how you remove them:\n\n	viewpoint 2,30,40,1,0xFF0000;\n	viewpoint 2,35,45,2,0xFF0000;\n	viewpoint 2,40,50,3,0xFF0000;\n\nThe client determines what it does with the points entirely, the server \nkeeps no memory of where the points are set whatsoever.\n\n---------------------------------------\n\n*cutin \"<filename>\",<position>;\n\nThis command will display a picture, usually an NPC illustration, also \ncalled cutin, for the currently attached client. The position parameter \ndetermines the placement of the illustration and takes following values:\n\n	0 - bottom left corner \n	1 - bottom middle \n	2 - bottom right corner \n	3 - middle of screen in a movable window with an empty title bar \n	4 - middle of screen without the window header, but still movable \n\nThe picture is read from data\\texture\\유저인터페이스\\illust, from both the \nGRF archive and data folder, and is required to be a bitmap. The file \nextension .bmp can be omitted. Magenta color (#ff00ff) is considered \ntransparent. There is no limit placed on the size of the illustrations \nby the client, although loading of large pictures (about 700x700 and \nlarger) causes the client to freeze shortly (lag). Typically the size is \nabout 320x480. New illustrations can be added by just putting the new file \ninto the location above.\n\nThe client is able to display only one cutin at the same time and each new \none will cause the old one to disappear. To delete the currently displayed \nillustration without displaying a new one, an empty file name and position \n255 must be used.\n\n	// Displays the Comodo Kafra illustration in lower right corner.\n	cutin \"kafra_07\",2;\n\n	// Typical way to end a script, which displayed an illustration during a\n	// dialog with a player.\n	mes \"See you.\";\n	close2;\n	cutin \"\",255;\n	end;\n\n---------------------------------------\n\n*pet <pet id>;\n\nThis command is used in all the item scripts for taming items. Running \nthis command will make the pet catching cursor appear on the client \nconnected to the invoking character, usable on the monsters with the \nspecified pet ID number. It will still work outside an item script.\n\nA full list of pet IDs can be found inside 'db/pet_db.txt'\n\n---------------------------------------\n\n*emotion <emotion number>{,<target>{,\"<target name>\"}};\n\nThis command makes an object display an emotion sprite above their own as \nif they were doing that emotion. For a full list of emotion numbers, see \n'db/const.txt' under 'e_'. The not so obvious ones are 'e_what' (a \nquestion mark) and 'e_gasp' (the exclamation mark).\n\nThe optional target parameter specifies who will get the emotion on top of \ntheir head. If 0 (default if omitted), the NPC in current use will show \nthe emotion, if 1, the player that is running the script will display it.\n\nTarget name parameter allows to display emotion on top of other NPC/PC \nwithout event labels. If specified name is not found, command does nothing.\n\n---------------------------------------\n\n*misceffect <effect number>;\n\nThis command, if run from an NPC object that has a sprite, will call up a \nspecified effect number, centered on the NPC sprite. If the running code \ndoes not have an object ID (a 'floating' NPC) or is not running from an \nNPC object at all (an item script) the effect will be centered on the \ncharacter who's RID got attached to the script, if any. For usable item \nscripts, this command will create an effect centered on the player using \nthe item.\n\nA full list of known effects is found in 'doc/effect_list.txt'. The list \nof those that actually work may differ greatly between client versions.\n\n---------------------------------------\n\n*soundeffect \"<effect filename>\",<type>;\n*soundeffectall \"<effect filename>\",<type>{,\"<map name>\"}{,<x0>,<y0>,<x1>,<y1>};\n\nThese two commands will play a sound effect to either the invoking \ncharacter only ('soundeffect') or multiple characters ('soundeffectall'). \nIf the running code does not have an object ID (a 'floating' NPC) or is \nnot running from an NPC object at all (an item script) the sound will be \ncentered on the character who's RID got attached to the script, if any. \nIf it does, it will be centered on that object. (an NPC sprite)\n\nEffect filename is the filename in a GRF. It must have the .wav extension.\n\nIt's not quite certain what the 'type' actually does, it is sent to the \nclient directly. It probably determines which directory to play the effect \nfrom. It's certain that giving 0 for the number will play sound files from \n'\\data\\wav\\', but where the other numbers will read from is unclear.\n\nThe sound files themselves must be in the PCM format, and file names \nshould also have a maximum length of 23 characters including the .wav \nextension:\n\nsoundeffect \"1234567890123456789.wav\", 0; // will play the soundeffect\nsoundeffect \"12345678901234567890.wav\", 0; // throws gravity error \n\nYou can add your own effects this way, naturally.\n\n---------------------------------------\n\n*playbgm \"<BGM filename>\";\n*playbgmall \"<BGM filename>\"{,\"<map name>\"{,<x0>,<y0>,<x1>,<y1>}};\n\nThese two commands will play a Background Music to either the invoking \ncharacter only ('playbgm') or multiple characters ('playbgmall').\n\nBGM filename is the filename in /BGM/ folder. It has to be in .mp3 \nextension, but it's not required to specify the extension in the script. \n\nIf coordinates are omitted, BGM will be broadcasted on the entire map. If \nthe map name is also omitted the BGM will be played for the entire server.\n\nYou can add your own BGMs this way, naturally.\n\n---------------------------------------\n\n*pvpon \"<map name>\";\n*pvpoff \"<map name>\";\n\nThese commands will turn PVP mode for the specified maps on and off. \nBeside setting the flags referred to in 'setmapflag', 'pvpon' will also \ncreate a PVP timer and ranking as will @pvpon GM command do.\n\n---------------------------------------\n\n*atcommand \"<command>\";\n\nThis command will run the given command line exactly as if it was typed in \nfrom the keyboard by the player connected to the invoking character, and \nthat character belonged to an account which had GM level 99.\n\n	// This will ask the invoker for a character name and then use the \n	// '@nuke' GM command on them, killing them mercilessly.\n	input .@player$;\n	atcommand \"@nuke \"+.@player$;\n\nThis command has a lot of good uses, I am sure you can have some fun with \nthis one.\n\n---------------------------------------\n\n*charcommand \"<command>\";\n\nThis command will run the given command line exactly as if it was typed in \nfrom the keyboard from a character that belonged to an account which had \nGM level 99.\n\nThe commands can also run without an attached rid.\n\n	// This would do the same as above, but now\n	// it doesn't need a player attached by default.\n	charcommand \"#option 0 0 0 Roy\";\n\n---------------------------------------\n\n*bindatcmd \"command\",\"<NPC object name>::<event label>\"{,<group level>,<group level char>,<log>};\n\nThis command will bind a NPC event label to an atcommand. Upon execution \nof the atcommand, the user will invoke the NPC event label. Each atcommand \nis only allowed one binding. If you rebind, it will override the original \nbinding. If group level is provided, only users of that group level or \nabove will be able to access the command, if not provided, everyone will \nbe able to access the command.\n\"group level char\" is the minimum group level required for the label to be \nused on others like a char command would, e.g. \"#command \"target\" params\", \nwhen not provided, \"group level char\" defaults to 99.\n\"log\" whether to log the usages of this command with the atcommand log \n(1 = log, 0 = no log), default is to not log.\n\nThe following variables are set upon execution:\n	.@atcmd_command$      =  The name of the @command used.\n	.@atcmd_parameters$[] =  Array containing the given parameters,\n							 starting from an index of 0.\n	.@atcmd_numparameters =  The number of parameters defined.\n\nParameters are split on spaces. Multiple spaces aren't grouped together, and\nwill create multiple (empty) arguments.\nAny leading spaces before the first parameter will be omitted.\n\nUsage example:\n\nWhen a user types the command \"@test\", an angel effect will be shown.\n\n-	script	atcmd_example	-1,{\nOnInit:\n	bindatcmd \"test\",strnpcinfo(3)+\"::OnAtcommand\";\n	end;\nOnAtcommand:\n	specialeffect2 338;\n	end;\n}\n\nParameter splitting example:\n	@mycommand\n		.@atcmd_numparameters -> 0\n		.@atcmd_parameters$   -> { }\n	@mycommand<space><space>\n		.@atcmd_numparameters -> 0\n		.@atcmd_parameters$   -> { }\n	@mycommand<space>foo\n		.@atcmd_numparameters -> 1\n		.@atcmd_parameters$   -> { \"foo\" }\n	@mycommand<space><space>foo\n		.@atcmd_numparameters -> 1\n		.@atcmd_parameters$   -> { \"foo\" }\n	@mycommand<space>foo<space>bar\n		.@atcmd_numparameters -> 2\n		.@atcmd_parameters$   -> { \"foo\", \"bar\" }\n	@mycommand<space>foo<space><space>bar\n		.@atcmd_numparameters -> 3\n		.@atcmd_parameters$   -> { \"foo\", \"\", \"bar\" }\n	@mycommand<space>foo<space>\n		.@atcmd_numparameters -> 2\n		.@atcmd_parameters$   -> { \"foo\", \"\" }\n	@mycommand<space>foo<space><space>\n		.@atcmd_numparameters -> 3\n		.@atcmd_parameters$   -> { \"foo\", \"\", \"\" }\n\nThe called event label needs to take care of joining arguments together, in\ncase it expects spaces. For example:\n\n-	script	atcmd_example	-1,{\nOnInit:\n	bindatcmd \"test\",strnpcinfo(3)+\"::OnAtcommand\";\n	end;\nOnAtcommand:\n	// This command expects a character name (that may contain spaces) as\n	// the only parameter.\n	.@name$ = \"\";\n	for (.@i = 0; .@i < .@atcmd_numparameters; ++.@i) {\n		.@name$ += (.@i > 0 ? \" \" : \"\") + .@atcmd_parameters$[.@i];\n	}\n	dispbottom(\"The specified name is: '\" + .@name$ + \"'\");\n	end;\n}\n\n---------------------------------------\n\n*unbindatcmd \"command\";\n\nThis command will unbind a NPC event label from an atcommand.\n\n---------------------------------------\n\n*useatcmd \"command\";\n\nThis command will execute an atcommand binding on the attached RID from a \nscript. The three .@atcmd_***** variables will NOT be set when invoking \nscripts-atcommands this way.\n\n---------------------------------------\n\n*unitskilluseid <GID>,<skill id>,<skill lvl>{,<target id>};\n*unitskilluseid <GID>,\"<skill name>\",<skill lvl>{,<target id>};\n*unitskillusepos <GID>,<skill id>,<skill lvl>,<x>,<y>;\n*unitskillusepos <GID>,\"<skill name>\",<skill lvl>,<x>,<y>;\n\nThis is the replacement of the older commands, these use the same values \nfor GID as the other unit* commands (See 'GID').\n\nSkill ID is the ID of the skill, skill level is the level of the skill.\nFor the position, the x and y are given in the unitskillusepos.\n\n---------------------------------------\n\n*npcskill <skill id>,<skill lvl>,<stat point>,<NPC level>;\n*npcskill \"<skill name>\",<skill lvl>,<stat point>,<NPC level>;\n\nThis command causes the attached NPC object to cast a skill on the \nattached player. The skill will have no cast time or cooldown. The player \nmust be within the default skill range or the command will fail silently.\n\nThe \"stat point\" parameter temporarily sets all NPC stats to the given \nvalue, and \"NPC level\" is the temporary level of the NPC (used in some \nskills). Neither value can be greater than the max level defined in \nconfig, and will not work properly if the NPC has a mob sprite.\n\n	// Casts Level 10 Heal on the attached player, calculated with\n	// all stats 99 and base level 60.\n	npcskill \"AL_HEAL\",10,99,60;\n\n---------------------------------------\n\n*setnpcdistance <distance>\n\nThis command can reduce distance from where npc can be clicked.\nUsefull to use from OnInit event.\n\n	// Set distance to one tile on server load\n	OnInit:\n	setnpcdistance 1;\n\n---------------------------------------\n\n*getnpcdir {<name>};\n\nReturn current npc direction for parameter \"name\" or for attached npc\nif it missing. If name missing and not attached npc, return -1.\n\nExample:\n	.@dir = getnpcdir();\n\n---------------------------------------\n\n*setnpcdir {<name>,} <direction>;\n\nSet npc direction. If npc name missing, will be used attached npc.\n\nExample:\n	setnpcdir 2;\n\n---------------------------------------\n\n*getnpcclass {<name>};\n\nReturn npc class/sprite id for npc with given name or for attached npc.\nIf name missing and no attached npc, return -1.\n\nExample:\n	.@class = getnpcclass();\n\n---------------------------------------\n\n*day;\n*night;\n\nThese two commands will switch the entire server between day and night \nmode respectively. If your server is set to cycle between day and night by \nconfiguration, it will eventually return to that cycle.\n\nExample:\n\n-	script	DayNight	-1,{\nOnClock0600:\n	day;\n	end;\nOnInit:\n	// setting correct mode upon server start-up\n	if(gettime(3)>=6 && gettime(3)<18) end;\nOnClock1800:\n	night;\n	end;\n}\n\nThis script allows to emulate the day/night cycle as the server does, but \nalso allows triggering additional effects upon change, like announces, \ngifts, etc.\nThe day/night cycle set by configuration should be disabled when this \nscript is used.\n\n---------------------------------------\n\n*pcre_match(\"<string>\",\"<regex>\");\n\nThis command is only available if the server is compiled with regular\nexpressions library enabled.\n\nThe string <string> will be searched for a match to the regular expression\n<regex>, and the number of matches will be returned.\n\nAn alternative way to invoke this command is to use the operators '~=' or '~!'.\nThe operator '~=' is exactly the same as pcre_match, while the operator '~!'\nwill return 1 if no matches were found, or 0 if at least a match was found.\n\n	if (pcre_match(\"string\", \"regex\")) mes \"There was a match.\";\n	if (\"string\" ~= \"regex\") mes \"There was a match.\";\n	if (\"string\" ~! \"regex\") mes \"There were no matches.\";\n\nYou can find more usage examples in the test script npc/custom/test.txt.\n\nUsing regular expressions is high wizardry. But with this high wizardry\ncomes unparalleled power of text manipulation. For an explanation of what\na regular expression pattern is, see a few web pages:\n\nhttp://www.regular-expressions.info/\nhttp://www.weitz.de/regex-coach/\n\nAdditionally, the following temporary variables will be filled (unless the\ncommand is invoked as '~!'):\n\n- $@regexmatchcount: The number of matches detected, including any\n  parenthesized capture-groups.\n- $@regexmatch$[0]: The part of <string> That matched the full <regex> pattern.\n- $@regexmatch$[1 .. $@regexmatchcount]: The parts of <string> that matched\n  each of the parenthesized capture-groups in <pattern>.\n\nA capture group is a part of a regex enclosed in (parentheses) in order to\nstore in a variable the part of the expression that was matched by that part of\nthe regex. For more details, see the links above, as this is not intended to be\na regex tutorial.\n\n---------------------------------------\n\n*defpattern <set number>,\"<regular expression pattern>\",\"<event label>\";\n*activatepset <set number>;\n*deactivatepset <set number>;\n*deletepset <set number>;\n\nThis set of commands is only available if the server is compiled with \nregular expressions library enabled.\n\nThey will make the NPC object listen for text spoken publicly by players \nand match it against regular expression patterns, then trigger labels \nassociated with these regular expression patterns.\n\nPatterns are organized into sets, which are referred to by a set number. \nYou can have multiple sets patterns, and multiple patterns may be active \nat once. Numbers for pattern sets start at 1.\n\n'defpattern' will associate a given regular expression pattern with an \nevent label. This event will be triggered whenever something a player says \nis matched by this regular expression pattern, if the pattern is currently \nactive.\n\n'activatepset' will make the pattern set specified active. An active \npattern will enable triggering labels defined with 'defpattern', which \nwill not happen by default.\n'deactivatepset' will deactivate a specified pattern set. Giving -1 as a \npattern set number in this case will deactivate all pattern sets defined.\n\n'deletepset' will delete a pattern set from memory, so you can create a \nnew pattern set in its place.\n\nFor an example of this in use, see doc/sample/npc_test_pcre.txt\n\nWith this you could, for example, automatically punish players for asking \nfor Zeny in public places, or alternatively, automatically give them Zeny \ninstead if they want it so much.\n\n---------------------------------------\n\n*pow(<number>,<power>)\n\nReturns the result of the calculation.\n\nExample:\n	.@i = pow(2,3); // .@i will be 8\n\n---------------------------------------\n\n*log10(<number>)\n\nReturns log base 10 of the number.\n\nNote: The value is truncated to integer.\n\nExample:\n	.@i = log10(100); // .@i will be 2\n\n---------------------------------------\n\n*sqrt(<number>)\n\nReturns square-root of number.\n\nNote: The value is truncated to integer.\n\nExample:\n	.@i = sqrt(25); // .@i will be 5\n\n---------------------------------------\n\n*distance(<x0>,<y0>,<x1>,<y1>)\n\nReturns distance between 2 points.\n\nNote: When Hercules is configured to use circular areas, the Euclidean distance\nis returned, otherwise the Chebyshev distance. The value is truncated to\ninteger.\n\nExample:\n	.@i = distance(100,200,101,202);\n\n---------------------------------------\n\n*min(<number>{,<number>...<number>})\n*max(<number>{,<number>...<number>})\n\nReturns the smallest (or biggest) from the set of given numbers.\n\nExample:\n	.@minimum = min(1, -6, -2, 8, 2); // .@minimum will be equal to -6\n	.@maximum = max(0, 5, 10, 4); // .@maximum will be equal to 10\n	.@level = min(BaseLevel, 70); // .@level will be the character's base level, capped to 70\n\n---------------------------------------\n\n*md5(\"<string>\")\n\nReturns the md5 checksum of a number or string.\n\nExample:\n	mes md5(12345);\n	mes md5(\"12345\"); // Will both display 827ccb0eea8a706c4c34a16891f84e7b\n	mes md5(\"qwerty\");// Will display d8578edf8458ce06fbc5bb76a58c5ca4\n\n---------------------------------------\n\n*query_sql(\"your MySQL query\"{, <array variable>{, <array variable>{, ...}}});\n*query_logsql(\"your MySQL query\"{, <array variable>{, <array variable>{, ...}}});\n\nExecutes an SQL query. A 'select' query can fill array variables with up \nto 128 rows of values, and will return the number of rows (the array size).\n\nNote that 'query_sql' runs on the main database while 'query_logsql' runs \non the log database.\n\nExample:\n	.@nb = query_sql(\"select name,fame from `char` ORDER BY fame DESC LIMIT 5\", .@name$, .@fame);\n	mes \"Hall Of Fame: TOP5\";\n	mes \"1.\"+.@name$[0]+\"(\"+.@fame[0]+\")\"; // Will return a person with the biggest fame value.\n	mes \"2.\"+.@name$[1]+\"(\"+.@fame[1]+\")\";\n	mes \"3.\"+.@name$[2]+\"(\"+.@fame[2]+\")\";\n	mes \"4.\"+.@name$[3]+\"(\"+.@fame[3]+\")\";\n	mes \"5.\"+.@name$[4]+\"(\"+.@fame[4]+\")\";\n\n---------------------------------------\n\n*escape_sql(<value>)\n\nConverts the value to a string and escapes special characters so that it's \nsafe to use in query_sql(). Returns the escaped form of the given value.\n\nExample:\n	.@str$ = \"John's Laptop\";\n	.@esc_str$ = escape_sql(.@name$); // Escaped string: John\\'s Laptop\n\n---------------------------------------\n\n*setiteminfo(<item id>,<type>,<value>)\n\nThis function will set some value of an item.\nReturns the new value on success, or -1 on fail (item_id not found or \ninvalid type).\n\nValid types are:\n	0 - Buy Price; 1 - Sell Price; 2 - Item Type;\n	3 - maxchance (Max drop chance of this item e.g. 1 = 0.01% , etc..\n		if = 0, then monsters don't drop it at all (rare or a quest item)\n		if = 10000, then this item is sold in NPC shops only\n	4 - sex; 5 - equip; 6 - weight; 7 - atk; 8 - def; 9 - range;\n	10 - slot; 11 - look; 12 - elv; 13 - wlv; 14 - view id\n\nExample:\n\nsetiteminfo Stone, 6, 9990; // Stone now weighs 999.0\n\n---------------------------------------\n\n*setitemscript(<item id>,<\"{ new item script }\">{,<type>});\n\nSet a new script bonus to the Item. Very useful for game events.\nYou can remove an item's itemscript by leaving the itemscript argument \nempty. Returns 1 on success, or 0 on fail (item_id not found or new item \nscript is invalid).\nType can optionally be used indicates which script to set (default is 0):\n 0 - Script\n 1 - OnEquip_Script\n 2 - OnUnequip_Script\n\nExample:\n\nsetitemscript Silver_Ring_, \"{ if(isequipped(2236)==0)end; if(getskilllv(26)){skill 40,1;}else{skill 26,1+isequipped(2636);} }\";\nsetitemscript Silver_Ring_, \"\";\n\n---------------------------------------\n\n*atoi(\"<string>\")\n*axtoi(\"<string>\")\n*strtol(\"string\", base)\n\nThese commands are used to convert strings to numbers. 'atoi' will \ninterpret given string as a decimal number (base 10), while 'axtoi' \ninterprets strings as hexadecimal numbers (base 16). 'strtol' lets\nthe user specify a base (valid range is between 2 and 36 inclusive,\nor the special value0, which means auto-detection).\n\nThe atoi and strtol functions conform to the C functions with the same\nnames, and axtoi is the same as strtol, with a base of 16. Results are\nclamped to signed 32 bit int range (INT_MIN ~ INT_MAX)\n\nExample:\n\n.@var = atoi(\"11\");        // Sets .@var to 11\n.@var = axtoi(\"FF\");       // Sets .@var to 255\nmes axtoi(\"11\");           // Displays 17 (1 = 1, 10 = 16)\n.@var = strtol(\"11\", 10);  // Sets .@var to 11 (11 base 10)\n.@var = strtol(\"11\", 16);  // Sets .@var to 17 (11 base 16)\n.@var = strtol(\"11\", 0);   // Sets .@var to 11 (11 base 10, auto-detected)\n.@var = strtol(\"0x11\", 0); // Sets .@var to 17 (11 base 16, auto-detected because of the \"0x\" prefix)\n.@var = strtol(\"011\", 0);  // Sets .@var to 9 (11 base 8, auto-detected because of the \"0\" prefix)\n.@var = strtol(\"11\", 2);   // Sets .@var to 3 (binary 11)\n\n---------------------------------------\n\n*compare(\"<string>\",\"<substring>\")\n\nThis command returns 1 or 0 when the substring is in the main string (1) \nor not (0). This command is not case sensitive.\n\nExamples:\n\n//dothis; will be executed ('Bloody Murderer' contains 'Blood').\n	if (compare(\"Bloody Murderer\",\"Blood\"))\n		dothis;\n//dothat; will not be executed ('Blood butterfly' does not contain 'Bloody').\n	if (compare(\"Blood Butterfly\",\"Bloody\"))\n		dothat;\n		\n---------------------------------------\n\n*strcmp(\"<string>\",\"<string>\")\n\nThis command compares two strings and is similar to strcmp in C.\n\nReturn Values:\n	>0  : String 1 > String 2\n	0  : Strings are equal\n	<0 : String 1 < String 2\n\nExamples:\n	.@a = strcmp(\"abcdef\",\"ABCDEF\");\n	if (.@a > 0){\n		mes \".@a is greater than 0.\";		//Output is this.\n	}else{\n		mes \".@a is less or equal to 0\";\n	}\n	\n---------------------------------------\n\n*getstrlen(\"<string>\")\n\nThis function will return the length of the string given as an argument. \nIt is useful to check if anything input by the player exceeds name length \nlimits and other length limits and asking them to try to input something \nelse.\n\n---------------------------------------\n\n*charisalpha(\"<string>\",<position>)\n\nThis function will return 1 if the character number Position in the given \nstring is a letter, 0 if it isn't a letter but a digit or a space.\nThe first letter is position 0.\n\n---------------------------------------\n\n*charat(<string>,<index>)\n\nReturns char at specified index. If index is out of range, returns an  \nempty string.\n\nExample:\n\n	charat(\"This is a string\", 10); //returns \"s\"\n\n---------------------------------------\n\n*setchar(<string>,<char>,<index>)\n\nReturns the original string with the char at the specified index set to \nthe specified char. If index is out of range, the original string will be \nreturned. Only the 1st char in the <char> parameter will be used.\n\nExample:\n	\n	setchar(\"Cat\", \"B\", 0); //returns \"Bat\"\n\n---------------------------------------\n\n*insertchar(<string>,<char>,<index>)\n\nReturns the original string with the specified char inserted at the \nspecified index. If index is out of range, the char will be inserted on \nthe end of the string that it is closest. Only the 1st char in the <char> \nparameter will be used.\n\nExample:\n\n	insertchar(\"laughter\", \"s\", 0); //returns \"slaughter\"\n\n---------------------------------------\n\n*delchar(<string>,<index>)\n\nReturns the original string with the char at the specified index removed.\nIf index is out of range, original string will be returned.\n\nExample:\n\n	delchar(\"Diet\", 3); //returns \"Die\"\n\n---------------------------------------\n\n*strtoupper(<string>)\n*strtolower(<string>)\n\nReturns the specified string in it's uppercase/lowercase form.\nAll non-alpha characters will be preserved.\n\nExample:\n\n	strtoupper(\"The duck is blue!!\"); //returns \"THE DUCK IS BLUE!!\"\n\n---------------------------------------\n\n*charisupper(<string>,<index>)\n*charislower(<string>,<index>)\n\nReturns 1 if character at specified index of specified string is\nuppercase for 'charisupper' or lowercase for 'charislower'. Otherwise, 0. \nCharacters not of the alphabelt will return 0.\n\nExample:\n\n	charisupper(\"Hercules\", 0); //returns 1\n\n---------------------------------------\n\n*substr(<string>,<start_index>,<end_index>)\n\nReturns the sub-string of the specified string inclusively between the set \nindexes. If indexes are out of range, or the start index is after the end \nindex, an empty string will be returned.\n\nExample:\n\n	substr(\"foobar\", 3, 5); //returns \"bar\"\n\n---------------------------------------\n\n*explode(<dest_array>,<string>,<delimiter>)\n\nBreaks a string up into substrings based on the specified delimiter. \nSubstrings will be stored within the specified string array. Only the 1st \nchar of the delimiter parameter will be used. If an empty string is passed \nas a delimiter, the string will be placed in the array in its original \nform, without any changes.\n\nExample:\n\n	explode(.@my_array$, \"Explode:Test:1965:red:PIE\", \":\");\n	//.@my_array$ contents will be...\n	//.@my_array$[0]: \"Explode\"\n	//.@my_array$[1]: \"Test\"\n	//.@my_array$[2]: \"1965\"\n	//.@my_array$[3]: \"red\"\n	//.@my_array$[4]: \"PIE\"\n\n---------------------------------------\n\n*implode(<string_array>{,<glue>})\n\nCombines all substrings within the specified string array into a single \nstring. If the glue parameter is specified, it will be inserted inbetween \neach substring.\n\nExample:\n	setarray .@my_array$[0], \"This\", \"is\", \"a\", \"test\";\n	implode(.@my_array$, \" \"); //returns \"This is a test\"\n\n---------------------------------------\n\n*sprintf(<format>{,param{,param{,...}}})\n\nC style sprintf. The resulting string is returned same as in PHP. All C \nformat specifiers are supported except %n. For more info check sprintf \nfunction at www.cplusplus.com \nNumber of params is only limited by Hercules' script engine.\n\nExample:\n	.@format$ = \"The %s contains %d monkeys\";\n	dispbottom(sprintf(.@format$, \"zoo\", 5));\n	//prints \"The zoo contains 5 monkeys\"\n\n	dispbottom(sprintf(.@format$, \"barrel\", 82));\n	//prints \"The barrel contains 82 monkeys\"\n\n---------------------------------------\n\n*sscanf(<string>,<format>{,param{,param{,...}}})\n	\nC style sscanf. All C format specifiers are supported. \nMore info: sscanf @ www.cplusplus.com. The number of params is only \nlimited by Hercules' script engine.\n\nExample:\n	sscanf(\"This is a test: 42 foobar\", \"This is a test: %d %s\", .@num, .@str$);\n	dispbottom(.@num + \" \" + .@str$); //prints \"42 foobar\"\n\n---------------------------------------\n\n*strpos(<haystack>,<needle>{,<offset>})\n\nPHP style strpos. Finds a substring (needle) within a string (haystack).\nThe offset parameter indicates the index of the string to start searching.\nReturns index of substring on successful search, else -1.\nComparison is case sensitive.\n\nExample:\n	strpos(\"foobar\", \"bar\", 0); //returns 3\n	strpos(\"foobarfoo\", \"foo\", 0); //returns 0\n	strpos(\"foobarfoo\", \"foo\", 1); //returns 6\n\n---------------------------------------\n\n*replacestr(<input>, <search>, <replace>{, <usecase>{, <count>}})\n\nReplaces all instances of a search string in the input with the specified \nreplacement string. By default is case sensitive unless <usecase> is set \nto 0. If specified it will only replace as many instances as specified \nin the count parameter.\n\nExample:\n	replacestr(\"testing tester\", \"test\", \"dash\"); //returns \"dashing dasher\"\n	replacestr(\"Donkey\", \"don\", \"mon\", 0);	//returns \"monkey\"\n	replacestr(\"test test test test test\", \"test\", \"yay\", 0, 3); //returns \"yay yay yay test test\"\n\n---------------------------------------\n\n*countstr(<input>, <search>{, <usecase>})\n\nCounts all instances of a search string in the input. By default is case \nsensitive unless <usecase> is set to 0.\n\nExample:\n	countstr(\"test test test Test\", \"test\"); //returns 3\n	countstr(\"cake Cake\", \"Cake\", 0); //returns 2\n\n---------------------------------------\n\n*setfont <font>;\n\nThis command sets the current RO client interface font to one of the fonts \nstored in data\\*.eot by using an ID of the font. When the ID of the \ncurrently used font is used, default interface font is used again.\n\n	0 - Default\n	1 - RixLoveangel\n	2 - RixSquirrel\n	3 - NHCgogo\n	4 - RixDiary\n	5 - RixMiniHeart\n	6 - RixFreshman\n	7 - RixKid\n	8 - RixMagic\n	9 - RixJJangu\n\n---------------------------------------\n\n*showdigit <value>{,<type>};\n\nDisplays given numeric 'value' in large digital clock font on top of the \nscreen. The optional parameter 'type' specifies visual aspects of the \n\"clock\" and can be one of the following values:\n\n	0 - Displays the value for 5 seconds (default).\n	1 - Incremental counter (1 tick/second).\n	2 - Decremental counter (1 tick/second). Does not stop at zero, but \n		overflows.\n	3 - Decremental counter (1 tick/second). Two digits only, stops at \n		zero.\n\nFor type 1 and 2 the start value is set by using negative number of the \none intended to set (ex. -10 starts the counter at 10 seconds). Except for \ntype 3 the value is interpreted as seconds and formatted as time in days, \nhours, minutes and seconds. Note, that the official script command does \nnot have the optional parameter.\n\n	// displays 23:59:59 for 5 seconds\n	showdigit 86399;\n\n	// counter that starts at 60 and runs for 60 seconds\n	showdigit 60,3;\n\n---------------------------------------\n\n* The Pet AI commands\n\nThese commands will only work if the invoking character has a pet, and are \nmeant to be executed from pet scripts. They will modify the pet AI \ndecision-making for the current pet of the invoking character, and will \nNOT have any independent effect by themselves, which is why only one of \nthem each may be in effect at any time for a specific pet. A pet may \nhave 'petloot', 'petskillbonus', 'petskillattack' and 'petskillsupport' at the\nsame time.\n\n*petskillbonus <bonus type>,<value>,<duration>,<delay>;\n\nThis command will make the pet give a bonus to the owner's stat (bonus \ntype - bInt,bVit,bDex,bAgi,bLuk,bStr,bSpeedRate - for a full list, see the \nvalues starting with 'b' in 'db/const.txt').\n\n*petrecovery <status type>,<delay>;\n\nThis command will make the pet cure a specified status condition. The \ncuring actions will occur once every <delay> seconds. For a full list of \nstatus conditions that can be cured, see the list of 'SC_' status \ncondition constants in 'db/const.txt'\n\n*petloot <max items>;\n\nThis command will turn on pet looting, with a maximum number of items to \nloot specified. Pet will store items and return them when the maximum is \nreached or when pet performance is activated.\n\n*petskillsupport <skill id>,<skill level>,<delay>,<percent hp>,<percent sp>;\n*petskillsupport \"<skill name>\",<skill level>,<delay>,<percent hp>,<percent sp>;\n\nThis will make the pet use a specified support skill on the owner whenever \nthe HP and SP are below the given percent values, with a specified delay \ntime between activations. The skill numbers are as per \n'db/(pre-)re/skill_db.txt'.\nIt's not quite certain who's stats will be used for the skills cast, the \ncharacter's or the pets. Probably, Skotlex can answer that question.\n\n*petskillattack <skill id>,<damage>,<number of attacks>,<rate>,<bonusrate>;\n*petskillattack \"<skill name>\",<damage>,<number of attacks>,<rate>,<bonusrate>;\n\nThis command will make the pet cast an attack skill on the enemy the pet's\nowner is currently fighting. Skill IDs and levels are as per 'petskillsupport'.\nIf <number of attacks> is specified different than 0, it will make the pet cast\nthe skill with a fixed amount of damage inflicted and the specified number of\nattacks. A value of zero uses the skill's defaults.\n\nAll commands with delays and durations will only make the behavior active \nfor the specified duration of seconds, with a delay of the specified \nnumber of seconds between activations. Rates are a chance of the effect \noccurring and are given in percent. 'bonusrate' is added to the normal \nrate if the pet intimacy is at the maximum possible.\n\nThe behavior modified with the above mentioned commands will only be \nexhibited if the pet is loyal and appropriate configuration options are \nset in 'battle.conf'.\n\nPet scripts in the database normally run whenever a pet of that type \nhatches from the egg. Other commands usable in item scripts (see 'bonus') \nwill also happily run from pet scripts. Apparently, the pet-specific \ncommands will also work in NPC scripts and modify the behavior of the \ncurrent pet up until the pet is hatched again. (Which will also occur when \nthe character is logged in again with the pet still out of the egg.) It is \nnot certain for how long the effect of such command running from an NPC \nscript will eventually persist, but apparently, it is possible to usefully \nemploy them in usable item scripts to create pet buffing items.\n\nNobody tried this before, so you're essentially on your own here.\n\n---------------------------------------\n\n*bpet;\n\nThis command opens up a pet hatching window on the client connected to the \ninvoking character. It is used in item script for the pet incubators and \nwill let the player hatch an owned egg. If the character has no eggs, it \nwill just open up an empty incubator window.\nThis is still usable outside item scripts.\n\n---------------------------------------\n\n*makepet <pet id>;\n\nThis command will create a pet egg and put it in the invoking character's \ninventory. The kind of pet is specified by pet ID numbers listed in \n'db/pet_db.txt'. The egg is created exactly as if the character just \nsuccessfully caught a pet in the normal way.\n\n	// This will make you a poring:\n	makepet 1002;\n\nNotice that you absolutely have to create pet eggs with this command. If \nyou try to give a pet egg with 'getitem', pet data will not be created by \nthe char server and the egg will disappear when anyone tries to hatch it.\n\n---------------------------------------\n\n*homshuffle;\n\nThis will recalculate the homunculus stats according to its level, of the \ncurrent invoking character.\n\n---------------------------------------\n\n*setcell \"<map name>\",<x1>,<y1>,<x2>,<y2>,<type>,<flag>;\n\nEach map cell has several 'flags' that specify the properties of that cell.\nThese include terrain properties (walkability, shootability, presence of \nwater), skills (basilica, land protector, ...) and other (NPC nearby, no \nvending, ...).\nEach of these can be 'on' or 'off'. Together they define a cell's behavior.\n\nThis command lets you alter these flags for all map cells in the specified \n(x1,y1)-(x2,y2) rectangle. \n'type' defines which flag to modify. Possible options include cell_walkable,\ncell_shootable, cell_basilica. For a full list, see const.txt.\n'flag' can be 0 or 1 (0:clear flag, 1:set flag). \n\nExample:\n\n	setcell \"arena\",0,0,300,300,cell_basilica,1;\n	setcell \"arena\",140,140,160,160,cell_basilica,0;\n	setcell \"arena\",135,135,165,165,cell_walkable,0;\n	setcell \"arena\",140,140,160,160,cell_walkable,1;\n\nThis will add a makeshift ring into the center of the map. The ring will \nbe surrounded by a 5-cell wide 'gap' to prevent interference from outside, \nand the rest of the map will be marked as 'basilica', preventing observers \nfrom casting any offensive skills or fighting among themselves. Note that \nthe wall will not be shown nor known client-side, which may cause movement \nproblems.\n\nAnother example:\n\nOnBarricadeDeploy:\n	setcell \"schg_cas05\",114,51,125,51,cell_walkable,0;\n	end;\nOnBarricadeBreak:\n	setcell \"schg_cas05\",114,51,125,51,cell_walkable,1;\n	end;\n\nThis could be a part of the WoE:SE script, where attackers are not allowed\nto proceed until all barricades are destroyed. This script would place and\nremove a nonwalkable row of cells after the barricade mobs.\n	\n---------------------------------------\n\n*checkcell (\"<map name>\",<x>,<y>,<type>);\n\nThis command will return 1 or 0, depending on whether the specified cell \nhas the 'type' flag set or not. There are various types to check, all \nmimicking the server's cell_chk enumeration. The types can be found in \ndb/const.txt.\n\nThe meaning of the individual types can be confusing, so here's an \noverview:\n  - cell_chkwall/water/cliff\n	these check directly for the 'terrain component' of the specified cell\n  - cell_chkpass/reach/nopass/noreach\n	passable = not wall & not cliff, reachable = passable \n	wrt. no-stacking mod\n  - cell_chknpc/basilica/landprotector/novending/nochat\n	these check for specific dynamic flags (name indicates what they do)\n\nExample:\n\n	mes \"Pick a destination map.\";\n	input .@map$;\n	mes \"Alright, now give me the coordinates.\";\n	input .@x;\n	input .@y;\n	if( !checkcell(.@map$,.@x,.@y,cell_chkpass) )\n	{\n		mes \"Can't warp you there, sorry!\";\n		close;\n	}\n	else\n	{\n		mes \"Ok, get ready...\";\n		close2;\n		warp .@map$, .@x, .@y;\n		end;\n	}\n\n---------------------------------------\n\n*setwall \"<map name>\",<x>,<y>,<size>,<dir>,<shootable>,\"<name>\";\n*delwall \"<name>\";\n\nCreates an invisible wall, an array of \"setcell\" starting from x,y and \ndoing a line of the given size in the given direction. The difference with \nsetcell is this one update client part too to avoid the glitch problem. \nDirections are the same as NPC sprite facing directions: 0=north, \n1=northwest, 2=west, etc.\n\n---------------------------------------\n\n*readbook <book id>,<page>;\n\nThis will open a book item at the specified page.\n\n---------------------------------------\n//=====================================\n7 - Instance-Related Commands\n//=====================================\n---------------------------------------\n\n*instance_create(\"<instance name>\",<owner id>{,<optional owner_type>});\n\nCreate an instance using the name \"<instance name>\" for the <owner_id> of\nowner_type (when not provided, defaults to IOT_PARTY). Most instance_*\ncommands are used in conjunction with this command and depend on the\nID this command returns.\n\nExample:\n	// Store the Party ID of the invoking character.\n	.@party_id = getcharid(1);\n\n	// Attempt to create an instance using that party ID.\n	.@id = instance_create(\"Endless Tower\", .@party_id);\n	if (.@id == -1) { // Invalid type - not used anymore\n		...\n	} else if (.@id == -2) { // Invalid Party ID\n		...\n	} else if (.@id == -3) { // No free instances (MAX_INSTANCE exceeded)\n		...\n	} else if (.@id == -4) { // Already exists\n		...\n	} else (.@id < 0) { // Unspecified error while queuing instance.\n		...\n	}\n\n---------------------------------------\n\n*instance_destroy {<instance id>};\n\nDestroys instance with the ID <instance id>. If no ID is specified, the \ninstance the script is attached to is used. If in the end no instance_id,\nis found the command halts the script execution.\n\n---------------------------------------\n\n*instance_attachmap(\"<map name>\",<instance id>{,<use base name>{,\"<new map name>\"}});\n\nAttaches the map \"<map name>\" to the instance specified with \n<instance id>. The optional parameter specifies, whether a map requires \nemulation for instancing (1) or not (0 = default). if use base name is specified,\nand \"<new map name>\" too the server will instance the map under the \"<new map name>\",\nname.\n\nReturns the resulting map name on success or an empty string on failure.\n\nExample:\n	instance_attachmap(\"prontera\", .@instance_id,1,\"via\");\n^ the above creates a instance (or clone) of prontera, on a map called \"via\"\n\n---------------------------------------\n\n*instance_detachmap \"<map name>\"{,<instance id>};\n\nDetach the map \"<map name>\" to the instance with the <instance id>. If no \nID is specified, the instance the script is attached to is used. If in the\nend no instance_id is found the command halts the script execution.\n\n---------------------------------------\n\n*instance_init <instance id>;\n\nInitializes the instance given by <instance id>. This copies all NPCs from \nthe source maps to the instanced maps.\n\n---------------------------------------\n\n*instance_announce <instance id>,\"<text>\",<flag>{,<fontColor>{,<fontType>{,<fontSize>{,<fontAlign>{,<fontY>}}}}};\n\nWorks like announce, but has the <instance id> parameter. If instance id \nis -1, the instance the script is attached to is used. If in the\nend no instance_id is found the command halts the script execution.\n\n---------------------------------------\n\n*instance_attach <instance id>;\n\nAttaches the current script to the instance given by <instance id>.\n\n---------------------------------------\n\n*instance_npcname(\"<npc name>\"{,<instance id>});\n\nRetrieves the unique name given to a copy of an NPC given by \"<npc name>\" \nin an instance specified <instance id>. If no ID is specified, the \ninstance the script is attached to is used. If in the end no instance_id,\nis found the command halts the script execution.\n\n---------------------------------------\n\n*has_instance(\"<map name>\"{,<instance id>});\n\nChecks whether or not the given map belongs to specified instance. If no \nID is specified, the instance the script is attached to is used. If the \nscript is not attached to an instance, it'll try to check whether the,\nplayer attached to the script possesses an instance with a map matching\n\"<map name>\". If in the end no instance_id is found the command halts the,\nscript execution.\n\nReturns name of the instanced map on success, otherwise an empty string.\n\n---------------------------------------\n\n*has_instance2(\"<map name>\");\n\nSame as has_instance, with exception it returns the instance id of the map,\nas long as the user is assigned to a instance containing that map.\nIt will return -1 upon failure, valid instance ids are >= 0.\n\n---------------------------------------\n\n*instance_id();\n\nRetrieves the instance id of the script it is being run on.\n\n---------------------------------------\n\n*instance_warpall \"<map name>\",<x>,<y>{,<instance id>};\n\nWarps all players in the instance <instance id> to <map name> at given \ncoordinates. If no ID is specified, the instance the script is attached to \nis used. If in the end no instance_id is found the command halts the,\nscript execution.\n\n---------------------------------------\n\n*instance_set_timeout <alive timeout>,<idle timeout>{,<instance id>};\n\nSets the timeout values for an instance given by <instance id>. If no ID \nis specified, the instance the script is attached to is used. If in the end,\nno instance_id is found the command halts the script execution.\n\nParameter <alive timeout> specifies the total amount of time the instance \nwill exist. Parameter <idle timeout> specifies how long players have, when \nthey are outside of the instance, until it is destroyed.\n\nBoth timeout values are in seconds.\n\n---------------------------------------\n\n*instance_check_party(<party id>{,<amount>{,<min>{,<max>}}});\n\nThis function checks if a party meets certain requirements, returning 1 if \nall conditions are met and 0 otherwise. It will only check online \ncharacters.\n\namount - number of online party members (default is 1).\nmin    - minimum level of all characters in the party (default is 1).\nmax    - maximum level of all characters in the party (default is max \n		 level in conf).\n\nExample:\n\nif (instance_check_party(getcharid(1),2,2,149)) {\n	mes \"Your party meets the Memorial Dungeon requirements.\",\n	mes \"All online members are between levels 1-150 and at least two are online.\";\n	close;\n} else {\n	mes \"Sorry, your party does not meet the requirements.\";\n	close;\n}\n\n---------------------------------------\n\n*instance_check_guild(<guild_id>{,<amount>{,<min>{,<max>}}});\n\nThis function checks if a guild meets certain requirements, returning 1 if\nall conditions are met and 0 otherwise. it will only check online characters.\n\namount - number of online guild members (default is 1).\nmin - minimum level of all characters in the guild (default is 1).\nmax - maximum level of all characters in the guild (default is max level in conf).\n\nExample:\n	if (instance_check_guild(getcharid(2), 2, 1, 150)) {\n		mes \"Your guild meets the Memorial Dungeon requirements.\",\n		mes \"All online members are between levels 1-150 and at least two are online.\";\n		close;\n	} else {\n		mes \"Sorry, your guild does not meet the requirements.\";\n		close;\n	}\n\n---------------------------------------\n*instance_set_respawn(<map_name>,<x>,<y>{,<instance_id>});\n\nUpdates the 'reload spawn' position of a instance,\nthat is where players in the instance are sent to upon @reloadscript,\nuses the npc instance (if any) when instance_id is not provided,\nhandy to update a instance's progress so that when/if @reloadscript happens\nthe damage to the players progress is reduced.\nIt is most effective when used with instance variables (which are @reloadscript persistent)\n\nIf a player warps into a instance before this command has been used,\nit will use the player's warp destination as the initial respawn point,\nit can of course be modified by using this script command at any point.\n\n---------------------------------------\n*instance_mapname(\"<map name>\"{,<instance id>})\n\nReturns the unique name of the instanced map. If no instance ID is specified,\nthe instance the script is attached to is used. If the script is not attached to\nan instance, the instance of the currently attached player's party is used. If\nthat fails, the command returns an empty string instead.\n\n\n---------------------------------------\n//=====================================\n7 - End of Instance-Related Commands\n//=====================================\n---------------------------------------\n\n\n---------------------------------------\n//=====================================\n8 - Quest Log-Related Commands\n//=====================================\n---------------------------------------\n\n*questinfo <Quest ID>, <Icon> {, <Map Mark Color>{, <Job Class>}};\n\nThis is esentially a combination of questprogress and showevent. Use this only\nin an OnInit label. For the Quest ID, specify the quest ID that you want\nchecked if it has been started yet.\n\nFor Icon, use one of the following:\n\nNo Icon		: QTYPE_NONE\n! Quest Icon	: QTYPE_QUEST\n? Quest Icon	: QTYPE_QUEST2\n! Job Icon	: QTYPE_JOB\n? Job Icon	: QTYPE_JOB2\n! Event Icon	: QTYPE_EVENT\n? Event Icon	: QTYPE_EVENT2\nWarg		: QTYPE_WARG\nWarg Face	: QTYPE_WARG2 (Only for packetver >= 20120410)\n\nMap Mark Color, when used, creates a mark in the user's mini map on the position of the NPC,\nthe available color values are:\n\n0 - No Marker\n1 - Yellow Marker\n2 - Green Marker\n3 - Purple Marker\n\nWhen a user shows up on a map, each NPC is checked for questinfo that has been set.\nIf questinfo is present, it will check if the quest has been started, if it has not, the bubble will appear.\n\nOptionally, you can also specify a Job Class if the quest bubble should only appear for a certain class.\n\nExample\nizlude,100,100,4	script	Test	844,{\n	mes \"[Test]\";\n	mes \"Hello World.\";\n	close;\n\n	OnInit:\n		questinfo 1001, QTYPE_QUEST, 0, Job_Novice;\n		end;\n}\n\n---------------------------------------\n\n*setquest <ID>;\n\nPlace quest of <ID> in the users quest log, the state of which is \"active\".\n\nIf *questinfo is set, and the same ID is specified here, the icon will be cleared when the quest is set.\n\n---------------------------------------\n\n*completequest <ID>{,<ID2>};\n\nChange the state for the given quest <ID> to \"complete\" and remove from \nthe users quest log.\n\nIf a second quest id of greater value is specified, all quests between the two\nwill be completed.\n\n---------------------------------------\n\n*erasequest <ID>{,<ID2>};\n\nRemove the quest of the given <ID> from the user's quest log.\n\nIf a second quest id of greater value is specified, all quests between the two\nwill be erased.\n\n---------------------------------------\n\n*changequest <ID>,<ID2>;\n\nRemove quest of the given <ID> from the user's quest log.\nAdd quest of the <ID2> to the the quest log, and the state is \"active\".\n\n---------------------------------------\n\n*questprogress(<ID>{,PLAYTIME|HUNTING})\n\nIf no additional argument supplied, return the state of the quest:\n	0 = Quest not started (not in quest log)\n	1 = Quest has been given\n	2 = Quest completed\n\nIf parameter 'PLAYTIME' is supplied:\n	0 = Quest not started (not in quest log)\n	1 = The time limit has not yet been reached\n	2 = The time limit has been reached\n\nIf parameter 'HUNTING' is supplied:\n	0 = Quest not started (not in quest log)\n	1 = Player hasn't killed all of the target monsters\n	2 = Player has killed all of the target monsters\n\n---------------------------------------\n\n*questactive(<ID>)\n\nCheck whether the given quest is in its active state.\n\nReturns true if the quest is active, false otherwise (quest not started,\ninactive or completed)\n\n---------------------------------------\n\n*showevent <icon>{,<mark color>}\n\nShow an emotion on top of a NPC, and optionally,\na colored mark in the mini-map like \"viewpoint\".\nThis is used to indicate that a NPC has a quest or an event to \na certain player. \n\nAvailable Icons:\n\nRemove Icon	: QTYPE_NONE\n! Quest Icon	: QTYPE_QUEST\n? Quest Icon	: QTYPE_QUEST2\n! Job Icon	: QTYPE_JOB\n? Job Icon	: QTYPE_JOB2\n! Event Icon	: QTYPE_EVENT\n? Event Icon	: QTYPE_EVENT2\nWarg		: QTYPE_WARG\nWarg Face	: QTYPE_WARG2 (Only for packetver >= 20120410)\n\nMark Color:\n0 - No Mark\n1 - Yellow Mark\n2 - Green Mark\n3 - Purple Mark\n\n---------------------------------------\n//=====================================\n8 - End of Quest Log-Related Commands\n//=====================================\n---------------------------------------\n\n\n---------------------------------------\n//=====================================\n9 - Battlegrounds-Related Commands\n//=====================================\n---------------------------------------\n\n*waitingroom2bg_single(<battle group>,\"<mapname>\",<x>,<y>,\"<npc name>\");\n\nAdds the first waiting player from the chat room of given NPC to an \nexisting battleground group and warps it to specified coordinates on given \nmap.\n\n---------------------------------------\n\n*waitingroom2bg(\"<mapname>\",<x>,<y>,\"<On Quit Event>\",\"<On Death Event>\"{,\"<npc name>\"});\n\n<Mapname> and X Y coordinates refer to where the \"respawn\" base is, where \nthe player group will respawn when they die.\n<On Quit Event> refers to an NPC label that attaches to the character and \nis run when they relog.\n<On Death Event> refers to an NPC label that attaches to the character and \nis run when they die. Can be \"\" for empty.\n\nUnlike the prior command, the latter will attach a GROUP in a waiting room \nto the battleground, and sets the array $@arenamembers[0] where 0 holds \nthe IDs of the first group, and 1 holds the IDs of the second.\n\nIf the option parameter is left out, the waiting room of the current NPC \nis used.\n\nExample:\n	// Battle Group will be referred to as $@KvM01BG_id1, and when they \n	// die, respawn at bat_c01,52,129.\n	$@KvM01BG_id1 = waitingroom2bg(\"bat_c01\",52,129,\"KvM01_BG::OnGuillaumeQuit\",\"KvM01_BG::OnGuillaumeDie\");\n	end;\n\n----------------------------------------\n\n*bg_team_setxy <Battle Group ID>,<x>,<y>;\n\nUpdate the respawn point of the given battle group to x, y on the same \nmap. The <Battle Group ID> can be retrieved using getcharid(4).\n\nExample:\n	bg_team_setxy getcharid(4),56,212;\n	mapannounce \"bat_a01\", \"Group [1] has taken the work shop, and will now respawn there.\",bc_map,0xFFCE00;\n	end;\n\n----------------------------------------\n\n*bg_warp <Battle Group>,\"<Mapname>\",<x>,<y>;\n\nSimilar to warp command.\nPlace all members of <Battle Group> at <mapname> at x y.\n\nExample:\n	//place the battle group one for Tierra Gorge at starting position.\n	bg_warp $@TierraBG1_id1,\"bat_a01\",352,342;\n	end;\n\n----------------------------------------\n\n*bg_monster <Battle Group>,\"<map name>\",<x>,<y>,\"<name to show>\",<mob id>,\"<event label>\";\n*bg_monster(<Battle Group>,\"<map name>\",<x>,<y>,\"<name to show>\",<mob id>,\"<event label>\");\n\nSimilar to monster script command.\nSpawn a monster with allegiance to the given battle group.\nDoes not allow for the summoning of multiple monsters.\nMonsters are similar to that in War of Emperium, in that the specified \nBattle group is considered friendly.\n\nExample:\n	// It can be used in two different ways.\n	bg_monster $@TierraBG1_id2,\"bat_a01\",167,50,\"Food Depot\",OBJ_B,\"Feed Depot#1::OnMyMobDead\";\n	end;\n\n	// Alternatively, you can set an ID for the monster using \"set\".\n	// This becomes useful when used with the command below.\n	$@Guardian_3 = bg_monster($@TierraBG1_id2,\"bat_a01\",268,204,\"Guardian\",B_S_GUARDIAN,\"NPCNAME::OnMyMobDead\");\n	end;\n\n----------------------------------------\n\n*bg_monster_set_team <GID>,<Battle Group>;\n\nThis command will change the allegiance if a monster in a battle ground.\nGID can be set when spawning the monster via the bg_monster command.\n\nExample:\n\n	end;\n\nOnEnable:\n	mapannounce \"A guardian has been summoned for Battle Group 2!\",bc_map,0xFFCE00;\n	set $@Guardian, bg_monster($@BG_2,\"bat_a01\",268,204,\"Guardian\",B_S_GUARDIAN,\"NPCNAME::OnMyMobDead\");\n	initnpctimer;\n	end;\n\nOnTimer1000:\n	stopnpctimer;\n	mapannounce \"Erm, sorry about that! This monster was meant for Battle Group 1.\",bc_map,0xFFCE00;\n	bg_monster_set_team $@Guardian, $@BG_1;\n	end;\n\n----------------------------------------\n\n*bg_leave;\n\nRemoves attached player from their Battle Group.\n\n----------------------------------------\n\n*bg_destroy <Batte Group>;\n\nAs the name says, destroys the battle group created for that battle ground.\n\n----------------------------------------\n\n*areapercentheal \"<mapname>\",<x1>,<y1>,<x2>,<y2>,<hp>,<sp>;\n\nNot exactly limited to battleground use, this will restore HP/SP in a \ndefined area at a percentage.\n\nExample:\n	areapercentheal \"bat_a01\",52,208,61,217,100,100;\n	end;\n\n----------------------------------------\n\n*bg_get_data(<Battle Group>,<type>);\n\nRetrieves data related to given battle group. Type can be one of the \nfollowing:\n\n	0 - Amount of players currently belonging to the group.\n\n----------------------------------------\n\n*bg_getareausers(<battle group>,<map name>,<x0>,<y0>,<x1>,<y1>);\n\nRetrieves amount of players belonging to given battle group on given map \nwithin an specified rectangular area.\n\n----------------------------------------\n\n*bg_updatescore \"<mapname>\",<Guillaume Score>,<Croix Score>;\n\nThis command will force the update of the displayed scoreboard.\nIt is only usable when the map is defined as a Type 2 Battleground:\nmapflag%TAB%<mapname>%TAB%battleground%TAB%2\n\n---------------------------------------\n//=====================================\n9 - End of Battlegrounds-Related Commands\n//=====================================\n---------------------------------------\n\n\n---------------------------------------\n//=====================================\n10 - Mercenary Commands\n//=====================================\n---------------------------------------\n\n*mercenary_create <class>,<contract time>;\n\nThis command summons a mercenary of given class, for given amount of time \nin milliseconds. Typically used in item scripts of mercenary scrolls.\n\n----------------------------------------\n\n*mercenary_heal <hp>,<sp>;\n\nThis command works like 'heal', but affects the mercenary of the currently \nattached character.\n\n----------------------------------------\n\n*mercenary_sc_start <type>,<tick>,<val1>;\n\nThis command works like 'sc_start', but affects the mercenary of the \ncurrently attached character.\n\n----------------------------------------\n\n*mercenary_get_calls(<guild>);\n*mercenary_set_calls <guild>,<value>;\n\nSets or gets the mercenary calls value for given guild for currently \nattached character. Guild can be one or the following constants:\n\n	ARCH_MERC_GUILD\n	SPEAR_MERC_GUILD\n	SWORD_MERC_GUILD\n\n----------------------------------------\n\n*mercenary_get_faith(<guild>);\n*mercenary_set_faith <guild>,<value>;\n\nSets or gets the mercenary faith value for given guild for currently \nattached character. Guild can be one or the following constants:\n\n	ARCH_MERC_GUILD\n	SPEAR_MERC_GUILD\n	SWORD_MERC_GUILD\n\n---------------------------------------\n\n*getmercinfo(<type>{,<char id>});\n\nRetrieves information about mercenary of the currently attached character. \nIf char id is given, the information of that character is retrieved \ninstead. Type specifies what information to retrieve and can be one of the \nfollowing:\n\n	0 - Database ID\n	1 - Class\n	2 - Name\n	3 - Faith value for this mercenary's guild, if any\n	4 - Calls value for this mercenary's guild, if any\n	5 - Kill count\n	6 - Remaining life time in msec\n	7 - Level\n\nIf the character does not have a mercenary, the command returns \"\"\nfor name and 0 for all other types.\n\n---------------------------------------\n//=====================================\n10 - End of Mercenary-Related Commands\n//=====================================\n---------------------------------------\n\n\n---------------------------------------\n//=====================================\n11 - Queue-Related Commands\n//=====================================\n---------------------------------------\n\n*queue();\n\nCreates a new queue instance and returns the created queue id.\n\n---------------------------------------\n\n*queuesize(<queue_id>);\n\nReturns the amount of entries in the queue instance of <queue_id>.\n\n---------------------------------------\n\n*queueadd(<queue_id>,<var_id>);\n\nAdds <var_id> to queue of <queue_id>, returning 1 if <var_id> is already\npresent in the queue, otherwise returning 0.\n\n---------------------------------------\n\n*queueremove(<queue_id>,<var_id>);\n\nRemoves <var_id> from queue of <queue_id>, returning 1 if <var_id> is not\npresent in the queue, otherwise returning 0.\n\n---------------------------------------\n\n*queueopt(<queue_id>,<optionType>,{Optional <option val>});\n\nModifies <queue_id>'s <optionType>. When <option val> is not present\n<optionType> is removed from <queue_id>. When present it modifies\n<queue_id>'s <optionType> with the new <option val> value.\n\nCurrently 3 options are available:\nHQO_OnDeath (1), HQO_OnLogout (2), HQO_OnMapChange (3)\n\nNote: The constant names are not final.\n\nExample:\n	queueopt(.@queue_id,0,\"MyNPC::MyOnQueueMemberDeathEventName\");\n	\n---------------------------------------\n\n*queuedel(<queue_id>);\n\nDeletes <queue_id> and returns 1 when <queue_id> is not found, otherwise\n0 is returned.\n\n---------------------------------------\n\n*queueiterator(<queue_id>);\n\nCreates a new queue iterator instance.\nA queue iterator is not a reference to a queue's actual members, it copies\nthe queues members when initialized, this way you can loop through them\neven if you remove them from the queue.\n\n---------------------------------------\n\n*qicheck(<queue_iterator_id>);\nchecks whether there is a next member in the iterator's queue, 1 when\nit does, 0 otherwise.\n\n---------------------------------------\n\n*qiget(<queue_iterator_id>);\n\nobtains the next member in the iterator's queue, returns the next member's\nid or 0 when it doesnt exist.\n\nExample:\n	for (.@elem = qiget(.@queue_iterator_id); qicheck(.@queue_iterator_id); .@elem = qiget(.@queue_iterator_id)) {\n		//Do something\n	}\n\n---------------------------------------\n\n*qiclear(<queue_iterator_id>);\n\nDeletes a queue iterator from memory and returns 1 when it fails,\notherwise 0 is returned.\n\n---------------------------------------\n//=====================================\n11 - End of Queue-Related Commands\n//=====================================\n---------------------------------------\n\n---------------------------------------\n//=====================================\n12 - NPC Trader-Related Commands\n//=====================================\nCommands that control NPC Trader Shops\nSee /doc/sample/npc_trader_sample.txt\n---------------------------------------\n\n*openshop({NPC_Name});\n\nopens the trader shop from the currently-attached npc unless,\nwhen the optional NPC_Name param is used.\n\n---------------------------------------\n\n*sellitem <Item_ID>{,<price>{,<qty>}};\n\nadds (or modifies) <Item_ID> data to the shop,\nwhen <price> is not provided (or when it is -1) itemdb default is used.\nqty is only necessary for NST_MARKET trader types.\n\nwhen <Item_ID> is already in the shop,\nthe previous data (price/qty), is overwritten with the new.\n\n---------------------------------------\n\n*stopselling <Item_ID>;\n\nattempts to remove <Item_ID> from the current shop list.\n\n---------------------------------------\n\n*setcurrency <Val1>{,<Val2>};\n\nupdates the currently attached player shop funds,\nto be used within a \"OnCountFunds\" event of a NST_CUSTOM trader type.\n\n<Val1> is the value used in the *Cash* Points field\n<Val2> is the value used in the Kafra Points field\n\n---------------------------------------\n\n*tradertype(<Type>);\n\nModifies the npc trader type, item list is cleared upon modifiying the value.\nBy default, all npcs staart with tradertype(NST_ZENY);\n\n- NST_ZENY (0) Normal Zeny Shop\n- NST_CASH (1) Normal Cash Shop\n- NST_MARKET (2) Normal NPC Market Shop (where items have limited availability and need to be refurbished)\n- NST_CUSTOM (3) Custom Shop (any currency, item/var/etca, check sample)\n\n---------------------------------------\n\n*purchaseok();\n\nSigns that the transaction (on a NST_CUSTOM trader) has been successful,\nto be used within a \"OnPayFunds\" event of a NST_CUSTOM trader.\n\n---------------------------------------\n\n*shopcount(<Item_ID>);\n\nReturns the amount of still-available <Item_ID> in the shop (on a NST_MARKET trader).\n\n---------------------------------------\n",
			"file": "/C/Users/MC 100/Desktop/script_commands.txt",
			"file_size": 333055,
			"file_write_time": 130821324686862730,
			"settings":
			{
				"buffer_size": 323980,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "*mes \"<string>\"{,\"<string>\"...\"<string>\"};\n*next;\n*close;\n*close2;\n*end;\n*set <variable>,<expression>;\n*set(<variable>,<expression>)\n*setd \"<variable name>\",<value>;\n*getd(\"<variable name>\")\n*getvariableofnpc(<variable>,\"<npc name>\")\n*goto <label>;\n*menu \"<option_text>\",<target_label>{,\"<option_text>\",<target_label>,...};\n*select(\"<option>\"{,\"<option>\",...})\n*prompt(\"<option>\"{,\"<option>\",...})\n*input(<variable>{,<min>{,<max>}})\n*callfunc \"<function>\"{,<argument>,...<argument>};\n*callfunc(\"<function>\"{,<argument>,...<argument>})\n*callsub <label>{,<argument>,...<argument>};\n*callsub(<label>{,<argument>,...<argument>})\n*getarg(<index>{,<default_value>})\n*getargcount()\n*return {<value>};\n*function <function name>;\n*function <function name> {\n*is_function(\"<function name>\")\n*if (<condition>) <statement>;\n*while (<condition>) <statement>;\n*for (<variable initialization>; <condition>; <variable update>) <statement>;\n*do { <statement>; } while (<condition>);\n*freeloop(<toggle>)\n\n*setarray <array name>[<first value>],<value>{,<value>...<value>};\n*cleararray <array name>[<first value to alter>],<value>,<number of values to set>;\n*copyarray <destination array>[<first value>],<source array>[<first value>],<amount of data to copy>;\n*deletearray <array name>[<first value>],<how much to delete>;\n*strcharinfo(<type>)\n*strnpcinfo(<type>)\n*charid2rid(<char id>)\n*getarraysize(<array name>)\n*getelementofarray(<array name>,<index>)\n*readparam(<parameter number>)\n*getcharid(<type>{,\"<character name>\"})\n*getnpcid(<type>{,\"<npc name>\"});\n*getchildid()\n*getmotherid()\n*getfatherid()\n*ispartneron()\n*getpartnerid()\n*getpartyname(<party id>)\n*getpartymember <party id>{,<type>};\n*getpartyleader(<party id>{,<type>})\n*getlook(<type>)\n*getsavepoint(<information type>)\n*getcharip({\"<character name>\"|<account id>|<char id>})\n*sit({\"<character name>\"})\n*stand({\"<character name>\"})\n*issit({\"<character name>\"})\n*getequipid(<equipment slot>)\n*getequipname(<equipment slot>)\n*getitemname(<item id>)\n*getbrokenid(<number>)\n*getbrokencount()\n*getequipisequiped(<equipment slot>)\n*getequipisenableref(<equipment slot>)\n*getequiprefinerycnt(<equipment slot>)\n*getequipweaponlv(<equipment slot>)\n*getequippercentrefinery(<equipment slot>)\n*getareadropitem(\"<map name>\",<x1>,<y1>,<x2>,<y2>,<item>)\n*getequipcardcnt(<equipment slot>)\n*getinventorylist;\n*getcartinventorylist;\n*cardscnt()\n*getrefine()\n*getnameditem(<item id>,\"<name to inscribe>\");\n*getnameditem(\"<item name>\",\"<name to inscribe>\");\n*getitemslots(<item ID>)\n*getiteminfo(<item ID>,<type>)\n*getequipcardid(<equipment slot>,<card slot>)\n*getmapxy(\"<variable for map name>\",<variable for x>,<variable for y>,<type>{,\"<search string>\"})\n*getgmlevel()\n*getgroupid()\n*gettimetick(<tick type>)\n*gettime(<type>)\n*gettimestr(<format string>,<max length>)\n*getusers(<type>)\n*getmapusers(\"<map name>\")\n*getareausers({\"<map name>\",}{<x1>,<y1>,<x2>,<y2>})\n*getareausers({\"<map name>\",}{<radius>})\n*_in\" maps, due to all the shops and houses.\n*getusersname;\n*getguildname(<guild id>)\n*getguildmaster(<guild id>)\n*getguildmasterid(<guild id>)\n*getcastlename(\"<map name>\")\n*getcastledata(\"<map name>\",<type of data>)\n*setcastledata \"<map name>\",<type of data>,<value>;\n*getgdskilllv(<guild id>,<skill id>)\n*getgdskilllv(<guild id>,\"<skill name>\")\n*requestguildinfo <guild id>{,\"<event label>\"};\n*getmapguildusers(<mapname>,<guild id>)\n*getguildmember <guild id>{,<type>};\n*getskilllv(<skill id>)\n*getskilllv(\"<skill name>\")\n*getskilllist;\n*getpetinfo(<type>)\n*petstat(<flag>)\n*getmonsterinfo(<mob ID>,<type>)\n*addmonsterdrop(<mob id or name>, <item id>, <rate>)\n*delmonsterdrop(<mob id or name>, <item id>)\n*getmobdrops(<mob id>)\n*skillpointcount()\n*getscrate(<effect type>,<base rate>{,<GID>})\n*playerattached()\n*isloggedin(<account id>{,<char id>})\n*checkweight(<item id>,<amount>{,<item id>,<amount>,<item id>,<amount>,...});\n*checkweight(\"<item name>\",<amount>{,\"<item name>\",<amount>,\"<item name>\",<amount>,...});\n*checkweight2(<id_array>,<amount_array>);\n*basicskillcheck()\n*checkoption(<option number>)\n*checkoption1(<option number>)\n*checkoption2(<option number>)\n*setoption <option number>{,<flag>};\n*setcart {<type>};\n*checkcart()\n*setfalcon {<flag>};\n*checkfalcon()\n*setmount {<flag>};\n*checkmount()\n*setcashmount;\n*hascashmount()\n*checkwug()\n*checkvending({\"<Player Name>\"})\n*checkchatting({\"<Player Name>\"})\n*checkidle({\"<Player Name>\"})\n*agitcheck()\n*agitcheck2()\n*isnight()\n*checkre(<type>)\n*isequipped(<id>{,<id>{,<id>{,<id>}}})\n*isequippedcnt(<card id>{,<card id>{,<card id>{,<card id>}}})\n*checkequipedcard(<card id>)\n*getequipisidentify(<equipment slot>)\n*attachrid(<account ID>)\n*detachrid;\n*rid2name(<rid>)\n*message \"<character name>\",\"<message>\";\n*dispbottom \"<message>\";\n*showscript \"<message>\"{,<GID>};\n*warp \"<map name>\",<x>,<y>;\n*areawarp \"<from map name>\",<x1>,<y1>,<x2>,<y2>,\"<to map name>\",<x3>,<y3>{,<x4>,<y4>};\n*warpparty \"<to_mapname>\",<x>,<y>,<party_id>,{\"<from_mapname>\"};\n*warpchar \"<mapname>\",<x>,<y>,<char_id>;\n*warpguild \"<mapname>\",<x>,<y>,<guild_id>;\n*warppartner(\"<map name>\",<x>,<y>);\n*savepoint \"<map name>\",<x>,<y>;\n*heal <hp>,<sp>;\n*itemheal <hp>,<sp>;\n*2)/100]\n*2)/100]\n*percentheal <hp>,<sp>;\n*recovery;\n*jobchange <job number>{,<upper flag>};\n*jobname (<job number>)\n*eaclass ({<job number>})\n*roclass <job number> {,<gender>}\n*changebase <job ID number>;\n*classchange <view id>,<type>;\n*changesex;\n*getexp <base xp>,<job xp>;\n*setlook <look type>,<look value>;\n*changelook <look type>,<look value>;\n*pushpc <direction>,<cells>;\n*get_version()\n*montransform <monster id>,<duration>{,<sc_type>{,<val1>{,<val2>{,<val3>{,<val4>}}}}}; \n*montransform \"<monster name>\",<duration>{,<sc_type>{,<val1>{,<val2>{,<val3>{,<val4>}}}}}; \n*getitem <item id>,<amount>{,<account ID>};\n*getitem \"<item name>\",<amount>{,<account ID>};\n*getitem2 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};\n*getitem2 \"<item name>\",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};\n*5)<<8);\n*getitembound <item id>,<amount>,<bound type>{,<account ID>};\n*getitembound \"<item name>\",<amount>,<bound type>{,<account ID>};\n*getitembound2 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<bound type>;\n*getitembound2 \"<item name>\",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<bound type>;\n*countbound({<bound type>})\n*checkbound(<item_id>{,<bound_type>{,<refine>{,<attribute>{,<card_1>{,<card_2>{,<card_3>{,<card_4>}}}}}}});\n*getnameditem <item id>,<character name|character ID>;\n*getnameditem \"<item name>\",<character name|character ID>;\n*rentitem <item id>,<time>;\n*rentitem \"<item name>\",<time>;\n*makeitem <item id>,<amount>,\"<map name>\",<X>,<Y>;\n*makeitem \"<item name>\",<amount>,\"<map name>\",<X>,<Y>;\n*cleanarea \"<map name>\",<x1>,<y1>,<x2>,<y2>;\n*cleanmap \"<map name>\";\n*searchitem <array name>,\"<item name>\";\n*delitem <item id>,<amount>{,<account ID>};\n*delitem \"<item name>\",<amount>{,<account ID>};\n*delitem2 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};\n*delitem2 \"<item name>\",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};\n*countitem(<item id>)\n*countitem(\"<item name>\")\n*countitem2(<item id>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>)\n*countitem2(\"<item name>\",<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>)\n*groupranditem <item_id/constant>;\n*getrandgroupitem <item_id/constant>,<quantity>;\n*packageitem\n*enable_items;\n*disable_items;\n*itemskill <skill id>,<skill level>,{flag};\n*itemskill \"<skill name>\",<skill level>,{flag};\n*itemeffect <item id>;\n*itemeffect \"<item name>\";\n*consumeitem is an alias of itemeffect (added for compatibility)\n*produce <item level>;\n*cooking <dish level>;\n*makerune <% success bonus>;\n*successremovecards <equipment slot>;\n*failedremovecards <equipment slot>,<type>;\n*repair <broken item number>;\n*repairall;\n*successrefitem <equipment slot>{,<upgrade_count>};\n*failedrefitem <equipment slot>;\n*downrefitem <equipment slot>{,<downgrade_count>};\n*unequip <equipment slot>;\n*clearitem;\n*equip <item id>;\n*equip2 <item id>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>;\n*autoequip <item id>,<option>;\n*buyingstore <slots>;\n*searchstores <uses>,<effect>;\n*delequip <equipment slot>;\n*openstorage;\n*openmail;\n*openauction;\n*guildopenstorage()\n*guildchangegm(<guild id>,<new master's name>)\n*guildgetexp <amount>;\n*guildskill <skill id>,<level>\n*guildskill \"<skill name>\",<level>\n*resetlvl <action type>;\n*resetstatus;\n*resetskill;\n*sc_start 	<effect type>,<ticks>,<value 1>{,<rate>,<flag>{,<GID>}};\n*sc_start2 	<effect type>,<ticks>,<value 1>,<value 2>{,<rate>,<flag>{,<GID>}};\n*sc_start4 	<effect type>,<ticks>,<value 1>,<value 2>,<value 3>,<value 4>{,<rate>,<flag>{,<GID>}};\n*sc_end 	<effect type>{,<GID>};\n*getstatus <effect type>{,<type>};\n*skilleffect <skill id>,<number>;\n*skilleffect \"<skill name>\",<number>;\n*npcskilleffect <skill id>,<number>,<x>,<y>;\n*npcskilleffect \"<skill name>\",<number>,<x>,<y>;\n*specialeffect <effect number>{,<send_target>{,\"<NPC Name>\"}};\n*specialeffect2 <effect number>{,<send_target>{,\"<Player Name>\"}};\n*statusup <stat>;\n*statusup2 <stat>,<amount>;\n*bonus <bonus type>,<val1>;\n*bonus2 <bonus type>,<val1>,<val2>;\n*bonus3 <bonus type>,<val1>,<val2>,<val3>;\n*bonus4 <bonus type>,<val1>,<val2>,<val3>,<val4>;\n*bonus5 <bonus type>,<val1>,<val2>,<val3>,<val4>,<val5>;\n*autobonus <bonus script>,<rate>,<duration>{,<flag>,{<other script>}};\n*autobonus2 <bonus script>,<rate>,<duration>{,<flag>,{<other script>}};\n*autobonus3 <bonus script>,<rate>,<duration>,<skill id>,{<other script>};\n*autobonus3 <bonus script>,<rate>,<duration>,\"<skill name>\",{<other script>};\n*skill <skill id>,<level>{,<flag>};\n*skill \"<skill name>\",<level>{,<flag>};\n*addtoskill <skill id>,<level>{,<flag>};\n*addtoskill \"<skill name>\",<level>{,<flag>};\n*nude;\n*disguise <Monster ID>;\n*undisguise;\n*marriage(\"<spouse name>\");\n*wedding;\n*divorce()\n*pcfollow <id>,<target id>;\n*pcstopfollow <id>;\n*pcblockmove <id>,<option>;\n*monster     \"<map name>\",<x>,<y>,\"<name to show>\",<mob id>,<amount>{,\"<event label>\"{,<size>{,<ai>}}};\n*areamonster \"<map name>\",<x1>,<y1>,<x2>,<y2>,\"<name to show>\",<mob id>,<amount>{,\"<event label>\"{,<size>{,<ai>}}};\n*areamobuseskill \"<map name>\",<x>,<y>,<range>,<mob id>,<skill id>,<skill level>,<cast time>,<cancelable>,<emotion>,<target type>;\n*areamobuseskill \"<map name>\",<x>,<y>,<range>,<mob id>,\"<skill name>\",<skill level>,<cast time>,<cancelable>,<emotion>,<target type>;\n*killmonster \"<map name>\",\"<event label>\"{,<type>};\n*killmonsterall \"<map name>\"{,<type>};\n*strmobinfo(<type>,<monster id>);\n*mobcount(\"<map name>\",\"<event label>\")\n*clone \"<map name>\",<x>,<y>,\"<event>\",<char id>{,<master_id>{,<mode>{,<flag>,<duration>}}}\n*summon \"Monster name\",<monster id>{,<Time Out>{,\"event label\"}};\n*homevolution;\n*gethominfo(<type>)\n*morphembryo;\n*hommutate {<ID>};\n*checkhomcall()\n*unitwalk <GID>,<x>,<y>;\n*unitwalk <GID>,<target_GID>;\n*unitkill <GID>;\n*unitwarp <GID>,<Mapname>,<x>,<y>;\n*unitattack <GID>,<Target ID>;\n*unitstop <GID>;\n*unittalk <GID>,<Text>;\n*unitemote <GID>,<Emote>;\n*disablenpc \"<NPC object name>\";\n*enablenpc \"<NPC object name>\";\n*hideonnpc \"<NPC object name>\";\n*hideoffnpc \"<NPC object name>\";\n*doevent \"<NPC object name>::<event label>\";\n*donpcevent \"<NPC object name>::<event label>\";\n*npctalk \"<message>\";\n*setnpcdisplay(\"<npc name>\", \"<display name>\", <class id>, <size>)\n*setnpcdisplay(\"<npc name>\", \"<display name>\", <class id>)\n*setnpcdisplay(\"<npc name>\", \"<display name>\")\n*setnpcdisplay(\"<npc name>\", <class id>)\n*addtimer <ticks>,\"NPC::OnLabel\";\n*deltimer \"NPC::OnLabel\";\n*addtimercount \"NPC::OnLabel\",<ticks>;\n*initnpctimer	{ \"<NPC name>\" {, <Attach Flag>} } |\n*stopnpctimer	{ \"<NPC name>\" {, <Detach Flag>}  } |\n*startnpctimer	{ \"<NPC name>\" {, <Attach Flag>} } |\n*setnpctimer	<tick>{,\"<NPC name>\"};\n*getnpctimer	(<type of information>{,\"<NPC name>\"})\n*attachnpctimer	{\"<character name>\"};\n*detachnpctimer	{\"<NPC name>\"};\n*sleep {<milliseconds>};\n*sleep2 {<milliseconds>};\n*awake \"<NPC name>\";\n*progressbar \"<color>\",<seconds>;\n*announce \"<text>\",<flag>{,<fontColor>{,<fontType>{,<fontSize>{,<fontAlign>{,<fontY>}}}}};\n*mapannounce \"<map name>\",\"<text>\",<flag>{,<fontColor>{,<fontType>{,<fontSize>{,<fontAlign>{,<fontY>}}}}}};\n*areaannounce \"<map name>\",<x1>,<y1>,<x2>,<y2>,\"<text>\",<flag>{,<fontColor>{,<fontType>{,<fontSize>{,<fontAlign>{,<fontY>}}}}}};\n*callshop \"<name>\",<option>;\n*npcshopitem \"<name>\",<item id>,<price>{,<item id>,<price>{,<item id>,<price>{,...}}}\n*npcshopadditem \"<name>\",<item id>,<price>{,<item id>,<price>{,<item id>,<price>{,...}}}\n*npcshopdelitem \"<name>\",<item id>{,<item id>{,<item id>{,...}}}\n*npcshopattach \"<name>\"{,<flag>}\n*waitingroom \"<chatroom name>\",<limit>{,<event label>,<trigger>,<required zeny>,<min lvl>,<max lvl>};\n*delwaitingroom {\"<NPC object name\"};\n*enablewaitingroomevent {\"<NPC object name>\"};\n*disablewaitingroomevent {\"<NPC object name>\"};\n*getwaitingroomstate(<information type>{,\"<NPC object name>\"})\n*warpwaitingpc \"<map name>\",<x>,<y>{,<number of people>};\n*kickwaitingroomall {\"<NPC object name>\"};\n*setmapflagnosave \"<map name>\",\"<alternate map name>\",<x>,<y>;\n*setmapflag \"<map name>\",<flag>{,<val>};\n*removemapflag \"<map name>\",<flag>;\n*getmapflag(\"<map name>\",<flag>)\n*setbattleflag \"<battle flag>\",<value>;\n*getbattleflag(\"<battle flag>\")\n*warpportal <x>,<y>,\"<mapname>\",<x>,<y>;\n*mapwarp \"<from map>\",\"<to map>\",<x>,<y>{,<type>,<ID>};\n*maprespawnguildid \"<map name>\",<guild id>,<flag>;\n*agitstart;\n*agitend;\n*agitstart2;\n*agitend2;\n*gvgon \"<map name>\";\n*gvgoff \"<map name>\";\n*flagemblem <guild id>;\n*guardian \"<map name>\",<x>,<y>,\"<name to show>\",<mob id>{,\"<event label>\"{,<guardian index>}};\n*guardianinfo(\"<map name>\", <guardian number>, <type>);\n*npcspeed <speed value>;\n*npcwalkto <x>,<y>;\n*npcstop;\n*movenpc \"<NPC name>\",<x>,<y>{,<dir>};\n*debugmes \"<message>\";\n*logmes \"<message>\";\n*globalmes \"<message>\"{,\"<NPC name>\"};\n*channelmes(\"<#channel>\", \"<message>\");\n*rand(<number>{,<number>});\n*viewpoint <action>,<x>,<y>,<point number>,<color>;\n*cutin \"<filename>\",<position>;\n*pet <pet id>;\n*emotion <emotion number>{,<target>{,\"<target name>\"}};\n*misceffect <effect number>;\n*soundeffect \"<effect filename>\",<type>;\n*soundeffectall \"<effect filename>\",<type>{,\"<map name>\"}{,<x0>,<y0>,<x1>,<y1>};\n*playbgm \"<BGM filename>\";\n*playbgmall \"<BGM filename>\"{,\"<map name>\"{,<x0>,<y0>,<x1>,<y1>}};\n*pvpon \"<map name>\";\n*pvpoff \"<map name>\";\n*atcommand \"<command>\";\n*charcommand \"<command>\";\n*bindatcmd \"command\",\"<NPC object name>::<event label>\"{,<group level>,<group level char>,<log>};\n*unbindatcmd \"command\";\n*useatcmd \"command\";\n*unitskilluseid <GID>,<skill id>,<skill lvl>{,<target id>};\n*unitskilluseid <GID>,\"<skill name>\",<skill lvl>{,<target id>};\n*unitskillusepos <GID>,<skill id>,<skill lvl>,<x>,<y>;\n*unitskillusepos <GID>,\"<skill name>\",<skill lvl>,<x>,<y>;\n*npcskill <skill id>,<skill lvl>,<stat point>,<NPC level>;\n*npcskill \"<skill name>\",<skill lvl>,<stat point>,<NPC level>;\n*setnpcdistance <distance>\n*getnpcdir {<name>};\n*setnpcdir {<name>,} <direction>;\n*getnpcclass {<name>};\n*day;\n*night;\n*pcre_match(\"<string>\",\"<regex>\");\n*defpattern <set number>,\"<regular expression pattern>\",\"<event label>\";\n*activatepset <set number>;\n*deactivatepset <set number>;\n*deletepset <set number>;\n*pow(<number>,<power>)\n*log10(<number>)\n*sqrt(<number>)\n*distance(<x0>,<y0>,<x1>,<y1>)\n*min(<number>{,<number>...<number>})\n*max(<number>{,<number>...<number>})\n*md5(\"<string>\")\n*query_sql(\"your MySQL query\"{, <array variable>{, <array variable>{, ...}}});\n*query_logsql(\"your MySQL query\"{, <array variable>{, <array variable>{, ...}}});\n*escape_sql(<value>)\n*setiteminfo(<item id>,<type>,<value>)\n*setitemscript(<item id>,<\"{ new item script }\">{,<type>});\n*atoi(\"<string>\")\n*axtoi(\"<string>\")\n*strtol(\"string\", base)\n*compare(\"<string>\",\"<substring>\")\n*strcmp(\"<string>\",\"<string>\")\n*getstrlen(\"<string>\")\n*charisalpha(\"<string>\",<position>)\n*charat(<string>,<index>)\n*setchar(<string>,<char>,<index>)\n*insertchar(<string>,<char>,<index>)\n*delchar(<string>,<index>)\n*strtoupper(<string>)\n*strtolower(<string>)\n*charisupper(<string>,<index>)\n*charislower(<string>,<index>)\n*substr(<string>,<start_index>,<end_index>)\n*explode(<dest_array>,<string>,<delimiter>)\n*implode(<string_array>{,<glue>})\n*sprintf(<format>{,param{,param{,...}}})\n*sscanf(<string>,<format>{,param{,param{,...}}})\n*strpos(<haystack>,<needle>{,<offset>})\n*replacestr(<input>, <search>, <replace>{, <usecase>{, <count>}})\n*countstr(<input>, <search>{, <usecase>})\n*setfont <font>;\n*showdigit <value>{,<type>};\n*petskillbonus <bonus type>,<value>,<duration>,<delay>;\n*petrecovery <status type>,<delay>;\n*petloot <max items>;\n*petskillsupport <skill id>,<skill level>,<delay>,<percent hp>,<percent sp>;\n*petskillsupport \"<skill name>\",<skill level>,<delay>,<percent hp>,<percent sp>;\n*petskillattack <skill id>,<damage>,<number of attacks>,<rate>,<bonusrate>;\n*petskillattack \"<skill name>\",<damage>,<number of attacks>,<rate>,<bonusrate>;\n*bpet;\n*makepet <pet id>;\n*homshuffle;\n*setcell \"<map name>\",<x1>,<y1>,<x2>,<y2>,<type>,<flag>;\n*checkcell (\"<map name>\",<x>,<y>,<type>);\n*setwall \"<map name>\",<x>,<y>,<size>,<dir>,<shootable>,\"<name>\";\n*delwall \"<name>\";\n*readbook <book id>,<page>;\n*instance_create(\"<instance name>\",<owner id>{,<optional owner_type>});\n*instance_destroy {<instance id>};\n*instance_attachmap(\"<map name>\",<instance id>{,<use base name>{,\"<new map name>\"}});\n*instance_detachmap \"<map name>\"{,<instance id>};\n*instance_init <instance id>;\n*instance_announce <instance id>,\"<text>\",<flag>{,<fontColor>{,<fontType>{,<fontSize>{,<fontAlign>{,<fontY>}}}}};\n*instance_attach <instance id>;\n*instance_npcname(\"<npc name>\"{,<instance id>});\n*has_instance(\"<map name>\"{,<instance id>});\n*has_instance2(\"<map name>\");\n*instance_id();\n*instance_warpall \"<map name>\",<x>,<y>{,<instance id>};\n*instance_set_timeout <alive timeout>,<idle timeout>{,<instance id>};\n*instance_check_party(<party id>{,<amount>{,<min>{,<max>}}});\n*instance_check_guild(<guild_id>{,<amount>{,<min>{,<max>}}});\n*instance_set_respawn(<map_name>,<x>,<y>{,<instance_id>});\n*instance_mapname(\"<map name>\"{,<instance id>})\n*questinfo <Quest ID>, <Icon> {, <Map Mark Color>{, <Job Class>}};\n*setquest <ID>;\n*questinfo is set, and the same ID is specified here, the icon will be cleared when the quest is set.\n*completequest <ID>{,<ID2>};\n*erasequest <ID>{,<ID2>};\n*changequest <ID>,<ID2>;\n*questprogress(<ID>{,PLAYTIME|HUNTING})\n*questactive(<ID>)\n*showevent <icon>{,<mark color>}\n*waitingroom2bg_single(<battle group>,\"<mapname>\",<x>,<y>,\"<npc name>\");\n*waitingroom2bg(\"<mapname>\",<x>,<y>,\"<On Quit Event>\",\"<On Death Event>\"{,\"<npc name>\"});\n*bg_team_setxy <Battle Group ID>,<x>,<y>;\n*bg_warp <Battle Group>,\"<Mapname>\",<x>,<y>;\n*bg_monster <Battle Group>,\"<map name>\",<x>,<y>,\"<name to show>\",<mob id>,\"<event label>\";\n*bg_monster(<Battle Group>,\"<map name>\",<x>,<y>,\"<name to show>\",<mob id>,\"<event label>\");\n*bg_monster_set_team <GID>,<Battle Group>;\n*bg_leave;\n*bg_destroy <Batte Group>;\n*areapercentheal \"<mapname>\",<x1>,<y1>,<x2>,<y2>,<hp>,<sp>;\n*bg_get_data(<Battle Group>,<type>);\n*bg_getareausers(<battle group>,<map name>,<x0>,<y0>,<x1>,<y1>);\n*bg_updatescore \"<mapname>\",<Guillaume Score>,<Croix Score>;\n*mercenary_create <class>,<contract time>;\n*mercenary_heal <hp>,<sp>;\n*mercenary_sc_start <type>,<tick>,<val1>;\n*mercenary_get_calls(<guild>);\n*mercenary_set_calls <guild>,<value>;\n*mercenary_get_faith(<guild>);\n*mercenary_set_faith <guild>,<value>;\n*getmercinfo(<type>{,<char id>});\n*queue();\n*queuesize(<queue_id>);\n*queueadd(<queue_id>,<var_id>);\n*queueremove(<queue_id>,<var_id>);\n*queueopt(<queue_id>,<optionType>,{Optional <option val>});\n*queuedel(<queue_id>);\n*queueiterator(<queue_id>);\n*qicheck(<queue_iterator_id>);\n*qiget(<queue_iterator_id>);\n*qiclear(<queue_iterator_id>);\n*openshop({NPC_Name});\n*sellitem <Item_ID>{,<price>{,<qty>}};\n*stopselling <Item_ID>;\n*setcurrency <Val1>{,<Val2>};\n*Cash* Points field\n*tradertype(<Type>);\n*purchaseok();\n*shopcount(<Item_ID>);",
			"settings":
			{
				"buffer_size": 20167,
				"line_ending": "Windows",
				"name": "*mes \"<string>\"{,\"<string>\"...\"<string>\"};"
			}
		}
	],
	"build_system": "Packages/AAAPackageDev/Support/Convert to ....sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/AAAPackageDev/Support/Convert to ....sublime-build",
					""
				],
				[
					"Packages/AAAPackageDev/Support/Convert to ....sublime-build",
					"JSON"
				],
				[
					"Packages/AAAPackageDev/Support/Convert to ....sublime-build",
					"Property List"
				],
				[
					"Packages/AAAPackageDev/Support/Convert to ....sublime-build",
					"YAML (Block Style)"
				],
				[
					"Packages/AAAPackageDev/Support/Convert to ....sublime-build",
					"YAML (Default Style)"
				]
			],
			[
				"Packages/AAAPackageDev/Support/Convert to ....sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 150.0,
		"last_filter": "remove",
		"selected_items":
		[
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"Package Control: rem",
				"Package Control: Remove Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"package control",
				"Package Control: Install Package"
			]
		],
		"width": 528.0
	},
	"console":
	{
		"height": 386.0,
		"history":
		[
			"print (view.syntax_name(view.sel()[0].b))",
			"sublime.set_clipboard(view.syntax_name(view.sel()[0].b))",
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/E/Users/MC 65/Documents/NerdzRO/SERVER/src"
	],
	"file_history":
	[
		"/C/Users/MC 100/Downloads/eventozeny.txt",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/User/Git.sublime-settings",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/Git/Git.sublime-settings",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/GitGutter/GitGutter.sublime-settings",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/GitGutter/Default (Windows).sublime-keymap",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/ColorPicker/ColorPicker.sublime-settings",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/User/ColorPicker.sublime-settings",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/User/Cronus/cronus.sublime-snippet",
		"/E/Users/MC 65/Documents/NerdzRO/SERVER/src/common/mmo.h",
		"/C/Users/MC 100/Desktop/warper.crn",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/User/Cronus/cronus.YAML-tmLanguage",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/User/Cronus/cronus.tmLanguage",
		"/C/Users/MC 100/Desktop/script_commands.txt",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/User/cronus.sublime-snippet",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/User/cronus.sublime-completions",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/User/cronus.YAML-tmLanguage",
		"/C/Program Files (x86)/VertrigoServ/www/graph/index.php",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/User/cronus.tmLanguage",
		"/E/Users/MC 65/Documents/NerdzRO/SERVER/src/common/sql.c",
		"/C/Program Files (x86)/VertrigoServ/www/mtg/index.php",
		"/C/Users/MC 100/Desktop/perfil.js",
		"/C/Users/MC 100/Desktop/quadros.css",
		"/C/Users/MC 100/Desktop/style.css",
		"/C/Users/MC 100/Desktop/home.css",
		"/C/Program Files (x86)/VertrigoServ/www/instagram/css/style.css",
		"/C/Program Files (x86)/VertrigoServ/www/instagram/index.php",
		"/C/Program Files (x86)/VertrigoServ/www/instagram/css/style2.css",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/FileSystem Autocompletion/Default (Windows).sublime-keymap",
		"/C/Users/MC 100/AppData/Roaming/Sublime Text 3/Packages/FileSystem Autocompletion/FilesystemAutocompletion.sublime-settings",
		"/C/Program Files (x86)/VertrigoServ/www/instagram/js/functions.js",
		"/C/Program Files (x86)/VertrigoServ/www/instagram/gears.html"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"comment",
			"#",
			"script",
			"monster",
			"duplicate",
			"\n			",
			";",
			"\n",
			"//",
			"\\*\\w.+",
			"\\*.+",
			"if",
			"switch",
			"},\n",
			"|OnAgitStart|OnAgitEnd|OnAgitInit",
			"5 - M",
			"4 - P",
			"3 - ",
			"Information-Retrieving Commands",
			"\\*.*$",
			"mes*",
			"');\n",
			"\"\";\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "E:\\Users\\MC 65\\Documents\\NerdzRO\\SERVER\\src"
		}
	],
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "cronus.sublime-completions",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15407,
						"regions":
						{
						},
						"selection":
						[
							[
								4237,
								4237
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/AAAPackageDev/Syntax Definitions/Sublime Completions.tmLanguage",
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "for.sublime-snippet",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 253,
						"regions":
						{
						},
						"selection":
						[
							[
								225,
								225
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/XML/XML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "cronus.YAML-tmLanguage",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9442,
						"regions":
						{
						},
						"selection":
						[
							[
								384,
								384
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/AAAPackageDev/Syntax Definitions/Sublime Text Syntax Def (YAML).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Program Files (x86)/VertrigoServ/www/graph/index.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6005,
						"regions":
						{
						},
						"selection":
						[
							[
								1632,
								1632
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 245.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "/C/Users/MC 100/Desktop/warper.crn",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22090,
						"regions":
						{
						},
						"selection":
						[
							[
								1480,
								1480
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/User/Cronus/cronus.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Users/MC 100/Downloads/eventozeny.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7265,
						"regions":
						{
						},
						"selection":
						[
							[
								2176,
								2181
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/User/Cronus/cronus.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 60.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/Users/MC 100/Desktop/script_commands.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 323980,
						"regions":
						{
						},
						"selection":
						[
							[
								4001,
								4008
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1294.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20167,
						"regions":
						{
						},
						"selection":
						[
							[
								986,
								986
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "*mes \"<string>\"{,\"<string>\"...\"<string>\"};",
							"bh_regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"default_dir": "E:\\Users\\MC 65\\Documents\\NerdzRO\\SERVER\\src",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 126.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 30.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.459595959596,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.package_dev":
	{
		"height": 130.0
	},
	"pinned_build_system": "Packages/AAAPackageDev/Support/Convert to ....sublime-build",
	"project": "",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 211.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
